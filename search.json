[{"title":"vim编辑器之神","url":"/2019/02/21/vim编辑器之神/","content":"本文介绍了vim编辑器的基本配置和操作\n<!-- more -->\n\n# vim编辑器之神\n### 配置vimrc配置\n在shell中可以通过 `vim ~/.vimrc` 或者 `vim /etc/vimrc` 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）：\n\n![](./img/vim1.png) \n\n\n### 常用操作\n#### 1.模式切换\n我们可以将vim分为命令模式、编辑模式和末行模式三种  \n**命令模式：**进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区  (最末什么都没有)\n\n**末行模式：**在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作  (最后有一个冒号)\n\n**编辑模式：**在命令模式下按'i'进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 --INSERT-- 或者 --插入--)  \n\n####2.保存和退出\n在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面  \n**w** -- 只保存(类似快捷键ctr+s)     \n**q** -- 退出（在编辑区的内容全部都保存的情况下才有效）   \n**wq** -- 保存并退出  \n**q!**  -- 强制退出（不保存修改信息）    \n\n####3.光标操作  \n以下光标操作都是在命令模式下输入的  \n**^(shift+6)**  -- 移动到行首  \n**$(shift+4)**  -- 移动到行尾  \n**G(shift+g)**\t-- 移动到文件末尾\n**行号G**\t\t\t-- 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行\n**gg**\t\t\t\t-- 移动到文件开头  \n\n####4.文本操作  \n以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入  \n**dd**\t\t\t-- 删除光标所在的行    \n**数字dd**\t\t-- 从光标所在行开始往后面开始删，删除指定数量行内容    \n**:%d**\t\t-- 删除所有     \n\n**yy** \t\t-- 复制光标所在的行  \n**数字yy**\t\t-- 从光标所在行开始复制指定行数的内容   \n**p**\t\t\t-- 将复制的内容粘贴到光标所在的位置  \n**u**\t\t\t-- 撤销      \n**ctr+r**    -- 反撤销    \n\n**:%!sort**  -- 对内容排序  \n\n**:/查找对象[/gice]**\t-- 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找  \n\n\n**:1,$s/被替换对象/替换内容[/gice*]*    -- 将正则表达式匹配到的内容替换成指定内容   \n\n\t-\tg: 全局匹配  \n\t- \ti: 忽略大小写 \n\t-   c: 替换时需要提示  \n\t-   e: 忽略错误  \n\n\n\n\n\n\n\n\n\n\n\n","tags":["软件学习"],"categories":["python编程"]},{"title":"Nginx服务器","url":"/2019/02/21/Nginx服务器安装/","content":"本文介绍了Nginx服务器如何通过git bash安装在linux系统\n<!-- more -->\n\n# Nginx服务器\n### 1.阿里云添加80端口\n阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口\n\n![打开安全组设置](./img/aliyun0.png)  \n![](./img/aliyun2.png)\n![](./img/aliyun3.png)\n![](./img/aliyun4.png)\n\n\n\n### 2. 安装nginx\n\na) 添加nginx存储库  \n\n```python\n\tyum install epel-release\n```\n\nb) 安装nginx\n\n```python\n\tyum install nginx\n```\nc) 运行nginx  \nNginx不会自行启动。要运行Nginx  \n\n```\n\tsystemctl start nginx\n```\n\nnginx的运行命令:  \n\n```\n\tsystemctl status nginx 查看nginx的状态  \n\tsystemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动  \n```\n\nd) 系统启动时启动Nginx  \n\n```\n\tsystemctl enable nginx\n```\n\ne）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：   \n\n```\n\tsudo firewall-cmd --permanent --zone=public --add-service=http \n\n\tsudo firewall-cmd --permanent --zone=public --add-service=https\n\n\tsudo firewall-cmd --reload\n```\n\n\n### 3.nginx目录共享配置  \na) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting  \nb) 打开 etc/nginx/nginx.conf 文件，设置server\n\n```\n\t#共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表\n\troot /home/yuting;\n\tlocation / {\n\t       autoindex on;\n\t       autoindex_exact_size on;\n\t       autoindex_localtime on;\n\t}  \n```\n\n除了可以共享文件，还可以自定义页面\n\n```\n\t#自定义服务器页面\n\tlocation / {\n\t\t\troot /home/yuting;\n\t\t\tindex index.html index.htm;\n\t}\n```\n\n注意： 如果出现权限问题，可以修改目录的权限  \n\n# ssh密钥认证  \n1.在主机和从机上执行：`ssh-keygen`\n\n2.在从机上执行:  `scp  id_rsa.pub  root@主机地址:~/.ssh/master.pub`\n(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’)\n\n3.在主机中的.ssh文件夹中创建authorized_keys文件： `touch authorized_keys` \n\n4.修改文件authorized_keys的权限: `chmod 600  authorized_keys`  \n\n5.将master.pub放进authorized_keys文件中:  `cat master.pub >>  authorized_keys`\n\n6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中\n\n\n\n\n\n\n","tags":["软件安装"],"categories":["python编程"]},{"title":"MySQL配置","url":"/2019/02/21/MySQL配置/","content":"本文介绍了MySQL如何安装在linux系统上\n<!-- more -->\n\nMySQL配置  \n\n1. 下载MySQL源安装包: `wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm`  \n\n2. 安装MySQL源: `yum localinstall mysql57-community-release-el7-8.noarch.rpm`\n\n3. 安装MySQL:  `yum install mysql-community-server`  \n\n4. 设置开启启动MySQL服务: `systemctl enable mysqld`  \n5. 启动/重启MySQL服务：systemctl restart mysqld  \n6. 查看MySQL初始密码：grep 'A temporary password' /var/log/mysqld.log  \n7. 更改MySQL密码：mysqladmin -u root -p'旧密码' password '新密码'  \n   这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法：\n\n　　　　方法一：把密码设置复杂点（这是最直接的方法）\n\n　　　　方法二：关闭mysql密码强度验证(validate_password)\n\n　　　　　　　　编辑配置文件：`vim /etc/my.cnf`， 增加这么一行validate_password=off\n\n　　　　　　　　编辑后重启mysql服务：`systemctl restart mysqld`  \n　　　　　　　　  \n　　　　　　　　  \n8. 设置mysql能够远程访问:  \n   a. 登录进MySQL:  `mysql -uroot -p密码`  \n    b. 增加一个用户给予访问权限: `grant all privileges on *.* to 'root'@'ip地址' identified by '密码' with grant option;`  \n    c. 刷新权限：`flush privileges;­`  \n","tags":["软件安装"],"categories":["python编程"]},{"title":"Hexo博客搭建","url":"/2019/02/21/Hexo博客搭建/","content":"本文介绍了如何通过Hexo搭建和部署博客\n<!-- more -->\n\nHexo博客搭建   \n\n###1. 搭建博客   \n使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js   \n\n1. 首先在自己的电脑上创建一个空的文件夹'Hexo'  \n2. 在gitbash中终端中通过`cd`指令进入到刚才创建的文件夹中   \n3. 输入指令 `npm install -g hexo` 安装Hexo  \n4. 输入指令 `hexo init` 进行初始化  \n5. 依次输入指令`npm install` `hexo server` 启动服务器  \n   博客内容发生改变后可以通过`hexo clean` `hexo generate` `hexo deploy ` `hexo server`刷新后重新启动    \n\n###2. 部署博客  \n\n1. 在github上创建一个空的仓库，仓库名： ``用户名.github.io``  \n2. 修改博客本地仓库中的配置文件（Hexo目录下的_config.yml文件）,在文件末尾添加一下选中内容\n   ![](/Users/yuting/Desktop/Hexo/image1.png)  \n\n3. 使用git部署, 输入指令`npm install hexo-deployer-git --save`  \n4. 输入指令`hexo clean` `hexo generate` `hexo deploy ` 对博客进行提交\n","tags":["软件安装"],"categories":["兴趣爱好"]},{"title":"git常用指令","url":"/2019/02/21/git常用指令/","content":"本文介绍了git的常用指令和基本操作\n<!-- more -->\n\n# git常用指令  \n## 1.基本指令\n`git init ` &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  新建git仓库      \n`git add 文件/文件夹` &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  将文件添加到缓存区中  \n`git add -A` &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --- 添加所有内容到缓存区中\n`git stutas` &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;———    查看git状态  \n`git commit -m  ‘提交信息’`  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  将缓存区中的内容全部提交到git本地仓库中  \n\n\n`git log`   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——-    查看提交日志  \n\n`git reset  - - hard   HEAD`  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——   让工作目录中的内容和仓库中的内容保持一致  \n`git reset  --hard HEAD^`   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到上一个版本  \n`git  reset  - - hard 版本号`  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到指定的版本  \n`git checkout  - -  文件名`  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态)  \n\n`git clone <url> ` - 将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥)  \n\n`git remote add origin 地址`  \t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----- 关联远程仓库(只需要关联一次)\n\n``git push [-u] origin master``  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----- 提交(-u在第一次提交分之的时候才用)  \n\n## 2.分之管理  \n创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发  \n\n常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发)  \n\n`git branch [-a]`   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t- 查看分之   \n`git branch 分之名`\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 创建分之   \n`git checkout   分支名`\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-   切换分之      \n`git checkout -b 分之名`\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t- 切换并创建新的分之   \n`git diff\t分之1  分之2`\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 查看两个分之之间的差异  \n`git merge 分之名\t`\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 让当前分之和指定分之进行合并     \n\n注意: 切换分之、push、pull，这些操作前要保证工作区是clean  \n\n怎么避免冲突：  不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)\n\n\n\n","tags":["软件学习"],"categories":["python编程"]},{"title":"认识python","url":"/2019/02/20/认识python/","content":"本文介绍了pyhton的基础语法\n<!-- more -->\n#一、python常用快捷键\n- ctrl + s    保存\n- ctrl + /    添加或取消单行注释\n- Ctrl + c      复制/拷贝\n- Ctrl + v      粘贴\n- Ctrl + x      剪切\n- Ctrl + z      撤销\n- Ctrl + shift + z      反撤销\n- Ctrl + a      全选\n- Ctrl + f      查找\n- Ctrl + r      替换\n- Ctrl + shift + f10   执行\n- 按住 option(alt)不放，可以让编辑区同时出现多个光标\n  **注**：*快捷键不止是适用于python*\n\n#二、python基础语法\n###1.注释\n**定义**：程序中的说明文字，不会被执行\n***情况1：单行注释***\n格式：\\# + 说明文字\n```\n#这是声明一个变量\nname = '小黄'\nnum = '18'  #这是一个变量，用来保存数字\n```\n**注**：代码上面注释无需空行，代码后面注释需要空2个空格\n***情况2：多行注释***\n格式：\"\"\"说明文字\"\"\" 或者'''说明文字'''\n说明：前后双引号或者单引号各占一行\n###2.标识符\n**定义**：程序中用来给变量、函数或者类命名使用\n**要求**：（python2.x）由字母、数字和下划线组成，并且数字不能开头.\n示例：\n```\nabc = 100\nabc12 = 101\n12_abd = 232  #SyntaxError: invalid syntax  语法错误：无效语法\nadf*fd = 333  #SyntaxError: invalid syntax  语法错误：无效语法\n```\n**注**：（python3.x）中标识符除了ASCII码表还包含其他字符（可以包含中文），但为了让代码更加简单明了，所以还是按照2.x的要求来命名\n###3.关键字（保留字）\n**含义**：python中自带的用来表示特殊功能或者特殊含义的一些标识符\n*python关键字*\n```\n'False', 'None', 'True', 'and', 'as', 'assert', 'break', \n'class', 'continue', 'def', 'del', 'elif', 'else', 'except', \n'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', \n'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', \n'while', 'with', 'yield'\n```\n***如何查询***：\n```\nimport keyword  \n# import - 关键字，自带导入模块功能\n# keyword - python中自带的标准库\nprint(keyword.kwlist)  #通过点方法去调用，打印python中的关键字\nin = 100  # 不能使用关键字命名\n```\n###4.缩进\n**定义**：同一代码块前的缩进需要保持一致，否则会报错\n示例：\n```\nprint('hello python')   #  IndentationError: unexpected indent  缩进错误：意想不到的缩进\nnum = 1\nif num == 1:\nprint('缺少一个缩进')   #IndentationError: expected an indented block 缩进错误：缺少一个缩进块\n```\n###5.一行显示多条语句\n在多条语句之间加**分号！！！**\n示例：\n```\nprint('第一句'）；print('第二句')\n```\n###三、数据类型和字面量\npython中常用的数据类型：数字类型，字符串\n**数字类型**：\n| 类型           | 定义      | 示例             |\n| ------------ | ------- | -------------- |\n| 整型（int）      | 所有整数    | 100， 99，-20    |\n| 浮点型（float）   | 所有小数    | 100.2， 12.5    |\n| 复数型（complex） | 所有虚数    | 10+10j, 12+12j |\n| 布尔型（bool）    | 两种结果的数据 | True, False    |\n**字符串**：\n**定义**：程序中的文本数据，值是通过单或者双引号括起来\n**type函数**:\n**定义**：获取数据的类型\n**用法**：type(数据) \n**输入**：数据\n**输出**：相应的类型名\n**注**：不会在控制台打印，需要通过print函数去打印\n\n#四、变量\n**定义**：python中用来保存数据的容器（如果数据储存就会丢失）\n***如何声明变量***\n**基础语法**：变量名 = 值\n**说明**：变量名 - 程序员自己命名的\n要求：必须是**标识符**，不能是关键字\n规范：\na.遵循**pep8**命名规范，所有字母小写，多个单词组成在单词之间加下划线(_)隔开\nb.**见名知义**（即看见变量名就知道这个变量中存的是什么数据）\n**=** - 赋值符号，将=右边的值赋给左边的变量\n**值** - 所有有结果的表达式都可以作为值\n*情况1:单独声明一个变量*\n示例：\n```\ndog_name = '旺财'\nprint(dog_name)\nage = 18\nnum = 100\n# in = 123  #错误！in是关键字\n```\n*情况2：a.同时声明多个变量，赋一样的值*\n示例：\n```\nnum1 = num2 = num3 = 15\nprint(num1, num2, num3)\n# 输出结果：\n15 15 15\n```\n*b.同时声明多个变量，赋不同的值*\n```\nname, age, sex = '小明'， 20，'男'\nprint(name, age, sex)\n#输出结果：\n小明 20 男\n```\n**注意事项**：\n**a**.变量必须先赋值再使用，不然程序会报错\n示例：\n```\nprint(age)  # NameError: name 'score' is not defined  名字错误：变量名未被定义\n```\n**b**.重复给同一个变量赋值，后面赋的值会覆盖前面赋的值\n示例：\n```\nabc = 1\nabc = 10\nprint(abc)\n# 输出结果：\n10\n```\n**c**.同一个变量可以赋不同类型的值（python是动态语言）\n示例：\n```\nnum = 10\nprint(type(num）)  #输出结果：<class 'int'>\nnum = 'abc'\nprint(type(num))  #输出结果：<class 'str'>\n```\n**补充：声明变量和给变量赋值的原理**\n\n**原理**：首先会在内存堆中开辟一个空间来储存值，然后给这个空间一个地址，再用栈中的变量来储存这个值对应的地址，不存在溢出，而c语言是根据声明变量的类型来决定变量的大小，所以会存在溢出现象\n#五、print和input函数\n#####print函数\n**定义**：在控制台打印它后面括号里的内容\n**用法**：\n**输入**：任意数据类型\n**输出**：不定\n用法1：print(任意数据)，print(变量）\n示例：\n```\nprint(100)  #100\nprint('hello world')  #hello world\nprint(True)  #True\nnum = 1\nprint(num)  #1\n```\n用法2：print(数据1， 数据2， 数据3...) \n说明：一行打印多个数据，多个数据之间用逗号隔开\n示例：\n```\nprint(100, 12.3, 'afd')  #输出结果：100 12.3 afd\n```\n用法3：自定义结尾（默认是换行）和多个内容之间的间隔（默认是空格）\n示例：\n```\nprint('第一行内容'， end='$')  \n# end ->取消换行，并以$符号连接第二行内容\nprint('第二行内容')\nprint(100, 12.3, 'afd', sep='%')  #输出结果：100%12.3%afd\n# sep ->在多个数据间采用某一指定符号连接\n# 本句是采用%连接几个数据\n```\n#####input函数\n**定义**：获取从控制台输入的内容，输入完回车\n**用法**：input（提示信息）\n**输入**：任意数据类型\n**输出**：字符串\n示例：\n```\ncontent = input('请输入：')\nprint(content, type(content)  # 输入的数据 <class 'str'>\n```\n**注**：当程序执行到此时，如果用户不输入内容，会阻塞线程","tags":["语言学习"],"categories":["python编程"]},{"title":"MarkDown基础语法","url":"/2019/02/20/MarkDown基础语法/","content":"本文介绍了一种文本标记语言MarkDown的基础语法\n<!-- more -->\n\n#####Markdown是什么？\n它是一种纯文本格式标记语言。\n#####目的\n通过markdown可以使普通文本具有一定的格式，便于阅读。\n#####输入的是什么？\n1.普通文本\n2.语法符号\n#####优点：\n1.纯文本，只要支持markdown就可以获得一样的格式效果\n2.操纵简单。\n#####缺点：\n1.需要记忆一些语法\n2.有些平台不支持Markdown编辑模式\n```\n简书开启markdown方式：设置->默认编辑器->Markdown编辑器\n\n```\n#一、标题\n语法：#*n(1~6）+ title\n**\\#** - 语法符号\n**title** - 标题内容\n注：最长支持6级标题\n示例:\n```\n#这是一级标题\n##这是二级标题\n###这是三级标题\n####这是四级标题\n#####这是五级标题\n######这是六级标题\n```\n效果：\n\n#这是一级标题\n##这是二级标题\n###这是三级标题\n####这是四级标题\n#####这是五级标题\n######这是六级标题\n\n#二、字体\n- *斜体*\n  语法：\\*要倾斜内容\\* - 内容前后加1个*号\n- **加粗**\n  语法：\\*\\*要加粗内容\\*\\* - 内容前后加2个*号\n- ***斜体加粗***\n  语法：\\*\\*\\*要斜体加粗内容\\*\\*\\* - 前后加3个*号\n- ~~删除线~~\n  语法：\\~\\~删除线内容\\~\\~ - 前后加2个~号\n  示例：\n```\n**这是加粗的内容**\n*这是倾斜的内容*\n***这是倾斜加粗的内容***\n~~这是删除线内容~~\n```\n效果：\n**这是加粗的内容**\n*这是倾斜的内容*\n***这是倾斜加粗的内容***\n~~这是删除线内容~~\n\n#三、引用\n语法：\\>*n(1~n)\n\\> - 语法符号\nn - \\>的个数，理论上1到正无穷\n\n示例：\n```\n>这是引用的内容\n>>这也是引用的内容\n>>>>>这还是引用的内容\n```\n效果：\n>这是引用的内容\n>>这也是引用的内容\n>>>>>这还是引用的内容\n#四、分割线\n语法：3个或3个以上-或*\n示例：\n```\n---\n-----\n***\n*****\n```\n效果：\n显示一样\n---\n----\n***\n****\n#五、图片\n语法：\n\\!\\[图片alt](图片地址\"图片title\")\n图片alt - 显示在图片下方的文字\n图片title - 就是图片的标题，移到图片上显示，title可有可无\n示例：\n```\n![这是一张图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545661304001&di=f1a05707063235a7cd554a8bffa50e4e&imgtype=0&src=http%3A%2F%2Fww2.sinaimg.cn%2Flarge%2F6eff8279jw1f4qfjr7kvaj21hc0u0h23.jpg '海贼王')\n```\n效果：\n![这是一张图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545661304001&di=f1a05707063235a7cd554a8bffa50e4e&imgtype=0&src=http%3A%2F%2Fww2.sinaimg.cn%2Flarge%2F6eff8279jw1f4qfjr7kvaj21hc0u0h23.jpg\n'海贼王' )\n\n#六、超链接\n语法：\n\\[超链接名](超链接地址\"超链接title\")title可有可无\n示例：\n```\n[简书](https://www.jianshu.com)\n[百度](https://www.baidu.com)\n```\n效果:\n[简书](https://www.jianshu.com)\n[百度](https://www.baidu.com)\n\n注明：Markdown语法不支持链接在新界面中打开，故想在新页面中打开可以使用html语言中的a标签代替\n```\n<a href=\"超链接地址\" target=\"_blank\">超链接名字</a>\n示例：\n<a href=\"https://www.baidu.com\" target=\"_blank\">百度一下</a>\n```\n#七、列表\n-  **无序列表**\n   语法：\n   \\- \\+ \\* 任选其一均可\n\n```\n- 列表内容\n+ 列表内容\n* 列表内容\n```\n效果：显示一样\n- 列表内容\n+ 列表内容\n* 列表内容\n\n**注明**：语法符号与内容间用1个空格隔开\n- **有序列表**\n  语法：数字大小表示顺序然后加点(n.) \n  示例：\n```\n1. 列表内容\n2. 列表内容\n3. 列表内容\n```\n效果：没有什么不同\n1 . 列表内容\n2 . 列表内容\n3 . 列表内容\n- **列表嵌套**\n  语法：上级列表和下级列表间敲3个空格\n  示例：\n```\n- 一级无序内容\n   - 二级无序内容\n   - 二级无序内容\n- 一级无序内容\n\n  1.二级有序内容\n  2.二级有序内容\n1. 一级有序内容\n    - 二级无序内容 \n    - 二级无序内容\n2. 一级有序内容\n  1.二级有序内容\n    2.二级有序内容\n```\n\n效果：\n- 一级无序内容\n   - 二级无序内容\n   - 二级无序内容\n- 一级无序内容\n\n  1.二级有序内容\n  2.二级有序内容\n1. 一级有序内容\n    - 二级无序内容 \n    - 二级无序内容\n2. 一级有序内容\n  1.二级有序内容\n    2.二级有序内容\n#八、表格\n语法：\n```\n表头|表头|表头\n---|：--：|---：\n内容|内容|内容\n内容|内容|内容\n-  一个即可，多加目的：对齐\n： 哪边加，文字往哪边靠，\n   两边都加就居中\n注：原生态语法两边用|包起来\n```\n示例：\n```\n菜单|价格|名气\n---| --- |---\n鱼香肉丝|18|排名第一\n土豆肉丝|12|排名第五\n青椒肉丝|15|排名第三\n```\n效果：\n| 菜单   | 价格   | 名气   |\n| ---- | ---- | ---- |\n| 鱼香肉丝 | 18   | 排名第一 |\n| 土豆肉丝 | 12   | 排名第五 |\n| 青椒肉丝 | 15   | 排名第三 |\n#九、代码\n语法：\n单行：\\`代码内容\\` - 内容前后用`连接（是~下面的符号）\n```\n`代码内容`\n```\n代码块：\\```代码内容``` - 内容前后用3个`连接，且语法符号各占一行\n```\n(```）\n代码1\n代码2\n代码3\n（```）\n```\n注：括号只是用来防止转义\n示例：\n单行代码\n```\n`hello world`\n```\n效果：\n`hello world`\n代码块\n```\n(```)\nprint('厉害了我的歌') \n(```)\n```\n效果:\n```\nprint('厉害了我的歌') \n```","tags":["语言学习"],"categories":["python编程"]},{"title":"Hello World","url":"/2019/02/20/hello-world/","content":"欢迎\n<!-- more -->\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","tags":["杂文"]}]