[{"title":"京东购物车(实际应用)","url":"/2019/03/02/京东购物车/","content":"本文介绍了如何使用html、css和js写一个动态的网页\n<!-- more -->\n京东购物车网页内容代码\n```\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"UTF-8\">\n\t\t<title>我的购物车-京东商城</title>\n\t\t<!--=============js代码==============-->\n\t\t<link rel=\"stylesheet\" type=\"text/css\" href=\"css/购物车.css\"/>\n\t\t<script type=\"text/javascript\" src=\"js/jquery.min.js\"></script>\n\t\t<script type=\"text/javascript\" src=\"js/city.js\"></script>\n\t\t<script type=\"text/javascript\" src=\"js/购物车.js\"></script>\n\t</head>\n\t<body>\n\t\t<!--顶部导航条\n\t\t======================================================-->\n\t\t<div id=\"nav\">\n\t\t\t<!--左边-->\n\t\t\t<ul id=\"nav-left\">\n\t\t\t\t<li id=\"li1\"><img src=\"img/yt_home.png\"/><a href=\"#\">京东首页</a></li>\n\t\t\t\t<!--<li id=\"li2\"><img src=\"img/yt_address.png\"/><font>北京</font></li>-->\n\t\t\t\t<li id=\"li2\">\n\t\t\t\t\t<div id=\"selcted-city\">\n\t\t\t\t\t\t<img src=\"img/yt_address.png\"/><font>北京</font>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div id=\"citys\">\n\t\t\t\t\t\t\n\t\t\t\t\t</div>\n\t\t\t\t</li>\n\t\t\t</ul>\n\t\t\t<!--右边-->\n\t\t\t<ul id=\"nav-right\">\n\t\t\t\t<li><a href=\"#\">你好,请登录</a></li>\n\t\t\t\t<li><a href=\"#\" class=\"line\" style=\"color: red;\">免费注册</a>|</li>\n\t\t\t\t<li><a href=\"#\" class=\"line\">我的订单</a>|</li>\n\t\t\t\t<li><a href=\"#\" class=\"line\">我的京东</a>|</li>\n\t\t\t\t<li><a href=\"#\" class=\"line\">京东会员</a>|</li>\n\t\t\t\t<li><a href=\"#\" class=\"line\">企业采购</a>|</li>\n\t\t\t\t<li><font class=\"line\">客户服务</font>|</li>\n\t\t\t\t<li><font class=\"line\">网站导航</font>|</li>\n\t\t\t\t<li><a href=\"#\">手机京东</a></li>\n\t\t\t</ul>\n\t\t</div>\n\t\t\n\t\t<!--中间购物车内容\n\t\t======================================================-->\n\t\t<div id=\"content\">\n\t\t\t<div id=\"search\"></div>\n\t\t\t<div id=\"no-goods\">\n\t\t\t\t<div id=\"\">\n\t\t\t\t\t<img src=\"img/yt_car.png\"/>\n\t\t\t\t\t<font>购物车内暂时没有商品，登录后将显示您之前加入的商品</font>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id=\"goods\">\n\t\t\t\t<table cellspacing=\"0\">\n\t\t\t\t\t<tr height=\"40px\" bgcolor=\"#cccccc\" >\n\t\t\t\t\t\t<td class=\"td1\">\n\t\t\t\t\t\t\t<input type=\"checkbox\" name=\"check-all\" id=\"check-all\" value=\"\" />\n\t\t\t\t\t\t\t<label for=\"check-all\">全选</label>\n\t\t\t\t\t\t</td>\n\t\t\t\t\t\t<td class=\"td2\">商品</td>\n\t\t\t\t\t\t<td class=\"td3\">单价</td>\n\t\t\t\t\t\t<td class=\"td4\">数量</td>\n\t\t\t\t\t\t<td class=\"td5\">小计</td>\n\t\t\t\t\t\t<td class=\"td6\">操作</td>\n\t\t\t\t\t</tr>\n\t\t\t\t</table>\n\t\t\t\t<div id=\"account\">\n\t\t\t\t\t<a id=\"del\" href=\"\">删除选中商品</a>\n\t\t\t\t\t\n\t\t\t\t\t<button>结算</button>\n\t\t\t\t\t<p>总共选中了<a href=\"\">0</a>件商品 总计:<a href=\"\">￥0.00</a></p>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t\n\t\t<!--底部\n\t\t======================================================-->\n\t\t<div id=\"bottom\"></div>\n\t</body>\n</html>\n```\n京东购物车内容样式代码\n```\n\n/*通用\n ============================================*/\n*{\n\tmargin: 0;\n\tpadding: 0;\n}\n\n/*导航条\n ============================================*/\n#nav{\n\t/*设置头部导航条的宽度*/\n\theight: 40px;\n\t/*设置导航条的背景颜色*/\n\tbackground-color: #dddddd;\n\t/*让子标签的内容居中*/\n\tline-height: 40px;\n\t/*让子标签相对于父标签定位*/\n\tposition: relative;\n\t\n}\n\n/*导航条上所有的li标签*/\n#nav li{\n\t/*标签浮动靠左*/\n\tfloat: left;\n\t/*让内容垂直方向居中*/\n\tvertical-align: middle;\n\t/*让子标签相对于父标签定位*/\n\tposition: relative;\n\t/*设置字体大小*/\n\tfont-size: 13px;\n\t/*设置字体颜色*/\n\tcolor: #999999;\n}\n\n#nav a{\n\t/*标签内容颜色*/\n\tcolor: #999999;\n\t/*去掉前面的黑点*/\n\ttext-decoration: none;\n}\n#nav a:hover{\n\t/*鼠标悬停的样式*/\n\tcolor: red;\n}\n\n#nav ul{\n\t/*去掉列表前的符号*/\n\tlist-style: none;\n}\n\n/*=======导航条左边=======*/\n#nav-left{\n\tposition: absolute;\n\tleft: 30px;\n}\n\n#selcted-city{\n\theight: 40px;\n\tposition: relative;\n\tfloat: left;\n}\n#nav-left img{\n\tposition: absolute;\n\twidth: 25px;\n\theight: 25px;\n\ttop: 50%;\n\tmargin-top: -12px;\n}\n#nav-left a{\n\tmargin-left: 25px;\n}\n#nav-left font{\n\tmargin-left: 25px;\n}\n\n#nav-left #li1{\n\tmargin-right: 10px;\n}\n\n/*城市标签*/\n#citys{\n\twidth: 400px;\n\t/*height: 200px;*/\n\tbackground-color: white;\n\tdisplay: none;\n\tmargin-top: 40px;\n}\n#selcted-city{\n\tpadding-right: 20px;\n}\n#li2:hover #selcted-city{\n\tbackground-color: white;\n\tborder: 1px solid #d1d1d1;\n\tborder-bottom: none;\n}\n#li2:hover #citys{\n\tdisplay: block;\n\tborder: 1px solid #d1d1d1;\n\tborder-top: none;\n\t\n}\n\n#citys{\n\t/*清除浮动*/\n\toverflow: hidden;\n\tposition: absolute;\n\tleft: 0px;\n\t/*padding-right: 10px;*/\n}\n\n#citys div{\n\tfloat: left;\n\twidth: 60px;\n\tpadding-left:20px;\n\t/*background-color: seagreen;*/\n\t\n}\n#citys div font{\n\tmargin-left: 0px;\n\tpadding: 3px;\n\tcursor: pointer;\n\t/*background-color: khaki;*/\n}\n\n#citys div font:hover{\n\tcolor: red;\n\tbackground-color: #dfdfdf;\n}\n\n\n/*=======导航条右边========*/\n#nav-right{\n\tposition: absolute;\n\tright: 30px;\n}\n#nav-right li{\n\tmargin-left: 10px;\n}\n.line{\n\tmargin-right: 10px;\n}\n\n\n\n\n/*内容\n ============================================*/\n#content{\n\t/*height: 500px;*/\n\t/*background-color: sandybrown;*/\n}\n\n/*=======搜索=====*/\n#content #search{\n\theight: 120px;\n\tbackground-color: lightsalmon;\n}\n\n/*=======没有商品=====*/\n#content #no-goods{\n\theight: 400px;\n\tbackground-color: white;\n\tline-height: 400px;\n}\n#content #no-goods div{\n\ttext-align: center;\n\tposition: relative;\n}\n#content #no-goods img{\n\twidth: 100px;\n\theight: 100px;\n\n\tvertical-align: middle;\n}\n#content #no-goods font{\n\tcolor: #505050;\n}\n\n/*=======有商品=====*/\n#goods{\n\t/*background-color: skyblue;*/\n\twidth: 900px;\n\tmargin-left: auto;\n\tmargin-right: auto;\n}\n\n/*=====商品表格*/\n#goods table{\n\tmargin-bottom: 20px;\n}\n\ntd{\n\ttext-align: center;\n}\n.td1{\n\twidth: 80px;\n\t\n}\n.td2{\n\twidth: 300px;\n}\n.td3{\n\twidth: 140px;\n}\n.td4{\n\twidth: 140px;\n}\n.td5{\n\twidth: 160px;\n}\n.td6{\n\twidth: 80px;\n}\n\n/*商品信息*/\n#goods .goods-pic{\n\twidth: 80px;\n\theight: 100px;\n\t\n\tvertical-align: middle;\n\tfloat: left;\n}\n\n#goods .goodsInfo{\n\tposition: relative;\n}\n#goods table p{\n\ttext-align: left;\n\tfloat: left;\n\twidth: 220px;\n\tfont-size: 12px;\n\theight: 40px;\n\t\n\tposition: absolute;\n\ttop: 50%;\n\tmargin-top: -20px;\n\tmargin-left: 80px;\n}\n\n/*数量*/\n.td4 button{\n\twidth: 20px;\n\theight: 20px;\n}\n.td4 input{\n\twidth: 20px;\n\theight: 20px;\n\t\n\ttext-align: center;\n}\n\n.td6-del{\n\tcolor: #999999;\n\tcursor: pointer;\n}\n\n\n\n/*=====商品底部*/\n#account #del{\n\tfloat: left;\n}\n\n#account button{\n\tfloat: right;\n}\n\n#account p{\n\tfloat:  right;\n\tmargin-right: 100px;\n}\n\n#account{\n\toverflow: hidden;\n}\n\n\n\n\n/*底部\n ============================================*/\n#bottom{\n\theight: 400px;\n\tbackground-color: lemonchiffon;\n}\n\n```\n京东购物车内容动态布局代码\n```\n$(function(){\n\t//=====================添加城市=====================\n\tvar citysNode = $('#citys')\n\tfor(cityName in cities){\n\t\t//创建城市节点\n\t\tvar cityNode = $('<div><font>'+cityName+'</font></div>')\n\t\t//添加\n\t\tcitysNode.append(cityNode)\n\t}\n\t//默认第一个是白色\n\t$('#citys font:first').css({\n\t\t'color':'white',\n\t\t'background-color': 'red'\n\t})\n\t\n\t$seletedFontNode = $('#citys font:first')\n\t//添加点击事件\n\t$('#citys').on('click', 'div font', function(){\n\t\t//更新背景和字体颜色\n\t\t$(this).css({\n\t\t\t'color':'white',\n\t\t\t'background-color': 'red'\n\t\t})\n\t\t$seletedFontNode.css({\n\t\t\t'color':'#999999',\n\t\t\t'background-color': 'rgba(0,0,0,0)'\n\t\t})\n\t\t$seletedFontNode = $(this)\n\t\t//更新选中的城市\n\t\t$('#selcted-city font').text(this.innerText)\n\t\t//隐藏城市选项\n\t\t$('#citys').css('display','none')\n\t})\n\t\n\t$('#li2').on('mouseover', function(){\n\t\t$('#citys').css('display','block')\n\t})\n\t$('#li2').on('mouseleave', function(){\n\t\t$('#citys').css('display','none')\n\t})\n\t\n\t\n\t//=====================购物车商品=====================\n\t//1.请求商品数据\n\tallGoods = [\n\t\t{\n\t\t\tbig_img:'img/a1.jpg',\n\t\t\tprice: 245,\n\t\t\tdescription:'海澜之家/Heilan Home春装商务白衬衫男修身HNCAD3A067Y 漂白(69) 漂'\n\t\t},\n\t\t{\n\t\t\tbig_img:'img/a2.jpg',\n\t\t\tprice: 123,\n\t\t\tdescription:'海澜之家/Heilan Home春装商务白衬衫男修身HNCAD3A067Y 漂白(69) 漂'\n\t\t},\n\t\t{\n\t\t\tbig_img:'img/a3.jpg',\n\t\t\tprice: 67,\n\t\t\tdescription:'海澜之家/Heilan Home春装商务白衬衫男修身HNCAD3A067Y 漂白(69) 漂'\n\t\t}\n\t]\n\t\n\t\n\t\n\t//2.创建商品对应的标签\n\tfor(var i=0; i<allGoods.length;i++){\n\t\t//拿到每个商品数据\n\t\tgoodsObj = allGoods[i]  \n\t\t//给商品创建对应的节点\n\t\t$td1 = $('<td class=\"td1\"><input type=\"checkbox\"/></td>')\n\t\t$td2 = $('<td class=\"td2 goodsInfo\"><img class=\"goods-pic\" src='+goodsObj['big_img']+'/><p>'+goodsObj['description']+'</p></td>')\n\t\t$td3 = $('<td class=\"td3\">￥'+goodsObj['price']+'.00</td>')\n\t\t$td4 = $('<td class=\"td4\"><button id=\"down\">-</button><input value=\"1\"/><button id=\"up\">+</button></td>')\n\t\t$td5 = $('<td class=\"td5\">￥'+goodsObj['price']+'.00</td>')\n\t\t$td6 = $('<td class=\"td6 td6-del\">删除</td>')\n\t\t$trNode = $('<tr></tr>')\n\t\t$trNode.append($td1)\n\t\t$trNode.append($td2)\n\t\t$trNode.append($td3)\n\t\t$trNode.append($td4)\n\t\t$trNode.append($td5)\n\t\t$trNode.append($td6)\n\t\t//插入表格\n\t\t$('#goods table').append($trNode)\n\t}\n\t\n\t//绑定事件\n\t$('.td4 #down').on('click', function(){\n\t\tvar inputNode = $(this).parent().children()[1]\n\t\tvar num = $(inputNode).val()\n\t\tif(num == 1){\n\t\t\talert('商品至少一个!')\n\t\t\treturn\n\t\t}\n\t\t//数量减1\n\t\tnum--\n\t\t$(inputNode).val(num)\n\t\t//重新计算小计\n\t\tvar $totalNode = $(this).parent().next()   //总计\n\t\tvar $priceNode = $(this).parent().prev()   //单价\n\t\tvar total = Number($priceNode.text().slice(1,10000))*num\n\t\t$totalNode.text('￥'+ total+'.00')\n\t\t\n\t\t\n\t})\n\t$('.td4 #up').on('click', function(){\n\t\tvar inputNode = $(this).parent().children()[1]\n\t\tvar num = $(inputNode).val()\n\t\n\t\t//数量减1\n\t\tnum++\n\t\t$(inputNode).val(num)\n\t\t//重新计算小计\n\t\tvar $totalNode = $(this).parent().next()   //总计\n\t\tvar $priceNode = $(this).parent().prev()   //单价\n\t\tvar total = Number($priceNode.text().slice(1,10000))*num\n\t\t$totalNode.text('￥'+ total+'.00')\n\t})\n\t\n\t\n\t\n\t\n\t\n})\n```\n随机颜色代码\n```\n//随机颜色\nfunction randomColor(){\n\tvar r = parseInt(Math.random()*255)\n\tvar g = parseInt(Math.random()*255)\n\tvar b = parseInt(Math.random()*255)\n\t//'rgb(23, 45, 89)'\n\treturn 'rgb('+r+','+g+','+b+')'\n}\n```","tags":["语言学习"],"categories":["web前端"]},{"title":"Ajax基础","url":"/2019/03/02/Ajax基础/","content":"本文介绍了web前端中的行为标准js(javascript)的网络请求Ajax相关的知识\n<!-- more -->\n###1.什么是Ajax \n**解释**：\n**A**：asynchronous   \n**ja**：javascript   \n**x**：xml (异步js+xml)\n**功能**：专门提供js中的网络请求功能(http请求)\n###2.Ajax的使用\n**a**.\\$.get/post(url,data,fn,type)\n**功能**：获取url接口提供的数据（get的接口），即请求数据\n**说明**：\n**url(请求地址)**：字符串（？之前的内容）\n**data(参数)**：对象（？后面的内容用对象的格式书写）\n**fn(回调函数(参数))**:请求结束后，调用函数，必须有一个参数，参数就是请求的数据\n**type(数据类型)**：数据是字符串,类型例如: json,html, text...\n```\n//http://api.tianapi.com/meinv/key=772a81a51ae5c780251b1f98ea431b84&num=10\nfunction getData(){\n\t$.get('http://api.tianapi.com/meinv/',{key:'772a81a51ae5c780251b1f98ea431b84', num:30},function(result){\n\tvar newsLists = result['newslist']\n\tfor(i=0;i<newsLists.length;i++){\n\t\tnews = newsLists[i]\n\t\timgNode = $('<img style=\"width: 200px; height: 200px;\"/>')\n\t\timgNode.attr('src', news['picUrl'])\n\t\t$('body').append(imgNode)\n\t\t\t\t\t\n\t\t}\n\t})\n}\n```\n\n**b**.\\$.ajax({url:请求地址, type:'get'/'post', async:是否异步, success:回调函数, data:参数对象})\n```\n$.ajax({\n\ttype:\"get\",\n\turl:\"http://api.tianapi.com/meinv/\",\n\tdata:{key:'772a81a51ae5c780251b1f98ea431b84', num:10},\n\tasync:true,\n\tsuccess:function(result){\n\t\tconsole.log(result)\n\t}\n});\n```","tags":["语言学习"],"categories":["web前端"]},{"title":"JQ基础","url":"/2019/03/02/JQ基础/","content":"本文介绍了web前端中的行为标准JS的第三方库JQuery的使用\n<!-- more -->\n#什么是jQuery\n**实质**：对js的封装\n**目的**：为了更方便的使用js\n**位置**：js的代码写在哪儿，jq代码就可以写在哪儿**前提**：使用之前必须导入jQuery\n###导入JQuery\n####方式一：导入本地JQuery\n**前提**：放置JQuery文件到js文件夹中\n```\n<script type=\"text/javascript\" src=\"js/jquery.min.js\"></script>\n```\n####方式二：导入CDN服务器上的jQuery\n```\n<script type=\"text/javascript\" src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"></script>\n```\n#####$ -> 代表jQuery对象\nonload -> js中\n**定义**：网页加载完成对应的事件\n**前提**：标签加载完成和网络请求完成\n```\nwindow.onload = function(){\n\tpNode = document.getElementById('p1')\n\tpNode.innerText = 'hello jQuery！'\n}\n```\t\t\t\n**\\$(document).ready(函数)**\n**前提**：网页中标签加载完成\n**\\$(匿名函数)**\n**前提**：网页中标签加载完成\n```\n$(document).ready(function(){\n\tpNode2 = document.getElementById('p2')\n\tpNode2.innerText = '你好 jQuery'\n})\n\n//相当于上面的写法\n$(function(){\n\tpNode2 = document.getElementById('p2')\n\tpNode2.innerText = '你好 jQuery'\n})\n```\n###节点操作\n#####1.获取节点\n**语法**: $('选择器')\n**返回值**：jQuery的节点对象\n**说明**：\n**选择器**：与CSS的选择器相同\n```\nconsole.log($('#img1'))\nconsole.log($('.c1'))\nconsole.log($('p'))\nconsole.log($('div p'))\nconsole.log($('#p1,a'))\n```\t\n#####+\n```\t\t\nconsole.log($('p+a'))  //选中所有紧跟着p标签的a标签\n```\n#####~*\n```\nconsole.log($('#p3~*'))   //选中和id值是p3的标签后面同级的所有标签\n```\n#####~a\n```\nconsole.log($('#p3~a'))   //选中和id值是p3的标签后面同级的所有的a标签\n```\n#####:first\n```\nconsole.log($('p:first'))  //选中当前页面中的第一个p标签\nconsole.log($('div p:first'))   //选中所有div标签中的第一个p标签\n```\n#####:last\n```\nconsole.log($('p:last'))   //选中当前页面中的最后一个p标签\n```\n#####*:first-child\n```\nconsole.log($('div *:first-child'))   //选中div标签中的第一个子标签\n```\t\t\t\n#####2.创建节点\n**\\$('html标签语法')**\n```\nimageNode = $(\"<img src='img/thumb-1.jpg'/ title='图标'>\")   //创建一个img标签\n```\t\t\t\n#####3.添加节点\n标签.append(子标签)\n```\n$('body').append(imageNode)\t  //在body的最后添加一个子标签\n```\n标签.prepend(子标签)\n```\n$('body').prepend($('<input placeholder=\"请输入账号\"/>'))    //在body的最前面插入一个子标签\n```\n标签.before(子标签)\n```\n$('#img1').before($('<button>before</button>'))   //在id是img1的标签的前面添加一个按钮标签\t\t\n```\n标签.after(子标签)\n```\n$('#img1').after($('<button>after</button>'))\t//在id是img1的标签的后面添加一个按钮标签  \n```\t\t\n#####4.删除节点\n标签.remove()\n```\n$('#img1').remove()     //标签.remove()  - 删除指定标签\n```\n标签.empty()\n```\n$('div').empty()   //标签.empty()   - 清除指定标签中的内容\n```\n###属性操作\n**1.获取普通属性**\n标签.attr(属性名)\n**说明**：这儿的属性名不包括innerHTML,innerText，value\n```\nconsole.log($('#img2').attr('title'))\nconsole.log($('#img2').attr('src'))\n```\t\t\n**2.修改/增加普通属性**\n标签.attr(属性名,值)\n```\n$('#img2').attr('src', 'img/thumb-3.jpg')\n```\t\t\n**3.特殊属性**\na.innerHTML（标签内容属性)\n**语法**：标签.html()\n```\nconsole.log($('#div').html())\n$('#div').html('我是新的div')\n```\t\nb.innerText (标签文本内容)\n**语法**：标签.text()\n```\nconsole.log($('#div').text())\n$('#div').text('我是新的div2')  \n```\t\t\nc.value (单标签内容)\n**语法**：标签.val()\n```\nconsole.log($('#user').val())\n$('#user').val('李四')  \n```\t\t\nd.class\n**语法**：标签.addClass(类名)\n**作用**：给标签添加class值\n```\n$('p').addClass('color')\n```\n**语法**：标签.removeClass(类名)\n**作用**：移除指定的class值\n```\n$('p').removeClass('color')  \n```\t\t\n**4.样式属性**\n标签.css(样式属性名)\n**作用**：获取样式属性值\n标签.css(样式属性名, 值)\n**作用**：设置样式\n标签.css({属性名:属性值, 属性名:属性值 ...})\n**作用**：同时设置多种样式属性\n```\n$('p').css('color', 'slateblue')\n$('p').css('font-size', '20px')\n$('p').css({\n\t'color':'red',\n\t'font-size':'30px'\n})\t\n```\t\n###jQuery同时选中多个标签\n**作用**：操作选中的jQuery对象，就是同时操作被选中jQuery对象的所有对象标签\n```\n$('p').css('color', 'seagreen')   // 同时设置所有p标签的文字颜色\nconsole.log($('p'))\n//同时给所有p标签添加点击事件\n$('p').on('click', function(evt){\n\t//注意:函数中是this都是js对象\n\tconsole.log(this)\n\t//通过js的方式获取内容\n\tconsole.log(this.innerText)\n\t//通过jq的方式获取内容\n\t//js转jq： $(js对象)  -  将js对象转换成jq对象\n\tconsole.log($(this).text())\n})\n```\n#####如何将js对象转换成jq对象\n**语法**：\\$(js对象)\n**作用**：将js对象转换成jq对象\n**注意**：当一个标签不止一个时，转换成jq对象后,会返回容器型的jq对象，但是里面的元素标签还是js标签\n```\n//注意: 单独取出来的标签都是js对象\npNodes = $('p')\n//取指定的标签\nconsole.log(pNodes[0])\nconsole.log(pNodes[1])\n//遍历所有标签\nfor(i=0;i<pNodes.length;i++){\n\tpNode = pNodes[i]\n\t//使用js的方式操作标签\n\tpNode.style.color = 'red'\n\t//使用jq的方式操作标签\n\t$(pNode).css('font-size', '20px')\n}\n```\n###事件绑定\n**语法**：标签.on(事件名, 回调函数)\n**功能**：指定标签发生指定事件后，调用回调函数\n**作用**：功能等同于js的addEventListener\n**说明**：函数中的this指向的是js对象\n```\n$('#btn1').on('click', function(evt){\n\talert('点击按钮')\n\tconsole.log(this, evt.offsetX, evt.offsetY)\n})\n```\t\n\n\t\n\t//(推荐使用！！)\n\t//b.标签.on(事件名, 选择器, 回调函数)  - 给父标签添加事件，将事件传递给选择器选中的子标签,函数中的this是子标签\n\t//标签 - 父标签\n\t//选择器 - 在父标签中去选中子标签\n\t$('#box').on('click', 'div', function(evt){\n\t\tconsole.log(this)\n\t\talert(this.innerText)\n\t})\n\t\n\n\n\n","tags":["语言学习"],"categories":["web前端"]},{"title":"JS应用","url":"/2019/03/02/JS应用/","content":"本文介绍了web前端中的行为标准js(javascript)如何进行实际应用\n<!-- more -->\n#一、属性操作\n```\n<body>\n\t<p id=\"p1\">我是段落<a id=\"a1\" href=\"https://www.baidu.com\">必读</a></p>\n\t<img src=\"img/luffy.jpg\"/>\n</body>\n```\n#####1.节点属性的增删改查\n\t\n######a.查\n**1.**节点.属性\n标签相关属性:\n**innerHTML**\n**作用**：获取标签内容(包含双标签内容中的其他标签和文件)\n**innerText**\n**作用**：标签中的文本内容\nhref,src,text,value,id等,根据标签属性直接获取\n**注意**:标签中的class属性在节点中对应的是className\n```\nalert(pNode.innerHTML)\nalert(pNode.innerText)\nalert(aNode.href)\nalert(imgNode.src)\n```\n样式相关属性: \n可以通过style来获取样式相关属性\n```\naNode.style.color   //获取字体颜色\naNode.style.display   //获取display的值   \n```\n**2.**节点.getAttributse(属性名)\n```\nalert(aNode.getAttribute('href'))\nalert(aNode.getAttribute('style'))\n```\n######b.改、增\n**1.**节点.属性 = 新值\n```\nimgNode.src = 'img/aaa.ico'\nimgNode.title = '路飞'\npNode.style.color = 'rgb(255, 0, 0)'  \npNode.ytIndex = 0    //添加属性\nalert(pNode.ytIndex)\n```\n**2.**节点.setAttribute(属性名, 新值)\n**注意**：inner相关的无效\n```\nimgNode.setAttribute('src', 'img/jd_logo.ico')\n```\t\n######c.删\n**节点.removeAttribute(属性名)**\n```\nimgNode.removeAttribute('src')\n```\n#二、BOM操作\n**1.BOM** \n**解释**：浏览器对象模型(browser object model)\njs提供了一个全局的对象window -> 浏览器\njs中声明的所有的全局变量其实都是添加给window的属性\n```\nvar a = 100\nconsole.log(a, window.a)\n```\n**2.基本操作**\n**a.open()** \n**作用**：打开一个新的窗口\n**输出**：返回被打开的窗口对应的对象\n**语法**：\nopen() - 空白窗口\nopen(url) - 在新窗口打开指定网页\nopen(url,'','width=300,height=200')\n**说明**：打开新的窗口并且设置窗口的宽度和高度\n```\nnewWindow = window.open('01车牌号限行案例.html','', 'width=300,height=200')\n```\n**b.moveTo(x,y)**\n**作用**：移动窗口\n```\nnewWindow.moveTo(100, 100)\n```\n**c.resizeTo(x,y)\n**作用**：设置窗口的大小\n```\nnewWindow.resizeTo(500, 600)\n```\n**d.浏览的宽高**\ninner是内容的宽度和高度\nouter是浏览器的宽度和高度\n```\nconsole.log('=====:',newWindow.innerWidth, newWindow.innerHeight)\nconsole.log('!!!!!:',newWindow.outerWidth, newWindow.outerHeight)\n```\t\n**3.弹框**\n**a**.alert(提示信息)\n**说明**：提示框，只有提示信息和确定按钮\n**b**.confirm(提示信息)\n**说明**：提示框，有确定和取消按钮\n**返回值**：返回是布尔值，true->点击确定，false->点击取消\n```\nresult = confirm('是否确定删除?')\nconsole.log(result)  \n```\n**c**.prompt\n**说明**：提示框，有一个输入框，一个确定按钮和取消按钮; \n**返回值**：返回值是字符串，点击确定返回值是输入框中的内容，点击取消返回值是null\n```\nresult = prompt('提示信息', '输入框中的默认值')\nconsole.log(result)\n```\t\n#三、计时事件\n```\n<p id=\"p1\">5</p>\n```\n1.定时器\n**a.开启定时器**\n**1.setInterval(函数,时间)**\n**作用**：每隔指定的时间调用一次指定的函数\n**返回值**：定时器对象\n**2.setTimeout(函数,时间)**\n**作用**：隔指定时间后调用一次指定函数\n**注意**：函数只会调用一次，相当于定时炸弹\n**说明**：\n函数 - 可以是函数名，也可以是匿名函数\n时间 - 单位是毫秒\n**b.停止定时**\n**clearInterval(定时器对象)**\n**作用**：停止指定的定时器\n**clearTimeout(定时器对象)**\n**作用**：停止指定的定时器\n**函数传递方式**\n```\n//方案一：先声明函数，在传递函数\nfunction timeAction(){\n\tconsole.log('aaa')\n}\ntimer1 = setInterval(timeAction, 1000)\n\t\n//方案二: 直接传递匿名函数\ntimer2 = setInterval(function(){\n\tconsole.log('bbb')\n},1000)\ntimer22 = setTimeout(function(){\n\tconsole.log('时间到!')\n},5000)\n```\n```\t\n//练习：数字递增\nnum = 5\npNode = document.getElementById('p1')\ntimer3 = setInterval(function(){\n\tnum--\n\tpNode.innerText = num\n\tif(num == 0){\n\t\t//停止定时\n\t\tclearInterval(timer3)\n\t}\t\t\n},1000)\n```\n#四、事件绑定\n```\n<style type=\"text/css\">\n\t\t#box1{\n\t\t\twidth: 150px;\n\t\t\theight: 150px;\n\t\t\tbackground-color: lawngreen;\n\t\t}\n</style>\n<body>\n\t<button onclick=\"alert('按钮点击')\">按钮0</button>\n\t<button onclick=\"buttonAction()\">按钮1</button>\n\t<button id=\"btn2\">按钮2</button>\n\t<button id=\"btn3\">按钮3</button>\n\t<div id=\"box1\">\n\t\t</div>\n</body>\n```\n#####1.事件三要素: 事件源、事件、事件驱动程序\n示例：\n小明打狗，狗咬他   --  **事件源**：狗   **事件**：打狗    **事件驱动程序**: 狗咬他\n小明打狗，他爸打他  --   **事件源**：狗   **事件**：打狗    **事件驱动程序**: 他爸打他\n点击按钮，跳转到其他页面  -- **事件源**: 按钮   **事件**:点击按钮   **事件驱动程序**:跳转到其他页面\n#####2.绑定事件\n**a.直接通过标签绑定事件**\n1.直接在事件对应的属性里写js代码\n2.直接在事件对应的属性里写调用函数,这个函数中的this是window\n```\nfunction buttonAction(){\n\tconsole.log(this)\n}\n```\n**b.通过节点绑定事件**\n给节点的事件属性赋函数或者匿名函数\n```\n//函数中this就是事件源(当前被点击的按钮)\nbtnNode2 = document.getElementById('btn2')\n//给点击事件绑定函数\nbtnNode2.onclick = buttonAction\n//给鼠标进入事件绑定函数\nbtnNode2.onmouseover = function(){\n\tthis.style.fontSize = '30px'\n}\nbtnNode2.onmouseover = function(evt){\n\tthis.style.color = 'red'\n}\n```\t\n**c.通过节点绑定事件** \n**节点.addEventListener(事件名, 事件驱动程序)**\n**事件名**: 去掉事件名前面的on, 例如onclick -> click\n这种方式绑定事件，可以给同一个事件源的同一个事件绑定不同的驱动程序\nthis是事件源, evt是事件对象\n```\nbtnNode3 = document.getElementById('btn3')\nbtnNode3.addEventListener('click', function(evt){\n\tconsole.log(this)\n        //alert('按钮3被点击')\n\tthis.style.color = 'red'\n})\nbtnNode3.addEventListener('click', function(evt){\n\tconsole.log(evt)\n\tthis.style.fontSize = '30px'\n})\n```\n驱动程序中的evt参数,代表事件对象\n```\nboxNode1 = document.getElementById('box1')\nboxNode1.addEventListener('click', function(evt){\n\tif(evt.offsetX <= 75){\n\t\tthis.style.backgroundColor = 'red'\n\t}else{\n\t\tthis.style.backgroundColor = 'yellow'\n\t}\n})\n```\t\n**补充：js中的随机数**\n```\nconsole.log(Math.random())    //随机数0-1(小数)\nconsole.log(parseInt(Math.random()*255))    //0-100的整数\nconsole.log(parseInt(Math.random()*90+10))  //10-100的整数\n```\n#####事件冒泡和事件捕获\n**事件冒泡**：子标签上产生的事件会传递给父标签\n**事件捕获**：让事件不在传递给父标签，即阻止事件冒泡\n**语法**：事件.stopPropagation()\n```\n<div id=\"div1\">\n\t<div id=\"div2\">\n\t\t<div id=\"div3\">\t\t\t\n\t\t</div>\n\t</div>\n</div>\n//获取节点\ndivNode1 = document.getElementById('div1')\ndivNode2 = document.getElementById('div2')\ndivNode3 = document.getElementById('div3')\n//绑定事件\ndivNode1.addEventListener('click', function(){\n\talert('div1被点击')\n})\ndivNode2.addEventListener('click', function(evt){\n\talert('div2被点击')\n\tevt.stopPropagation()\n})\ndivNode3.addEventListener('click', function(evt){\n\talert('div3被点击')\n\t//让evt事件对象不传递个当期标签的父标签\n\tevt.stopPropagation()\n})\t\t\n```\n\n\t","tags":["语言学习"],"categories":["web前端"]},{"title":"JS基础(二)","url":"/2019/03/02/JS基础(二)/","content":"本文介绍了web前端中的行为标准js(javascript)基础相关的知识\n<!-- more -->\n# 一、变量作用域\n###a.全局变量\n**适用范围**：声明开始到文件结束**\n**声明位置**：\n**a**.声明在函数外部的变量\n**b**.直接声明在函数内的变量（不加var）\n**注意**：后面的其他的script标签中也可以使用\n```\na100 = 10\nvar a200 = 100\n```\t\n###b.局部变量\n**适用范围**：声明开始到函数结束\n**声明位置**：通过var关键字声明在函数里面的变量\n```\nfunction func2(){\n\t//b200是局部变量\n\tvar b200 = 200\n\tconsole.log(b200)\n\t}\nfunc2()\n```\n#二、字符串\n###a.加法运算： 做字符串拼接操作\n**注意**：js中支持字符串和其他数据相加\n```\nstr1 = 'abc'\nstr2 = 'hello'\nconsole.log(str1+str2)   //abchello\nconsole.log(str1+100)\t //abc100\nconsole.log(str1+[1,2,3])  //abc1,2,3  \n```\n###b.比较运算: >, <, >=, <=,==, ===, !=, !== \n**1.比较相等**\n```\nconsole.log('abc'=='abc')   //true\nconsole.log('abc'=='bac')   //false\nconsole.log(100=='100')   //true\nconsole.log(100==='100')  //false\n```\n**2.比较大小**\n**实质**：比较每一对字符的编码值\n```\nconsole.log('abc' > 'bd')  //false\nconsole.log('z' > 'shjsjhsjasss')   //true  \n```\n###c.字符串长度\n**用法**：字符串.length\n**输出**：数字\n```\nstr2 = 'adfdfdf'\nconsole.log(str2.length)  // 7\n```\n###d.相关方法\n####创建字符串对象\n```\nstr3 = new String('abc')\nconsole.log(str3)\n```\t\n#####1.字符串.big()\n**作用**：产生一个big标签，并且标签中的内容就是字符串的值\n```\nnewStr = str3.big()\nconsole.log(str3, newStr)  \n```\n#####2.字符串.charAt(下标)\n**作用**：获取指定下标对应的字符; 相当于: 字符串[下标]\n```\nconsole.log('hello'.charAt(0))   //h\nconsole.log('hello'[1])    //e\n```\t\n#####3.字符串.charCodeAt(下标)\n**作用**：获取指定下标对应的字符的编码(js中的字符采用的也是unicode编码)\n```\nconsole.log('hello'.charCodeAt(0))   //104\n```\t\n#####4.字符串.concat(数据1,数据2,....)\n**作用**：将字符串和多个数据依次连接在在一起产生一个新的字符串(相当于+的功能)\n```\nconsole.log('abc'.concat(123, 'aaa'))   //abc123aaa  \n```\t\n#####5.字符串1.endsWith(字符串2)\n**作用**：判断字符串1是否以字符串2结尾\n```\nconsole.log('hello'.endsWith('llo'))   //true   \n```\n#####6.字符串1.indexOf(字符串2)\n**作用**：获取字符串2在字符串1中第一次出现的位置\n```\nconsole.log('abcbaab'.indexOf('b'))  //1\n```\t\n#####7.字符串1.lastIndexOf(字符串2)\n**作用**：获取字符串2在字符串1中最后一次出现的位置\n```\nconsole.log('abcbaab'.lastIndexOf('b'))    //0\n```\t\n#####8.字符串.match(正则表达式)\n**作用**：正则匹配一个字符串，匹配成功后返回\n**注意:**js中正则写在两个//之间\n```\nre = /\\d{3}/\nresult = '237abc'.match(re)\nconsole.log(result, result[0], result.index)  \n```\n#####9.字符串.repeat(数字)\n**作用**：指定的字符串重复出现指定次数产生一个新的字符串(相当于python中的*)\n```\nconsole.log('abc'.repeat(2))  //abcabc\n```\t\n#####10.字符串1.replace(正则表达式,字符串2)\n**作用**：将字符串1中第一个满足正则表达式的子串替换成字符串2\n```\nconsole.log('aaa34bbb992nnn92nkkj8==22jkk'.replace(/\\d+/, 'A'))\n```\t\n#####11.字符串.slice(开始下标, 结束下标)\n**特点**：顾头不顾尾，步长具有唯一性：为1\n**注意:** 这儿的下标可以是负数，代表倒数第几个\n```\nconsole.log('hello'.slice(0, 2))    //he\nconsole.log('hello'.slice(1, -2))   //el\n```\t\n#####12.字符串1.split(字符串2)\n**作用**：将字符串1按照字符串2进行切割\n**输出**：数组\n```\nconsole.log('hello'.split('e')) \n```\t\n#三、数组\n###1.基本操作\n#####a.加法运算\n**实质**：将数组转换成字符串然后拼接\n```\nconsole.log([12, 3, 'abc']+[1, 2, 3])  //12,3,abc1,2,3 \nconsole.log(String([1, 2, 3]))  //1,2,3\n```\n#####b.比较运算:\n**实质**：比较两个对象的地址是否相等，相等于python中的is\n```\narr1 = [1, 2]\narr2 = [1, 2]\narr3 = arr1\nconsole.log(arr1===arr1)   //true\nconsole.log(arr1==arr3)    //true\nconsole.log(arr1==arr2)    //false\n```\t\n#####c.数组长度\n**用法**：数组.length属性\n```\nconsole.log(arr1.length)\n```\t\n#2.增删改查  \n#####1.查: 获取元素\n**a.获取单个元素**\n**语法**：数组[下标]\n**作用**：获取下标对应的元素\n**注意**：负数的下标没有意义\n```\nfruits = ['苹果', '梨', '葡萄', '西瓜', '桃子', '李子']\nconsole.log(fruits[1])   \n```\t\n**b.切片**\n**语法**：数组.slice(开始下标,结束下标) \n**输出**：数组\n**注意**：\n1.结束下标取不到\n2.下标可以是负数\n3.开始下标要在结束下标的前面\n```\nconsole.log(fruits.slice(0, 3))    //['苹果', '梨', '葡萄']\nconsole.log(fruits.slice(3, 0))    //[]\nconsole.log(fruits.slice(3, -2))   //['西瓜']  \n```\n**c.遍历**\n```\nfor(index in fruits){\n\tconsole.log(fruits[index])\n}  \n```\t\n#####2.增：添加元素\n**语法**：数组.push(元素) \n**作用**：在指定的数组的最后添加一个元素\n**输出**：原地操作\n```\nfruits.push('香蕉')\nconsole.log(fruits)\n```\t\n#####3.删：删除元素\n**语法**：数组.pop() \n**作用**：删除最后一个元素\n**输出**：原地操作\n```\nfruits.pop()\nconsole.log(fruits)    //[\"苹果\", \"梨\", \"葡萄\", \"西瓜\", \"桃子\", \"李子\"]\n```\t\n**语法**：数组.splice(下标,个数)\n**作用**：从指定下标开始删除指定个数的元素\n```\nfruits.splice(1, 2)    \nconsole.log(fruits)  \t// [\"苹果\", \"西瓜\", \"桃子\", \"李子\"]  \n```\t\n#####4.改： 修改元素\n**语法**：数组[下标] = 新值\n**作用**：修改指定下标对应的值\n```\nfruits[0] = '山竹'\nconsole.log(fruits)\n```\n#3.相关方法\n```\nfruits = ['苹果', '梨', '葡萄', '西瓜', '桃子', '李子']\n```\n#####1.数组.reverse() \n**作用**：将数组倒序\n```\nfruits.reverse()\nconsole.log(fruits)    //[\"李子\", \"桃子\", \"西瓜\", \"葡萄\", \"梨\", \"苹果\"]  \n```\t\n#####2.数组.sort()\n**作用**：数组元素从小到大排序\n```\nscorts = [23, 90, 89, 87, 76, 90, 65]   //[23, 65, 76, 87, 89, 90, 90]\nscorts.sort()\nconsole.log(scorts)   //[\"李子\", \"桃子\", \"梨\", \"苹果\", \"葡萄\", \"西瓜\"]\n```\t\n######数组.sort(函数)\n**作用**：按指定规则对数组中的元素进行排序\n**函数要求:** \na.两个参数(代表的是数组中的两个元素)\nb.一个返回值(两个元素或者两个元素的属性的差);\n```\nstudents = [\n\t\t{'name':'小明', 'score': 60, 'age': 29},\n\t\t{'name':'张三', 'score': 89, 'age': 30},\n\t\t{'name':'小花', 'score': 81, 'age': 19}\n\t]\n\t\n\t//按成绩从小到大排序\n//\tfunction ageCom(item1, item2){\n//\t\treturn item1['score']-item2['score']\n//\t}\n//\tstudents.sort(ageCom)\n//\tconsole.log(students)  \n\t\n\t//年龄从大到下排序\nstudents.sort(function(a,b){\n\treturn b['age'] - a['age']\n})\nconsole.log(students)  \n```\n#####3.数组.join(字符串)\n**作用**：将指定的字符串插入到数组的每个元素之间产生一个新的字符串\n```\nnums = [10, 34, 89, 1]\nnewData = nums.join('aaa')\nconsole.log(newData)    // 10aaa34aaa89aaa1\n```\n#四、对象\n#####1.对象字面量\n**定义**：用大括号括起来，里面是多个属性，属性名和属性值之间用冒号连接, 多个属性之间用逗号隔开\n**注意**: \n1)对象字面量需要保存（用变量保存）  \n2)属性名可以加引号也可以不加(没有区别)\n```\nobj1 = {\n\t'name':'余婷',\n\t'age': 18,\n\tsex: '女'\n}\np1 = {\n\t'name':'小明',\n\t'age': 20,\n\tsex: '男'\n}\nconsole.log(obj1)   \n```\t\n#####2.获取对象属性对应的值\n######a.对象[属性名]\n```\nconsole.log(obj1['name'], obj1['sex'])\nproName = 'age'\nconsole.log(obj1[proName])\n```\t\n######b.对象.属性\n```\nconsole.log(obj1.name, obj1.sex)  \n```\t\n#####3.增/改: 添加/修改属性\n######a.对象.属性 = 值\n######b.对象[属性名] = 值\n  ```\n//属性存在是修改\nobj1.name = '小明'\nobj1['name'] = '小花'\nconsole.log(obj1)\n\t\n//属性不存在是添加\nobj1.height = 180\nobj1['weight'] = 70\nconsole.log(obj1)  \n```\n#####4.构造方法 - 创建对象的方法\n**语法**:\nfunction 类名(参数列表){\n \t\t对象属性\n \t\t对象方法\n }\n**说明:**\n**a**.对象属性: this.属性名 = 值\n**b**.对象方法: this.方法名 = 匿名函数\n**c**.类名： 首字母大写\n```\nfunction Person(name='张三', age=18, sex='男'){\n\t//这儿的this相当于python中的self\n\t//对象属性\n\tthis.name = name\n\tthis.age = age\n\tthis.sex = sex\n\t//对象方法\n\tthis.eat = function(food){\n\t\tconsole.log(this.name+'吃'+food)\n\t}\n\tconsole.log('=====:',this)\n}\n```\n//5.创建对象\n**语法**：对象 = new 构造方法()\n```\n\t//创建对象\n\tp1 = new Person()\n\tconsole.log(p1)\n\t//获取对象属性\n\tconsole.log(p1.name, p1.age, p1.sex)\n\t//调用对象方法\n\tp1.eat('包子')\n\t\n\tp2 = new Person('小明', 20, '女')\n\tconsole.log(p2)\n\tp2.eat('面条')\n```\n######注意： js中声明全局变量实质都是添加给window对象的属性\n```\n\tp3 = Person()\n\tp3 = window.Person()\n\tconsole.log(p3)\n\t\n//\twindow.alert('弹框')\n\talert('弹框')\n\ta = 10\n\tconsole.log(window.a)\n```\t\n#####6.添加类的全局的属性\n**语法**：类名.prototype.属性名 = 属性值\n**作用**：给指定的类的所有对象添加属性\n```\nPerson.prototype.height = 180\nPerson.prototype.run = function(){\n\tconsole.log(this.name+'在跑步!')\n}\np4 = new Person('老骆', 30, '男')\n\t\nconsole.log(p4.height, p1.height)\np4.run()\np1.run()\np2.run()\n```\t\n\n练习：给String添加方法， 统计字符串中字母字符的个数\n```\nstr1 = new String('abc')\nconsole.log(str1)\nString.prototype.letterCount = function(){\n\tnum = 0\n\ti = 0\n\twhile(i<this.length){\n\t\tch = this[i]\n\t\tconsole.log('++:',ch)\n\t\tif((ch>='a' && ch<='z')||(ch>='A' && ch<='Z')){\n\t\t\tconsole.log('====',ch,'=====')\n\t\t\tnum++\n\t\t}\n\t\ti++\n\t}\n\treturn num\n}\n\tconsole.log('A23adb33'.letterCount())\n```\n\t\n#####7.系统的对象和类\na.document对象  \nb.window对象\nc.Element类型的对象\nd.Date类型的对象\n.....\n```\n//创建当前时间对象\ndate1 = new Date()\nconsole.log(date1)\n//年\nyear = date1.getFullYear()\n//月 - 从0开始的\nmonth = date1.getMonth()\n//日\nday = date1.getDate()\n//时\nhours = date1.getHours()\n//分\nmin = date1.getMinutes()\n//秒\nseconds = date1.getSeconds()\n//星期\nweek = date1.getDay()\nconsole.log(''.concat(year,'年',month+1,'月',day,'日',' ',hours,':',min,':',seconds))\nconsole.log('星期', week)\n```\n#五、DOM\n```\n<body>\n\t<p id=\"p1\">我是段落</p>\n\t\t\n\t<a href=\"\" class=\"c1\">我是a标签</a>\n\t<h1 class=\"c1\">我是标题1</h1>\n\t\t\n\t<input type=\"\" name=\"userName\" id=\"userName\" value=\"\" />\n\t\t\n\t<div id=\"div1\">\n\t\t<p>我是段落2</p>\n\t\t<a href=\"\">新浪</a>\n\t\t<h2>我是标题2</h2>\n\t</div>\n\t\t\n\t<script type=\"text/javascript\">\n\t\t//按钮点击后会做的事情\n\t\tfunction action(){\n\t\t\tconsole.log('点击!')\n\t\t}\n\t</script>\n\t<button onclick=\"action()\"></button>\n\t\t\n</body>\n```\n#####1.DOM(文档对象模型: document object mode)\n######a.document对象: 指的是指向整个网页内容的一个对象\n######b.节点: Element类型对象,指向的是网页中的标签\n\n#####2.获取节点\n######a.通过id获取节点: getElementById(id值)\n**返回值**：节点对象(实质就是指向指定标签的对象)\n```\np1Node = document.getElementById('p1')\nconsole.log(p1Node)\n//innerText是标签文本内容\np1Node.innerText = 'hello js'  \n```\t\n######b.通过class获取节点: getElementsByClassName(class值)\n**返回值**：节点数组\n```\nc1Nodes = document.getElementsByClassName('c1')\nc1Nodes[0].innerText = '百度一下'\nconsole.log(c1Nodes)\n//注意: 遍历的时候不要用for in\nfor(i=0;i<c1Nodes.length;i++){\n\tc1Node = c1Nodes[i]\n\t//修改样式中的文字颜色\n\tc1Node.style.color = 'red'\n}  \n```\t\n######c.通过标签名获取节点: getElementsByTagName(标签名)\n```\nh1Nodes = document.getElementsByTagName('h1')\nconsole.log(h1Nodes)   \n```\t\n######d.通过name属性值获取节点:getElementsByName(name值) （了解）\n```\nnameNodes = document.getElementsByName('userName')\nconsole.log(nameNodes)\n```\t\n######e.获取子节点\n**1.**\n**语法**：节点对象.children\n**作用**：获取指定节点中所有的子节点\n```\ndiv1Node = document.getElementById('div1')\ndiv1Children = div1Node.children\nconsole.log(div1Children)  \n```\t\n**2.**\n**语法**：节点对象.firstElementChild\n**作用**：获取第一个子节点\n```\nfirstNode = div1Node.firstElementChild\nconsole.log(firstNode)\n```\t\n**3.**\n**语法**：节点对象.lastElementChild\n**作用**：获取最后一个子节点\n```\nlastNode = div1Node.lastElementChild\nconsole.log(lastNode)\n```\t\n**4.**\n**语法**：节点对象.parentElement\n**作用**：获取父节点\n```\nbodyNode = div1Node.parentElement\nconsole.log(bodyNode)  \n```\t\n#####3.创建和添加节点\n######第一步：创建节点\n**语法**：document.createElement(标签名)\n**示例：**创建一个img标签\n  ```\nimgNode = document.createElement('img')\nimgNode.src = 'img/luffy.jpg'\n```\t\n######第二步：添加节点\n**a.节点1.appendChild(节点2)**\n**作用**：在节点1的最后添加子标签节点2\n ```\nbodyNode.appendChild(imgNode)  \n```\n**b.节点1.insertBefore(新的节点, 节点2)**\n**作用**：在节点1中的节点2的前面添加一个新的节点\n```\nbodyNode.insertBefore(imgNode, bodyNode.firstElementChild)\nbodyNode.insertBefore(imgNode, c1Nodes[0])\n```\n######注意：一个节点不管添加几次，只有最后一次添加有效(因为节点只有一个)\n\t\n######3.拷贝/复制节点\n**语法**：节点.cloneNode()\n**作用**：创建一个与旧节点一样的新节点\n```\nnewImgNode = imgNode.cloneNode()\nnewImgNode.src = 'img/aaa.ico'\ndiv1Node.appendChild(newImgNode)  \n```\n######4.删除节点\n**语法**：节点.remove()\n**作用**：删除指定的节点\n```\np1Node = document.getElementById('p1')\np1Node.remove()   \n```\t\n######5.替换节点\n**语法**：节点1.replaceChild(新节点, 旧节点)\n**作用**：用新节点替换节点1中的旧节点\n```\nbodyNode.replaceChild(imgNode.cloneNode(), c1Nodes[1])\n```\t\n\n\t\n\n\t","tags":["语言学习"],"categories":["web前端"]},{"title":"JS基础(一)","url":"/2019/03/02/JS基础(一)/","content":"本文介绍了web前端中的行为标准js(javascript)基础相关的知识\n<!-- more -->\n#一、基础语法\n**1.注释**\n\t// 单行注释，注释前加两个斜杠\n\t/* 多行注释\n\t 第二行\n\t 第三行\n\t */\n\t\n**2.标识符**\n由数字、字母、下划线和\\$组成，数字不能开头，命名一般不用\\$符号，\\$符号有特殊功能\t\n**3.关键字*\nfor,in,while,if,else,true,false，var,function等，有特殊功能的标识符都是关键字\n**4.数据类型和字面量**\n**a.类型和字面量**\nNumber（数字）、String（字符串）、Boolean（布尔）、Array（数组）、Object（对象）、function等\n**Number**  - 表示所有的数字， 23,12,45，支持科学计数法，NaN(不存在的数字),Infinity(无穷大)\n**String** - 表示所有字符串，用单引号或者双引号， 'abc'、'adds'\n**Boolean** - true和false两个值\n**Array** - 相当于pyhton中的列表；[23,'gfgf']\n**Object** - 相当于python中的字典+对象；(属性名：属性值， 属性名2：属性值2...)属性值可以是任何类型\n**注意**：属性名可以使用引号，也可以不使用引号\n**Function** - 相当于python中的函数\n**b.类型转换和查看类型**\n**查看类型**：typeof(数据)\n**类型转换**：类型名（）\n#二、变量\n**1.基本语法**\n**格式1**：变量名 = 值\n**格式2**：var 变量名 = 值\n```\n//单独声明一个变量\nname = '小明'\nvar name2 = '小红'\nconsole.log(name, name2)\n//同时声明多个变量赋一样的值\na = b = c = 10\nconsole.log(a,b,c)\n//同时声明多个变量赋不一样的值；\n//注意：使用var声明变量的时候，可以不用给变量赋初值，默认是undefined\na1=10, b1=20\nconsole.log(a1,b1)\nvar a1, b=10, c2\nconsole.log(a2, b2,c2)\n```\n#三、运算符\n#####js支持：数学运算符、比较运算符、逻辑运算符、位运算符\n**1.数学运算符**：+，-，*，/，%，++，--（和python比，少了//和**，多个++和--）\n```\n//+，-，*，/,%和python一样\n//++（子加1），--（子减一）\n//变量++，++变量 - 让变量自己的值加1\n//变量--，--变量 - 让变量自己的值减1\nnum = 10\nnum++      //相当于num += 1\nnum--      //相当于num -= 1\nconsole.log(num)\nnum1 = 10\n// 先赋值，再加1\nnum2 = num1++\n// 先加1再赋值\n//  num22 = ++num11\n//  console.log(num2, num22)\n```\t\n**2.比较运算符**：>,<,>=,==,!=,===.!==\n==判断值是否相等，！=判断值是否不相等\n===判断值和类型是否相等，！==判断值和类型是否不相等\n```\nconsole.log(5==5)  //true\nconsole.log(5=='5')  //true\t\nconsole.log(5===5)  //true\nconsole.log(5==='5') // false\n```\t\n**3.逻辑运算符**：&&（逻辑与）、||（逻辑或）、！（逻辑非）\n运算规则和python一样\n\t\n**4.赋值运算符**：=，+=，-=，*=，/=,%=\n运算规则和python一样\n\t\n**5.位运算符**：&，|，~，^\n运算规则和python一样\n\t\n**6.复合运算和python一样**\n\t\n**7.三目运算符**\n？： - 条件语句？值1：值2  （条件语句成立，结果是值1，否则是值2）\n```\nage = 10\nconsole.log(age>18?'成年':'未成年')\n```\t\n#四、分支\n#####js中的分支结构：if语句、switch语句\n**1.if语句**\n**if结构**:\n\t if (条件语句){\n\t \t条件语句成立执行的代码段\n\t }\n**if-else结构**:\nif（条件语句）{\n\t 条件语句成立执行的代码段 \t\n}else{\n\t 条件语句不成立执行的代码段 \t\n}\n**if-else if -else**:\nif（条件语句1）{\n\t 条件语句1成立执行的代码段\t\n}else if（条件语句2）{\n\t条件语句2成立执行的代码段 \t\n }else{\n\t前面的条件语句都不成立执行的代码段\n}\n```\n\tnum = 11\n\tif (num%2 == 0){\n\t\tconsole.log('偶数')\n\t\t\n\t}else{\n\t\tconsole.log('奇数')\n\t}\n```\n**2.switch语句**\n```\n switch(表达式){\n\t \tcase 值1：{\n\t \t\t代码段1\n\t \t}\n\t \tcase 值2：{\n\t \t\t代码段2\n\t \t}\n\t \tcase 值3：{\n\t \t\t代码段3\n\t \t}\n\t \tdefault:{\n\t \t\t代码段4\n\t \t}\n\t }\n```\n#####注意：case后面的{}可以省略，代码段也可以没有\n\n**执行过程**：先计算表达式的结果，然后从上往下一一和每个case后边的值进行比较，判断是否相等；找到第一个和表达式的结果相等的case，然后将这个case作为入口，然后执行后面的所有代码段，直到执行到最后一个代码段或者遇到break才结束,如果表达式的结果和每个case的值都不相等，将default作为入口\n**注意**：default一般放在最后 \n#五、循环\n**1.for循环**\n**python中for-in结构**\n语法：\n```\n\t for(变量 in 序列){\n\t \t循环体\n\t }\n```\n####注意：不管序列是什么类型，这个变量取得都是下标/属性名（key)\n```\n\tstr1 = 'abc'\n\tfor(index in 'abc'){\n\t\tconsole.log(index, str1[index])\n\t}\n\t\n\tarray1 = [100, false, 'abc', [1,2,3]]\n```\n**c中for循环结构\n语法：\n```\n\t for(表达式1；表达式2；表达式3){\n\t \t循环体\n\t }\n```\n**执行过程**：先执行表达式1，再判断表达式2是否为true,如果为true,执行循环体，执行完循环体后，执行表达式3，再判断表达式2是否为true,直到判断表达式2不满足条件为止\n\t\n**2.while循环**\n**python中的while循环**\n语法：\n```\n\t while(条件语句){\n\t \t循环体\n\t }\n``` \n**C中的do-while**\n语法：\n```\n\t do{\n\t \t循环体\n\t }while(条件语句)\n```\n**执行过程**：会先执行一次循环体，然后再去判断条件语句是否为true(无论条件语句是否满足，至少都会执行一次循环体)\n#六、函数\n**语法**：\n```\nfunction 函数名（形参列表）{\n\t函数体\n}\n```\n**说明**：\n**1.** 不支持关键字参数\n**2.** 不支持不定长参数\n**3.** 不支持多个返回值\n```\nfunction sum(x,y){\n\tconsole.log('函数体',x,y)\n\treturn x+y\n}\n\t\nsum(10,20)\n```\t\n**函数变量**：声明函数即声明类型是Function的变量\n**匿名函数**：不需要变量名的函数\n**注意**：如果 函数体中没有return，函数的返回值是undefined\n**语法**：\nfunction(参数列表){\n\t函数体\n}\n\t","tags":["语言学习"],"categories":["web前端"]},{"title":"京东登录(静态页面)","url":"/2019/03/02/京东登录页面/","content":"本文介绍了如何使用html和css写一个网页静态页面\n<!-- more -->\n京东购物车代码\n```\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title>京东-欢迎登录</title>\n\t\t<!--设置图标-->\n\t\t<link rel=\"icon\" type=\"image/ico\" href=\"img/jd_logo.ico\"/>\n\t\t<!--通用样式-->\n\t\t<style type=\"text/css\">\n\t\t\t*{\n\t\t\t\tmargin: 0;\n\t\t\t\tpadding: 0;\n\t\t\t}\n\t\t</style>\n\t\t\n\t</head>\n\t<body>\n\t\t\n\t\t<!--1.====================网页顶部样式=======================-->\n\t\t<style type=\"text/css\">\n\t\t\t.top{\n\t\t\t\t/*background-color: hotpink;*/\n\t\t\t\theight: 120px;\t\n\t\t\t}\n\t\t\t/*========logo==========*/\n\t\t\t.top .logo{\n\t\t\t\t/*background-color: wheat;*/\n\t\t\t\theight: 80px;\n\t\t\t\t\n\t\t\t\tposition: relative;\n\t\t\t}\n\t\t\t.top .logo div{\n\t\t\t\t/*定位*/\n\t\t\t\tposition: absolute;\n\t\t\t\tleft: 185px;\n\t\t\t\t/*在父标签上垂直方向居中*/\n\t\t\t\ttop:50%;\n\t\t\t\tmargin-top: -30px;\n\t\t\t}\n\t\t\t.top .logo .a2{\t\n\t\t\t\t/*定位*/\n\t\t\t\tposition: absolute;\n\t\t\t\tright: 185px;\n\t\t\t\tbottom: 10px;\n\t\t\t\t\n\t\t\t\t/*字体*/\n\t\t\t\tfont-size: 12px;\n\t\t\t\tcolor: rgb(142,142,142);\n\t\t\t\ttext-decoration: none;\n\t\t\t\t\n\t\t\t\t/*背景*/\n\t\t\t\tbackground: url(img/q-icon.png) no-repeat 0 center #ffffff;\n\t\t\t\tpadding-left: 20px;\n\t\t\t}\n\t\t\t/*鼠标悬停*/\n\t\t\t.top .logo .a2:hover{\n\t\t\t\tcolor: rgb(216,36,50);\n\t\t\t\ttext-decoration: underline;\n\t\t\t}\n\t\t\t\n\t\t\t/*========message=========*/\n\t\t\t.top .message{\n\t\t\t\tbackground-color: rgb(255,246,236);\n\t\t\t\theight: 40px;\n\t\t\t\t\n\t\t\t\t/*子标签水平方向居中*/\n\t\t\t\ttext-align: center;\n\t\t\t\t/*子标签垂直方向居中*/\n\t\t\t\tline-height: 40px;\n\t\t\t}\n\t\t\t.top .message p{\n\t\t\t\t/*字体*/\n\t\t\t\tfont-size: 12px;\n\t\t\t\tcolor: rgb(142,142,142);\n\t\t\t\t\t\t\n\t\t\t\t/*背景*/\n\t\t\t\tbackground: url(img/xx.png) no-repeat 212px center raba(0,0,0,0);\n\t\t\t\t\n\t\t\t}\n\t\t\t.top .message a{\n\t\t\t\t/*字体*/\n\t\t\t\tcolor: rgb(50,50,50);\n\t\t\t\ttext-decoration: none;\n\t\t\t}\n\t\t\t.top .message a:hover{\n\t\t\t\ttext-decoration: underline;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t</style>\n\t\t<!--1.====================网页顶部=======================-->\n\t\t<div class=\"top\">\n\t\t\t<!--顶部的顶部-->\n\t\t\t<div class=\"logo\">\n\t\t\t\t<div>\n\t\t\t\t\t<a class=\"a1\" href=\"\"><img src=\"img/logo.png\"/></a>\n\t\t\t\t\t<img src=\"img/l-icon.png\"/>\n\t\t\t\t</div>\n\t\t\t\t<a class=\"a2\" href=\"\">\n\t\t\t\t\t登录页面，调查问卷\n\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<!--顶部的底部-->\n\t\t\t<div class=\"message\">\n\t\t\t\t<p>\n\t\t\t\t\t依据《网络安全法》，为保障您的账户安全和正常使用，请尽快完成手机号验证！\n\t\t\t\t\t 新版<a href=\"\">《京东隐私政策》</a>已上线，将更有利于保护您的个人隐私。\n\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t</div>\n\t\t\n\t\t<!--2.======================网页内容样式=============================-->\n\t\t<style type=\"text/css\">\n\t\t\t.content{\n\t\t\t\tbackground-color: rgb(81,158,220);\n\t\t\t\theight: 475px;\n\t\t\t\tposition: relative;\n\t\t\t}\n\t\t\n\t\t\t.content .bg_img{\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 50%;\n\t\t\t\tmargin-top: -237px;\n\t\t\t\t\n\t\t\t\tleft: 100px;\n\t\t\t}\n\t\t\t/*登录框*/\n\t\t\t.content .login_div{\n\t\t\t\tbackground-color: white;\n\t\t\t\twidth: 350px;\n\t\t\t\theight: 400px;\n\t\t\t\t\n\t\t\t\t/*定位*/\n\t\t\t\tposition: absolute;\n\t\t\t\ttop: 10px;\n\t\t\t\tright:185px;\n\t\t\t}\n\t\t\t/*顶部*/\n\t\t\t.content .login_div .div1{\n\t\t\t\tbackground-color: rgb(255,246,236)\n\t\t\t\theight: 40px;\n\t\t\t\t/*居中*/\n\t\t\t\ttext-align: center;\n\t\t\t\tline-height: 40px;\n\t\t\t}\n\t\t\t.content .login_div .div1 font{\n\t\t\t\tfont-size: 12px;\n\t\t\t\tcolor: rgb(142,142,142);\n\t\t\t\t/*背景*/\n\t\t\t\tbackground: url(img/xx.png) no-repeat 0 center rgba(0,0,0,0);\n\t\t\t\tpadding: 20px;\n\t\t\t}\n\t\t\t/*中间*/\n\t\t\t.content .login_div .div2{\n\t\t\t\t/*background-color: lightblue;*/\n\t\t\t\theight: 310px;\n\t\t\t}\n\t\t\t.content .login_div .div2 .btn{\n\t\t\t\theight: 55px;\n\t\t\t\tbackground-color: white;\n\t\t\t\tcolor: #dddddd;\n\t\t\t\tfont-weight: 100;\n\t\t\t}\n\t\t\t.content .login_div .div2 .btn button{\n\t\t\t\twidth: 170px;\n\t\t\t\theight: 100%;\n\t\t\t\tbackground-color: rgba(0,0,0,0);\n\t\t\t\tborder: none;\n\t\t\t\tfont-size: 20px;\n\t\t\t\tcolor: rgb(83,83,83);\n\t\t\t}\n\t\t\t/*鼠标悬停状态*/\n\t\t\t.content .login_div .div2 .btn button:hover{\n\t\t\t\tcolor: rgb(217,48,60);\n\t\t\t}\n\t\t\t/*成为焦点的状态*/\n\t\t\t.content .login_div .div2 .btn button:focus{\n\t\t\t\toutline: none;\n\t\t\t\t\n\t\t\t}\n\t\t\t/*输入*/\n\t\t\t.content .login_div .div2 .input{\n\t\t\t\theight: 255px;\n\t\t\t\t\n\t\t\t\tborder-top: 1px solid #DDDDDD;\n\t\t\t\tborder-bottom: 1px solid #DDDDDD;\n\t\t\t\t\n\t\t\t\tposition: relative;\n\t\t\t}\n\t\t\t/*输入框*/\n\t\t\t.content .login_div .div2 .input div{\n\t\t\t\twidth: 310px;\n\t\t\t\theight: 40px;\n\t\t\t\tborder: 1px solid #999999;\n\t\t\t\tmargin: 20px;\n\t\t\t\n\t\t\t}\n\t\t\t.content .login_div .div2 .input .un_div{\n\t\t\t\tmargin-top: 40px;\n\t\t\t\t\n\t\t\t}\n\t\t\t/*输入框*/\n\t\t\t.content .login_div .div2 .input div input{\n\t\t\t\theight: 100%;\n\t\t\t\twidth: 250px;\n\t\t\t\tvertical-align: top;\n\t\t\t\tborder: none;\n\t\t\t\t\n\t\t\t\tfont-size: 15px;\n\t\t\t\t\n\t\t\t}\n\t\t\t.content .login_div .div2 .input div input:focus{\n\t\t\t\toutline: none;\n\t\t\t}\n\t\t\t\n\t\t\t/*图标*/\n\t\t\t.content .login_div .div2 .input div img{\n\t\t\t\theight: 100%;\n\t\t\t\twidth: 40px;\n\t\t\t\t\n\t\t\t\tborder-right: 1px solid #999999;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t/*忘记密码*/\n\t\t\t.content .login_div .div2 .input a{\n\t\t\t\tposition: absolute;\n\t\t\t\tright: 20px;\n\t\t\t\t\n\t\t\t\tfont-size: 13px;\n\t\t\t\tcolor: rgb(53,53,53);\n\t\t\t\ttext-decoration: none;\n\t\t\t}\n\t\t\t.content .login_div .div2 .input a:hover{\n\t\t\t\tcolor: rgb(217,48,60);\n\t\t\t\ttext-decoration: underline;\n\t\t\t\t\n\t\t\t}\n\t\t\t/*登录按钮*/\n\t\t\t.content .login_div .div2 .input .lg_btn{\n\t\t\t\twidth: 310px;\n\t\t\t\theight: 35px;\n\t\t\t\t/*定位*/\n\t\t\t\tposition: absolute;\n\t\t\t\tbottom: 30px;\n\t\t\t\tleft: 20px;\n\t\t\t\t\n\t\t\t\tfont-size: 20px;\n\t\t\t\t/*设置背景颜色*/\n\t\t\t\tbackground-color: red;\n\t\t\t\t/*设置内容颜色*/\n\t\t\t\tcolor: white;\n\t\t\t}\n\t\t\t/*取消焦点状态*/\n\t\t\t.content .login_div .div2 .input .lg_btn:focus{\n\t\t\t\toutline: none;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t/*底部*/\n\t\t\t.content .login_div .div3{\n\t\t\t\theight: 50px;\n\t\t\t\t\n\t\t\t}\n\t\t\t.content .login_div .div3 ul{\n\t\t\t\tlist-style-type: none;\t\n\t\t\t\t\n\t\t\t}\n\t\t\t/*左边*/\n\t\t\t.content .login_div .div3 .bt_1 li{\n\t\t\t\tfloat: left;\n\t\t\t\tline-height: 50px;\n\t\t\t\tpadding-left: 20px;\n\t\t\t\tfont-size: 14px;\n\t\t\t}\n\t\t\t/*QQ*/\n\t\t\t.content .login_div .div3 .bt_1 .bt_qq{\n\t\t\t\t/*背景*/\n\t\t\t\tbackground: url(img/qq.png) no-repeat 0 center rgba(0,0,0,0);\n\t\t\t\tpadding-left: 25px;\n\t\t\t\t/*去掉下划线*/\n\t\t\t\ttext-decoration: none;\n\t\t\t\tcolor: black;\n\t\t\t\tpadding-right: 20px;\n\t\t\t\tborder-right: 1px solid gray;\n\t\t\t}\n\t\t\t.content .login_div .div3 .bt_1 .bt_qq:hover{\n\t\t\t\tcolor: red;\n\t\t\t\ttext-decoration: underline;\n\t\t\t}\n\t\t\t/*微信*/\n\t \t\t.content .login_div .div3 .bt_1 .bt_wx{\n\t\t\t\t/*背景*/\n\t\t\t\tbackground: url(img/weixin.png) no-repeat 0 center rgba(0,0,0,0);\n\t\t\t\tpadding-left: 25px;\n\t\t\t\t/*去掉下划线*/\n\t\t\t\ttext-decoration: none;\n\t\t\t\tcolor: black;\n\t\t\t}\n\t\t\t.content .login_div .div3 .bt_1 .bt_wx:hover{\n\t\t\t\tcolor: red;\n\t\t\t\ttext-decoration: underline;\n\t\t\t}\n\t\t\t/*右边*/\n\t\t\t.content .login_div .div3 .bt_2 a{\n\t\t\t\tfloat: right;\n\t\t\t\t/*垂直居中*/\n\t\t\t\tline-height: 50px;\n\t\t\t\tmargin-right: 20px;\n\t\t\t\t\n\t\t\t\t/*背景*/\n\t\t\t\tbackground: url(img/right.png) no-repeat 0 center rgba(0,0,0,0);\n\t\t\t\tpadding-left: 25px;\n\t\t\t\tcolor: red;\n\t\t\t\t\n\t\t\t\t/*去掉下划线*/\n\t\t\t\ttext-decoration: none;\n\t\t\t\tfont-size: 18px;\n\t\t\t}\n\t\t\t.content .login_div .div3 .bt_2 a:hover{\n\t\t\t\tcolor: gray;\n\t\t\t\ttext-decoration: underline;\n\t\t\t}\n\t\t\t\n\t\t</style>\n\t\t<!--2.======================网页内容=====================-->\n\t\t<div class=\"content\">\n\t\t\t<img class=\"bg_img\" src=\"img/bg2.png\"/>\n\t\t\t<!--登录框-->\n\t\t\t<div class=\"login_div\" id=\"\">\n\t\t\t\t<!--顶部-->\n\t\t\t\t<div class=\"div1\">\n\t\t\t\t\t<font>\n\t\t\t\t\t\t京东不会以任何理由要求您转账汇款，谨防诈骗。\n\t\t\t\t\t</font>\n\t\t\t\t</div>\n\t\t\t\t<!--中间-->\n\t\t\t\t<div class=\"div2\">\n\t\t\t\t\t<div class=\"btn\">\n\t\t\t\t\t\t<button class=\"btn1\">\n\t\t\t\t\t\t\t扫码登录\n\t\t\t\t\t\t</button>|\n\t\t\t\t\t\t<button class=\"btn2\">\n\t\t\t\t\t\t\t账号登录\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<!--输入框-->\n\t\t\t\t\t<div class=\"input\">\n\t\t\t\t\t\t<form action=\"#\">\n\t\t\t\t\t\t\t<div class=\"un_div\">\n\t\t\t\t\t\t\t\t<label for=\"username\"><img src=\"img/pygame.png\"/></label>\n\t\t\t\t\t\t\t\t<input placeholder=\"邮箱/用户名/已验证手机\" type=\"text\" name=\"username\" id=\"username\" value=\"\" />\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"pw_div\">\n\t\t\t\t\t\t\t\t<label for=\"password\"><img src=\"img/password_icon.png\"/></label>\n\t\t\t\t\t\t\t\t<input placeholder=\"密码\" type=\"password\" name=\"password\" id=\"password\" value=\"\" />\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<a href=\"\">忘记密码</a>\n\t\t\t\t\t\t\t<input class=\"lg_btn\" type=\"submit\" value=\"登&emsp;录\"/>\n\t\t\t\t\t\t</form>\n\t\t\t\t\t</div>\n\t\t\t\t\t\n\t\t\t\t</div>\n\t\t\t\t<!--底部-->\n\t\t\t\t<div class=\"div3\">\n\t\t\t\t\t<ul class=\"bt_1\">\n\t\t\t\t\t\t<li><a class=\"bt_qq\" href=\"\">QQ</a></li>\n\t\t\t\t\t\t<li><a class=\"bt_wx\" href=\"\">微信</a></li>\n\t\t\t\t\t</ul>\n\t\t\t\t\t<ul class=\"bt_2\">\n\t\t\t\t\t\t<li><a href=\"\">立即注册</a></li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t\n\t\t<!--3.=====================网页底部样式=====================-->\n\t\t<style type=\"text/css\">\n\t\t\t.bottom{\n\t\t\t\tbackground-color: darkgray;\n\t\t\t\theight: 110px;\n\t\t\t}\n\t\t\t.bottom .bo_div1{\n\t\t\t\tbackground-color: white;\n\t\t\t\theight: 70px;\n\t\t\t\t/*水平方向居中*/\n\t\t\t\ttext-align: center;\n\t\t\t\t/*竖直方向居中*/\n\t\t\t\tline-height: 70px;\n\t\t\t\tfont-size: 12px;\n\t\t\t\tcolor: gray;\n\t\t\t}\n\t\t\t/*所有链接*/\n\t\t\t.bottom .bo_div1 a{\n\t\t\t\ttext-decoration: none;\n\t\t\t\tcolor: black;\n\t\t\t\tfont-size: 15px;\n\t\t\t\tpadding-right: 10px;\n\t\t\t\tpadding-left: 10px;\n\t\t\t}\n\t\t\t.bottom .bo_div1 a:hover{\n\t\t\t\tcolor: red;\n\t\t\t\ttext-decoration: underline;\n\t\t\t}\n\t\t\t\n\t\t\t\n\t\t\t/*底部的底部文字*/\n\t\t\t.bottom .bo_div2{\n\t\t\t\tbackground-color: white;\n\t\t\t\theight: 40px;\n\t\t\t\t/*内容水平居中*/\n\t\t\t\ttext-align: center;\n\t\t\t\t/*内容垂直居中*/\n\t\t\t\tline-height: 40px;\n\t\t\t\tfont-size: 12px;\n\t\t\t}\n\t\t</style>\n\t\t<!--3.======================网页底部========================-->\n\t\t<div class=\"bottom\">\n\t\t\t<div class=\"bo_div1\">\n\t\t\t\t<a href=\"\">关于我们</a>|\n\t\t\t\t<a href=\"\">联系我们</a>|\n\t\t\t\t<a href=\"\">人才招聘</a>|\n\t\t\t\t<a href=\"\">商家入驻</a>|\n\t\t\t\t<a href=\"\">广告服务</a>|\n\t\t\t\t<a href=\"\">手机京东</a>|\n\t\t\t\t<a href=\"\">友情链接</a>|\n\t\t\t\t<a href=\"\">销售联盟</a>|\n\t\t\t\t<a href=\"\">京东社区</a>|\n\t\t\t\t<a href=\"\">京东公益</a>|\n\t\t\t\t<a href=\"\">English&nbsp;Site</a>\n\t\t\t</div>\n\t\t\t<div class=\"bo_div2\">\n\t\t\t\t<font>\n\t\t\t\t\tCopyright © 2004-2019  京东JD.com 版权所有\n\t\t\t\t</font>\n\t\t\t</div>\n\t\t</div>\n\t</body>\n</html>\n```\n\n\n\n","tags":["语言学习"],"categories":["web前端"]},{"title":"CSS布局","url":"/2019/03/02/CSS布局/","content":"本文介绍了web前端中的表现标准CSS(层叠样式表)在网页中该如何布局相关的知识\n<!-- more -->\n#一、标准流\n**1.什么是标准流**\n标签在没有添加布局相关的样式时，在浏览器中默认的布局方式\n**块级标签**：\n一个占一行（不管宽度大小）\n默认宽度是父标签的宽度，默认高度是内容的高度；设置宽高有效(div)\n**行内标签**：\n一行可以显示多个\n默认大小是内容的大小；设置**宽高无效**(span,a)\n**行内块标签**:\n一行可以显示多个\n默认大小是内容的大小；设置**宽高有效**(img,input)\n\t\n2.实际布局的选择\na.左右结构使用**行内块**\n**didplay属性**\n**定义**：可以让任何标签变成块级、行内、行内块；隐藏标签\n\nblock(块)\ninline(行内)\ninline-block(行内块) - 默认左右间隙(因为换行产生)，这个间隙可以通过将父标签的字体大小设置为0来去掉\nnone(隐藏)\n\t\nb.脱流/脱标（脱离标准流）\n**方式一**：float(浮动)\n**方式二**：定位（left,right,top,bottom  position)\n#二、浮动\n**特点**：浮动会让标签脱流\t\n**脱流**：\n**定义**：让标签脱离标准流布局\n**特点**：\n一行以显示多个\n默认大小是内容大小，并且设置宽高有效’的方式布局\n\t\nfloat属性\nleft \nright\n###文字环绕\n**应用场景**：在某一块内环绕文字\n**做法**：被环绕的标签浮动，环绕的标签不浮动\n#三、清除浮动\n**1.什么是高度塌陷**\n当父标签不浮动，子标签浮动时，父标签就会产生高度塌陷的问题\n**2.什么是清除浮动**\n清除浮动指的是因为浮动而产生的高度塌陷\n**a.方法一：添加空盒子**\n在高度会塌陷的父标签的最后添加一个空的子标签div；然后给空的div添加样式，设置clear属性的值为both\n**缺点**：当高度塌陷的位置很多时，重复写的代码量过大\n**(记)b.方法二：overflow**\n给高度会塌陷的父标签，添加样式设置overflow属性值为hidden\n**c.方法三：万能清除法**\n选择高度会塌陷的父标签，给after状态添加样式，再给这个父标签添加样式：zoom:1\n```\n.clear:after{\t\t\t\t\n    display: block;\n    clear: both;\n    content: '';\n    visibility: hidden;\n    height: 0;\n}\nclear{\n    zoom: 1;\n}\n```\n#四、定位\n**1.定位**\n**特点**：定位会让标签脱流\n\t\n**2.定位属性**：\n**top**:顶部的距离\n**bottom**:底部的距离\n**left**:左边的距离\n**right**:右边的距离\n以上四个属性想要有效，必须通过position属性来说明参考对象\n**position属性**:\n**initial和static - 默认值**，**不能定位**（定位无效）\n**absolute - 绝对定位**:以第一个position的值不是默认值的父标签进行定位\n**注意**：body标签的position不是initial和static\n**relative - 相对定位**:相对于标准流定位（相对于自己在标准流中的位置进行定位）\n 一般使用relative是在标签本身不需要定位，但是希望自己的子标签相对于自己定位的时候使用\n\t\n**fixed - 相对于浏览器定位**\n**sticky** - 当浏览器内容没有超过一屏时，显示在内容最下面，当浏览器内容超过一屏时top和bottom有效，并且显示在浏览器底部（left和right无效）\n\n#五、盒子模型\n**1.**网页上所有的可视标签都是一个盒子模型：\n一个标签是由4个部分组成，分别是：\n- content\n- padding\n- border\n- margin\n**可见**：content、padding、border\n**不可见**：margin(占位)\n\t\n**2.**盒子模型的每个部分\n**content**：标签内容\n**特点**：\n**1.**标签宽高作用于content\n**2.**标签中的文字和子标签都是添加在content上\n**padding**：在内容的外部，默认是0，可见\n**特点**：\n**1.**：背景颜色也作用于padding\n**2.**：四个方向(top,bottom,left,right),可单独设置\n**border**：边框；默认是0，可见\n**特点**：\n**1.**四个方向，颜色和大小都可以单独设置\n**border-radius**：设置边框四个角的圆角弧度\n**注意**：没有border边框也可以设置，这时作用在padding上\n**margin**：外边距\n**特点**：\n四个方向（top,bottom,left,right）可单独设置\n#六、常用属性\n**font-family**:设置字体\n**font-weight**:设置文字加粗（取值100-900），100-700不断加粗\n**font-style**:设置字体倾斜(italic/oblique/normal)\nitalic/oblique - 倾斜\nnormal - 不倾斜\n**text-align**:设置内容水平方向对齐方式\nleft - 左对齐\nright - 右对齐\ncenter - 居中\n**line-height**:设置文字行高\n**特点**：可以通过设置行高和标签的高度一样来让标签中的内容在垂直方向上居中显示\n**text-decoration**:文字修饰\nunderline - 下划线\noverline - 上划线\nline-through - 删除线\nnone - 去掉文字修饰，即去除下划线\n**text-indent**:首行缩进\n**说明**：p标签的文字有效；一般用em(空格)为单位\n**letter-spacing**:设置每个文字之间的间隙（单位：px）\n**background**:设置背景\n图片地址 是否平铺 x y 背景颜色\n \n","tags":["语言学习"],"categories":["web前端"]},{"title":"CSS基础","url":"/2019/03/02/CSS基础/","content":"本文介绍了web前端中的表现标准CSS(层叠样式表)基础属性和用法\n<!-- more -->\n#一、css基础\n#####1.什么是css(层叠样式表，简称样式表)\ncss是web中的表现标准，主要用来设置网页中的内容的布局和样式\n\t\n#####2.怎么写css（基本语法）\na.语法\n选择器{属性名1：属性值1；属性名2：属性值2；...}\nb.说明\n选择器 - 选中想要设置样式的标签\n{} - 固定写法\n属性 - 属性名和属性值用冒号连接，多个属性之间用分号隔开（如果没有分号，会导致后面的样式无效）\n属性名必须是css提供的属性（大概两百多个）\n属性值：表示大小的数值必须加单位，px - 像素  em - 空格数 \n也可以使用百分比（相对于父标签）\n\t\t    \n######c.常用属性\ncolor - 字体颜色\nbackground-color - 背景颜色\nfont-size - 字体大小\nwidth - 宽度\nheight - 高度\n\t\n#####3.css写在哪儿\na.内联样式表:将样式表写在标签的style属性中；这个样式表无需写‘选择器{}’，直接给属性赋值\n\t\nb.内部样式表:将样式表写在style标签中（这个标签可以放在head中，也可以放在body中）\n\t\nc.外部样式表：将样式表写在一个css文件中，然后在head中通过link导入\n\t\n内联样式表不管什么情况，优先级最高\n外部和内部样式表优先级一样，谁后写，认可谁\n\n#####4.css中的值\n颜色：颜色的英文单词，还可以是16进制的颜色值;rgb（红绿蓝的十进制数0-255）\nrgba(红，绿，蓝，透明度) - 透明度0-1 0为完全透明\n#二、选择器\n选择器（选中标签）\n#####1.元素选择器（标签选择器）\n直接将标签名作为选择器，选中所有指定标签\n例如：div{}, p{}\n\t\n#####2.id选择器\n将标签的id属性值前面加#号，作为选择器，选中id属性值是制动的值的标签\n注意：一个页面中id值唯一（不同标签的id值不一样）\n例如：#p2{}\n\t\n#####3.class选择器（类选择器）\n将标签的class属性值前加**.**作为选择器，选中所有class属性值是指定值的标签\n例如：.c1{}\n\t\n#####4.*(通配符)\n直接将**号作为选择器，选中当前页面中所有的标签\n例如：*{}\n\t\n#####5.群组选择器\n将多个选择器用逗号隔开，作为一个选择器，选中每个单独的选择器选中的所有标签\n例如：a,p{} - 选中所有的a标签和p标签\n \\#p1,div{} - 选中id是p1的标签和所有的div标签\n.c1,#p1,a{} - 选中所有class值是c1,id值是p1的标签和所有a标签\n\t\n#####6.层级选择器（后代选择器）\n将多个选择器用空格隔开作为一个选择器，将层级选中最后一个选择器选中的标签\n例如：div .c1 - 选中所有在div标签中，class是c1的标签\n\t\t .c1 .c2 #d1{} - 选中class是c1中class是c2中的id是d1的标签\n\t\n#####7.选择器的权重值\n**权重值不同**：权重值越大，优先级越高\n**权重值相同**：谁写在后面，认可谁\n**注意**：不管什么情况，**内联样式**优先级最高\n元素选择器：0001（1）\n通配符：0001（1）\nclass选择器：0010（2）\nid选择器：0100（4）\n\t\n群组选择器：分开看每一个选择器的权重\n后代选择器：用空格分开的所有的选择器权重之和\n#三、伪类选择器\n***普通选择器和伪类选择器的区别***\n**普通选择器**：选中某一个标签\n**伪类选择器**：选中标签某种状态\n**1.语法：**\n普通选择器：状态{}\n\t\n2.常见状态\n**a.link**：\n初始状态（对a标签来说，初始状态指的是标签对应的地址从来没有成功访问过）\n**b.visited**\n访问后的状态（一般针对于a标签有用）\n**c.hover**\n鼠标悬停在标签上的时候对应的状态\n**d.active**\n鼠标按住标签不放时对应的状态\t\n**注意**：\n1.状态前不是只能写元素选择器，更不是只能写a标签\n2.遵守'爱恨原则',**L**o**V**e**HA**te\n\t","tags":["语言学习"],"categories":["web前端"]},{"title":"HTML","url":"/2019/03/02/HTML/","content":"本文介绍了web前端中的内容标准html（超文本标记语言）相关标签\n<!-- more -->\n#1.web标准\n- web前端开发包含3个内容：html、css、js(javascript)\n\t表现标准：css(负责网页中的内容的布局和样式)\n\t内容标准:html(负责网页中的显示什么内容)\n\t行为标准:js(负责网页中内容的改变)\n\t\n- html(超文本标记语言，类似makedown)\n**超文本**：除了文字，还可以标记其它内容，比如：图片、音频、视频、flash、按钮、输入框、超链接等\n**定义**：一种超文本标记语言，通过不同的标记让内容以不一样的形式展示出来,如果语法错误，只会影响\n\t当前被标记的内容，不会影响其他内容\n\t\n- html基本结构\n\thtml是由不同的标签(标记)组成\n\t\n1）语法\n\t标签语法：\n\t双标签(常规标签)：<标签名 属性名=属性值 属性2=属性值2 ...>内容</标签名>\n\t单标签：<标签名 属性名=属性值 属性2=属性值2 ...>或者<标签名 属性名=属性值 属性2=属性值2 .../>\n\t\nb.说明：\n\t<> - 固定写法\n\t标签名 - 标签名和前面的</或者后面的/>之间不能有空隙\n\t\t\t标签名必须写html提供的标签（不是自己随便命名的）\n\t属性 - 属性名和属性值组成，属性名和属性值用等号连接。多个属性之间用空格隔开\n\t\t  属性名一般不是自己命名，不同的标签有不同的属性\n\t内容 - 只有双标签才有；可以是任何内容（文本或者是其他标签）\t  \n\t双标签是由开始标签和结束标签两个部分组成\n\t单标签没有结束标签，单标签有哪些，双标签有哪些是固定的\n\t\t  \n2）网页内容结构\n```\n\t<html>\n\t<head>\n\t\t<meta charset=\"utf-8\" />\n\t\t<title></title>\n\t</head>\n\t<body>\n\t\n\t</body>\n\t</html>\n```\t  \n4.html版本\n\t广义h5:指的是html5+css+js\n\t狭义h5:指的是html5\n\n```\n<!--\t\nDOCTYOE - 说明当前的html版本\nhtml - html5\n-->\n\n<!--当前版本是html5-->\n<!DOCTYPE html>\n<!--网页基本结构-->\n<html>\n\t<head>\n\t\t<!--\n\t\t\thead主要包含:\n\t\t\tmeta（原标签）\n\t\t\ttitle\n\t\t\tlink\n\t\t\tstyle\n\t\t\tscript\n\t\t\tbase\n\t\t-->\n\t\t<!--设置当前的页面的文本编码方式-->\n\t\t<meta charset=\"utf-8\" />\n\t\t<!--设置网页标题-->\n\t\t<title>认识html</title>\n\t</head>\n\t<body>\n\t\t我是一个网页内容\n\t</body>\n</html>\n```\n#一、文本标签\n##1.标题标签（h1-h6)\n**注意**：选标签不是样式，而是根据语义来选择\n如果网页中的文字是标题时，才选择相应的h标签\n```\t\n\t\t<h1>我是标题1</h1>\n\t\t<h2>我是标题2</h2>\n\t\t<h3>我是标题3</h3>\n\t\t<h4>我是标题4</h4>\n\t\t<h5>我是标题5</h5>\n\t\t<h6>我是标题6</h6>\n\t\t我是标题7\n```\t\n![image.png](https://upload-images.jianshu.io/upload_images/15041659-5c07f29e2ca8227e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##2.段落标签（p)\n单纯的在网页上显示一段文字，就可以使用一个p标签\n根据语义来\n**注意**：网页中的文字，手动换行和空格无效\n\t\t\t\n```\n<p>\n咋大幅度发你的女房东看房的烦恼都可能的看法你的看法你的看法呢\n</p>\n```\t\t\n##3.文字标签（font)\n多个普通文字内容在一行显示\n```\n<font>党的十八大以来，习近平总书记始终关心并指导京津冀协同发展。新年伊始，习近平考察的第一站就选择了京津冀。他强调，京津冀协同发展是一个系统工程，不可能一蹴而就，要做好长期作战的思想准备。他要求，京津冀协同发展要“形成合力”、保持“\n历史耐心和战略定力”、 “向改革创新要动力”。</font>\n<br />\n<font>党的十八大以来，习近平总书记始终关心并指导京津冀协同发展。新年伊始，习近平考察的第一站就选择了京津冀。他强调，京津冀协同发展是一个系统工程，不可能一蹴而就，要做好长期作战的思想准备。他要求，京津冀协同发展要“形成合力”、保持“\t\t\t历史耐心和战略定力”、 “向改革创新要动力”。</font>\n\t\t<hr />\n```\n##4.强制换行和空格\nbr单标签 - 专门用于网页中强制换行\n空格符号 - \n\t\t\\&nbsp;(一个&nbsp代表是空一个像素)\n\t\t\\&emsp;（一个&emsp代表空一个空格）\n\n\t\t\n##5.文本效果标签\n加粗：\n<b></b>\n<strong></strong>\n倾斜：\n<i></i>\n<em></em>\n\t\t\t\n**注意**：strong和em有强调的意味\n```\n<p><font>党的十八大以来，<b>习近平总书记</b>始终关心并指导京津冀</font></p>\n\n```\n##6.水平线（hr)\nhr标签 - 单标签，hr出现的位置显示一个水平线\n#二、列表标签\n##1.列表标签（ol, ul, dl)\n网页中多个内容具有相同意义，可以将它们放到一个列表中\n##2.有序列表（ol)\n**ol标签** - 代表整个列表；自动在元素的前面加序号\n**li标签**- 代表列表中的元素，元素内容除了文字还可以是图片，超链接等！！！\n```\t\n\t\t<ol>\n\t\t\t<li>一月</li>\n\t\t\t<li>\n\t\t\t\t<b>二月</b>\n\t\t\t</li>\n\t\t\t<li>三月</li>\t\t\n\t\t</ol>\n```\t\n![结果](https://upload-images.jianshu.io/upload_images/15041659-a2f388eb21ac73df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\n##3.无序列表（ul)\n**ul标签** - 代表整个列表，默认在元素前加黑点\n**li标签** - 代表列表中的元素，元素内容除了文字还可以是图片，超链接等！！！\n```\n\t\t<ul>\n\t\t\t<li>语文</li>\n\t\t\t<li>数学</li>\n\t\t\t<li>英语</li>\n\t\t</ul>\n```\n![image.png](https://upload-images.jianshu.io/upload_images/15041659-c2ee90c1d8e057f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n\t\n##4.自定义列表（dl)\ndl - 代表整个列表\ndt - 列表分类名\ndd - 分类下的内容\n\t\t\t\n```\n\t\t<dl>\n\t\t\t<dt>文科</dt>\n\t\t\t\t<dd>历史</dd>\n\t\t\t\t<dd>地理</dd>\n\t\t\t<dt>理科</dt>\n\t\t\t\t<dd>物理</dd>\n\t\t\t\t<dd>化学</dd>\n\t\t\t<dt>综合</dt>\n\t\t\t\t<dd>语文</dd>\n\t\t\t\t<dd>数学</dd>\n\t\t\t\t<dd>英语</dd>\n\t\t</dl>\n```\t\n![结果](https://upload-images.jianshu.io/upload_images/15041659-b4ff1bc4f37453a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#三、图片标签\n图片标签（img)\n单标签\n1.src属性 - 设置网页上显示图片的地址\n这里的地址可以是本地图片路径，也可以是网络url\t\t\t\t\t \n2.title属性 - 图片标题；鼠标停留在图片上才会显示\t \n3.alt属性 - 图片加载失败时的提示信息\n```\n<!--显示本地图片-->\n<img src=\"img/0001.jpg\" title=\"路飞\" alt=\"加载失败\"/>\n\t\t\n<!--显示网络图片-->\n<img src=\"https://www.baidu.com/img/bd_logo1.png?qua=high\" title=\"百度\"/>\n```\n![image.png](https://upload-images.jianshu.io/upload_images/15041659-60f0ceef32f7dd94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#四、超链接标签\n1.超链接（a)\na标签 - 点击可以进行跳转对应的标签\n内容 - 可以在网页上看的见的，并且可以点击的部分\n可以是文字，也可以是其他标签，img标签居多\nhref属性 - 规定点击超链接后跳转的位置\na.一个网页地址 - 在浏览器中打开指定\nb.一个本地的html地址（一般写相对路径） - 跳转（打开）本地的一个html文件对应的网页\nc.一个#号 - 刷新网页,会重新加载网页（如果有网络请求，会重新请求）\nd.选择器 - 让网页滚动到指定位置（不会重新加载数据）\n2.target属性 - 加载新页面的方式\n_self（默认） - 在当前页面中加载新的页面\n_blank - 在新的窗口中加载新的页面（原页面不会覆盖）\n```\n<!--文字超链接-->\n<a href=\"https://www.baidu.com\" id=\"img2\" target=\"_blank\">百度一下</a>\n<a href=\"03图片.html\">图片</a>\n<a href=\"#\">刷新</a>\n<a href=\"#img2\">回到顶部</a>\n\t\t\n<!--图片超链接-->\n<a href=\"https://www.baidu.com\">\n<img src=\"img/0001.jpg\"/>\n</a>\n```\n![结果](https://upload-images.jianshu.io/upload_images/15041659-09b814b9f4aecd2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#五、表格标签\n##1.表格标签：\n1.table标签 - 代表整个表格\n2.tr标签 - 代表表格中的一行\n3.td标签 - 代表表格中的一个单元格\n\t\t\t\n2.标签属性\na.border属性 - 设置边框宽度，table的属性\nb.bordercolor属性 - 设置边框颜色，table的属性\nc.cellspacing属性 - 单元格和单元格之间的间隙大小，table的属性\nd.cellpadding属性 - 单元格内容和边框之间的间距\ne.width - 设置宽度\n作为table属性 - 设置整个表格的宽度，每一列宽度按比例分配\n作为td的属性 - 设置td所在的列中对应的宽度，一列只设置一次\ng.height -设置高度\n作为table的属性 - 设置整个表格的高度，每一行宽度按比例分配\n作为tr的属性 -设置tr对应的行的高度\n\t\t\t\t\t\nh.bgcolor - 设置背景颜色\n作为table属性 - 设置整个表格的背景颜色\n作为tr的属性 - 设置一行的背景颜色\n作为td的属性 - 设置指定单元格的背景颜色\n\t\t\t\t\t\ni.align - 设置对齐方式（left/right/center)\n作为tabl\te属性 - 让整个表格居中\n作为tr属性 - 让一行中所有单元格的内容居中\n作为td属性 -让指定的单元格中的内容居中\n\t\t\t\n补充：html中的颜色：可以是颜色的英文单词；rgb的16进制值（写值时前需加#号）；例如：#ff0000\n```\n<!--创建一个三行三列的表格-->\n<table align=\"center\" bgcolor=\"bisque\" border=\"1\" bordercolor=\"black\" cellspacing=\"0\" cellpadding=\"10\" width=\"600\">\n<!--第一行-->\n<tr align=\"center\" bgcolor=\"seagreen\" height=\"60\">\n<td width=\"100\">姓名</td>\n<td width=\"200\">成绩</td>\n<td width=\"50\">是否留级</td>\n</tr>\n<!--第二行-->\n<tr height=\"100\">\n<td bgcolor=\"blue\">张三</td>\n<td align=\"center\">89</td>\n<td>否</td>\n</tr>\n<!--第三行-->\n<tr height=\"100\">\n<td></td>\n<td></td>\n<td></td>\n</tr>\t\t\t\t\n</table>\n```\n![image.png](https://upload-images.jianshu.io/upload_images/15041659-8af2abc575d0878d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n##六、细线表格\n细线表格\n将border设置为0\ncellspacing的大小设置为想要的宽度的大小\n设置整个表格的背景颜色为边框颜色，并保证每个单元格的颜色和背景颜色不一样\n```\n<table width=\"600\" height=\"400\" cellspacing=\"1\" bgcolor=\"black\" >\n<tr bgcolor=\"white\">\n    <td></td>\n    <td></td>\n    <td></td>\n</tr>\n<tr bgcolor=\"white\">\n    <td></td>\n    <td></td>\n    <td></td>\n</tr>\n<tr bgcolor=\"white\">\n    <td></td>\n    <td></td>\n    <td></td>\n</tr>\n</table>\n```\n![image.png](https://upload-images.jianshu.io/upload_images/15041659-a55c6f29b84b0a24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n#七、不规则的表格\n**rowspan** - 行合并\n**colspan** - 列合并\t\t\t\n```\n<table width=\"600\" height=\"400\" cellspacing=\"0\" border=\"1\">\n<tr>\n    <td></td>\n    <td></td>\n    <td></td>\n    <td rowspan=\"2\"></td>\n</tr>\n<tr>\n    <td></td>\n    <td></td>\n    <td></td>\t\t\t\n</tr>\n<tr>\n    <td></td>\n    <td colspan=\"2\"></td>\n    <td></td>\n</tr>\t\t\n</table>\n```\n![image.png](https://upload-images.jianshu.io/upload_images/15041659-a52b167e7e651869.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n#八、表单标签\n一般用来做用户收集，单独使用没意义，一般是结合相关标签使用(input，select,textarea)\n表单标签可以对包含在这个标签中的其他标签做信息的提交和重置\naction - 提交位置（接口相关）\nmethod - 请求方式（get和post)\n```\n<form action=\"\" method=\"post\">\n\t\n</form>\n```\n2.input标签:单标签\n1）type属性：决定输入框的样式\ntext(默认) - 普通的文本输入框\n2）name属性：主要用来区分数据，提交的时候是以**name值=value的形式提交**\n3）value属性：单标签中的value 相当于双标签中的内容，但是value只能是文本；\n设置value属性其实就是设置输入框默认显示的内容；\n修改内容其实是在修改value值\nplaceholder - 占位符（提示信息）\nmaxlenth - 输入框中最多输入的字符个数\n```\n<form action=\"\" method=\"get\">\n<!--普通输入文本-->\n<input maxlength=\"10\" placeholder=\"请输入电话号码\" type=\"text\" name=\"tel\" id=\"\" value=\"123456\" />\n<input type=\"\" name=\"email\" id=\"\" value=\"\" />\n```\t\t\t\n##b.password:密码输入框\nplaceholder - 占位符\nmaxlenth - 最多能输入的字符个数\n```\n<input maxlength=\"8\" placeholder=\"请输入密码\" type=\"password\" name=\"密码\" id=\"\" value=\"123456\" />\n```\n##c.radio - 单选按钮\nname - 同一组数据对应的name值设置成一样的，才能做到单选\nvalue - 这里只是用于数据提交，不能显示\nchecked - 设置为checked让按钮处于默认选中状态\n```\n<input type=\"radio\" name=\"sex\" id=\"\" value=\"男生\" checked=\"checked\"/><font>男</font>\n<input type=\"radio\" name=\"sex\" id=\"\" value=\"女生\" /><font>女</font>\n```\n####让文字和按钮关联\n文字用label标签显示，设置for属性的值为想要关联的按钮的id的值\n这样点击文字和点击按钮的效果一样\n```\n<input type=\"radio\" name=\"m\" id=\"m1\" value=\"\" /><label for=\"m1\">已婚</label>\n<input type=\"radio\" name=\"m\" id=\"m2\" value=\"\" /><label for=\"m2\">未婚</label>\n<input type=\"radio\" name=\"m\" id=\"m3\" value=\"\" /><label for=\"m3\">保密</label>\n```\t\t\t\n##d.checkbox:复选按钮\nname - 同一组数据的name要一样\nvalue - 这里只是用于数据提交，不能显示\n```\n<input checked=\"checked\" type=\"checkbox\" name=\"instr\" id=\"\" value=\"教育\" /><font>教育</font>\n<input type=\"checkbox\" name=\"instr\" id=\"\" value=\"教育\" /><font>教育</font>\n<input type=\"checkbox\" name=\"instr\" id=\"\" value=\"食品\" /><font>食品</font>\n```\n##e.button:普通按钮\nvalue - value对应的值会显示在按钮上\n一般内容是文本\n```\n<input type=\"button\" name=\"\" id=\"\" value=\"登录\" />\n```\t\n##f.submit:提交按钮\n这个按钮的点击事件是将当前的form标签中，设置了name\n属性相关的标签的数据以name=value的形式提交\n```\n<input type=\"submit\" name=\"\" id=\"\" value=\"提交\" />\n```\t\n##g.reset:重置\n这个按钮的点击事件是将当前所在的form标签中，\n所有的标签设置为初始状态\n```\n<input type=\"reset\" name=\"\" id=\"\" value=\"重置\" />\n```\n###2.button标签\n除了文本还可以是其他图片等\n```\n<button><img src=\"img/0001.jpg\" width=\"100\" height=\"100\"/></button>\n```\t\n#九、下拉列表\n1.下拉列表（菜单）\nselect标签 - 代表整个下拉列表\noption标签 - 代表列表中每个选项\n通过设置select属性的值为selected,来让这个选项默认选中\noptgroup - 设置label的值来对当前下拉菜单的内容进行分组\t\t\n```\n\t\t<select name=\"省\">\n\t\t\t<optgroup label=\"省\"></optgroup>\n\t\t\t<option value=\"四川省\">四川省</option>\n\t\t\t<option value=\"云南省\">云南省</option>\n\t\t\t<option value=\"吉林省\">吉林省</option>\n\t\t\t<option selected=\"selected\" value=\"辽宁省\">辽宁省</option>\n\t\t\t<option value=\"黑龙江省\">黑龙江省</option>\n\t\t\t<optgroup label=\"直辖市\"></optgroup>\n\t\t\t<option value=\"北京\">北京</option>\n\t\t</select>\n\t\t<select name=\"市\">\n\t\t\t<option value=\"\">成都市</option>\n\t\t\t<option value=\"\">绵阳</option>\n\t\t\t<option value=\"\">达州</option>\n\t\t</select>\n```\n#十、多行文本域\ntextarea标签 - 输入框，可以同时显示多行内容\n（可以自动换行和上下滚动）\nname属性 - 区分和提交\nrows - 行数（不滚动最多能显示的行数，影响输入框的宽度）\ncols - 列数（一行显示的文字的数量，影响输入框的宽度）\nplaceholder - 占位符\nmaxlength - 限制最多输入的文字个数\n```\n<textarea placeholder=\"请输入你的问题\" name=\"message\" rows=\"4\" cols=\"20\">默认文字</textarea>\n```\n#十一、无语义标签\ndiv和span都是无语义标签\ndiv是一个占一行\n网页中分组分块，都可以使用div作为容器\nspan一行可以有多个\n\t\t\t\nhtml中标签分类：行内标签和块级标签\n块级标签：一个占一行，例如：div、h1、p、列表、table、tr、form、option\n行内标签：一行显示多个,例如：span、font、td、input、select、textarea\n\n\n\n\n\n\n","tags":["语言学习"],"categories":["web前端"]},{"title":"MySQL数据库(DCL数据控制)","url":"/2019/02/27/MySQL数据库(DCL数据控制)/","content":"本文介绍了MySQL数据库中如何创建用户以及如何给用户添加权限、事务等操作\n<!-- more -->\n\n-- 1.创建用户 \n-- create user 用户名@登录地址\n-- 登录地址: （限制用户能够登录MySQL的主机地址）， ip地址(指定地址), localhost(数据库本机), %(任何位置)\nCREATE USER 'zhangshan'@'%' IDENTIFIED BY 'yuting123456';  \n\n-- 删除用户:  drop user 用户名;    \nDROP USER 'zhangshan';\n\n-- 2.授权  \n-- grant 权限类型 on 数据库.对象 to 用户名; \nGRANT SELECT on school.tb_student TO 'zhangshan';\nGRANT UPDATE on school.tb_student TO 'zhangshan';  \nGRANT all PRIVILEGES ON school.* TO 'zhangshan';   -- 添加所有权限  \nGRANT all PRIVILEGES ON school.* TO 'zhangshan' WITH GRANT OPTION;   -- 添加所有权限，并且能够将自己的权限再授权给其他用户     \n\n\n-- 3.召回授权 \n-- REVOKE 权限类型 on 数据库.对象 from 用户名;\nREVOKE DELETE on school.* FROM 'zhangshan';\nREVOKE all PRIVILEGES on school.* FROM 'zhangshan';\nREVOKE all PRIVILEGES on school.* FROM 'zhangshan';\nREVOKE SELECT on school.tb_student FROM 'zhangshan';\nREVOKE UPDATE on school.tb_student FROM 'zhangshan';\n\n\n\n-- 4.事务  \n-- 完成一个任务需要执行多条sql，但是要求这多个操作中只要有一个操作失败，这个任务就失败，数据全部还原；所有的操作都成功，整个任务才成功的时候就使用事务  \n\n-- 开启事务环境\nBEGIN;\nUPDATE tb_student set stuname='444' WHERE stuname='222';\nUPDATE tb_student set birth2='1990-1-1' WHERE stuname='222';\n-- 提交事务(只有begin到commit之间的所有的sql都执行成功，才会执行commit; 否则执行rollback)\nCOMMIT;\n-- 事务回滚(放弃beigin到commit之间执行成功的所有sql语句的结果)\nROLLBACK;\n\n","tags":["语言学习"],"categories":["python编程"]},{"title":"MySQL数据库(DML高级查询)","url":"/2019/02/26/MySQL数据库(DML高级查询)/","content":"本文介绍了MySQL数据库中DML高级查询的操作\n<!-- more -->\n-- ========================添加约束=========================\n-- 1.创建表的时候添加约束\nCREATE TABLE if not EXISTS t_college\n(\ncollid int, \ncollname VARCHAR(20) NOT NULL,   -- 创建表的时候添加约束\nwebsite VARCHAR(1024), \nintro VARCHAR(200),\nPRIMARY KEY(collid)\n);\n\n-- 2.通过添加约束索引的方式添加约束 \n-- a.添加约束\n-- alter table 表名 add constraint 索引名 约束 (字段名);\n-- 说明: 索引名 - 自己随便命名，用来指向当前添加的约束； 约束 - 需要添加的约束(支持唯一约束、主键约束和外键约束)\n\nALTER TABLE t_college ADD CONSTRAINT con_website UNIQUE (website);  \n-- 给t_college表中的website添加unique约束，约束索引为con_website\n\n-- b.删除约束\n-- alter table 表名 drop index 约束索引;\nALTER TABLE t_college DROP index con_website;\n\n\n-- ====================外键和E.R图================\n-- 1.什么是外键：表中的某个字段的值是根据其他表中主键的值来确定的。那么这个字段就是外键  \n-- 1.1 多对一的外键的添加： 将外键添加到多的一方对应的表中  \n--     一对一的外键的添加： 将外键随便添加到哪一方，同时添加值唯一约束  \n--     多对多的外键的添加： 关系型数据库中，两张表没法实现多多的关系，需要一个中间表。(中间表有两个外键分别参照多多的两个表的主键)\n-- 1.2 怎么添加外键： \n\n-- a.添加外键对应的字段 \nalter TABLE tb_student add COLUMN collid int;\n\n-- b.给设计好的外键对应的字段添加外键约束\n-- alter table 表1 add constraint 索引名 foreign key (字段1) references 表2 (字段2); \n--   - 将表1中的字段1设置为外键，并且让这个外键的值参照表2中的字段2\nALTER TABLE tb_student ADD CONSTRAINT fk_collid_stu \nFOREIGN KEY (collid) \nREFERENCES  tb_college (collid);\n\n-- c. 删除外键约束  \n-- alter table 表名 drop foreign key 外键索引名;    - 可以删除外键约束，但是外键索引还存在；需要额外的把索引删掉\n-- 注意: 删除外键约束的时候直接删除约束的索引无效，必须先将约束删掉，然后再删除索引.\nALTER TABLE tb_student DROP FOREIGN KEY fk_collid_stu;\nALTER TABLE tb_student DROP INDEX fk_collid_stu; \n\n-- d. 多对多的外键约束\n-- 添加学生的外键约束 \nALTER TABLE tb_score ADD CONSTRAINT fk_stuid_score \nFOREIGN KEY (stuid) \nREFERENCES tb_student (stuid);\n\n-- 添加课程的外键约束\nALTER TABLE tb_score ADD CONSTRAINT fk_couid_score \nFOREIGN KEY (couid) \nREFERENCES tb_course (couid);\n\n\n-- ==================查询的高级操作=================  \n-- 1.聚合：max()/min()/sum()/avg()/count()\n-- SELECT 聚合函数(字段) FROM 表名 WHERE 条件;   -- 按条件多表查询指定字段数据，然后将查询结果做相应的聚合运算。聚合运算的结果是最后结果 \nSELECT mark FROM tb_score;    -- 获取tb_score表中的所有分数值\nSELECT max(mark) as maxmark FROM tb_score;      -- 获取tb_score表中所有分数的最大值\nSELECT min(mark) FROM tb_score; \nSELECT sum(mark) FROM tb_score; \nSELECT avg(mark) FROM tb_score WHERE scoreid>=123;   -- 计算平均值的时候如果参与运算的对象的值为NULL,那么这个数据不会参与计算\nSELECT count(mark) FROM tb_score WHERE mark>=90;\n\n\n-- 2.分组  \n-- SELECT 字段操作  FROM 表名 WHERE 条件 GROUP BY(字段2);    \n--         将指定表中满足条件的记录按照字段2的进行分组(值是一样的在一个组里面), 然后再讲每个分组作为整体按照指定字段进行指定聚合操作\n-- 求每个学生的平均成绩\nSELECT stuid,avg(mark) FROM tb_score WHERE scoreid <= 115 GROUP BY(stuid) ;\n-- 注意:a.字段操作的位置除了分组字段不用聚合，其他字段都必须聚合   b.分组的时候where要放到分组前对需要分组的数据进行筛选\n\n-- having: 分组的时候，在分组后用having代替where来对分组后的数据进行筛选\n-- 获取平均分数大于60分的学生的id\nSELECT stuid,avg(mark) FROM tb_score GROUP BY(stuid) HAVING avg(mark)>60;\n\n-- 3.子查询: 将一个查询操作的结果作为另外一个查询的数据源\n-- 在tb_score表中获取成绩是大于90分的学生的id\nSELECT stuid FROM tb_score WHERE mark>90 and stuid is not NULL;   \n\n-- 获取成绩大于90分的学生的名字\nSELECT stuname FROM tb_student WHERE stuid in \n(SELECT stuid FROM tb_score WHERE mark>90 and stuid is not NULL);  \n\nSELECT stuid,mark FROM tb_score WHERE mark > 90 and stuid is  not NULL;\n-- 将一个查询的结果作为查询对象提供给另外一个查询。但是第一个查询结果需要重命名\nSELECT mark FROM (SELECT stuid,mark FROM tb_score WHERE mark > 90 and stuid is  not NULL) as t2;\n\n-- =================================连接查询=======================================\n-- 1.接连查询: 同时查询多个表中的数据  \n-- SELECT * FROM 表名1,表名2... WHERE 连接条件;  \n-- 连接查询如果不加连接条件，结果是一个笛卡尔积：（a,b,c）(1,2,3) --> (a1,a2,a3,b1,b2,b3,c1,c2,c3) \n-- (余婷, 骆昊, 王海飞) (设计学院，信通学院) --> 笛卡尔积\n\n-- 查询每个老师对应的学院\nSELECT teaname, collname FROM tb_college, tb_teacher WHERE tb_teacher.collid=tb_college.collid;\n-- 查询学生姓名对应的学科名的分数  \nSELECT stuname, couname, mark FROM tb_student, tb_course, tb_score \nWHERE tb_score.stuid=tb_student.stuid and tb_score.couid=tb_course.couid;\n\n-- 查询学生名对应的学生的平均成绩\n-- SELECT stuid, AVG(mark) as avg_mark FROM tb_score GROUP BY(stuid);\nSELECT stuname, avg_mark FROM \ntb_student, \n(SELECT stuid, AVG(mark) as avg_mark FROM tb_score GROUP BY(stuid)) as temp_t \nWHERE tb_student.stuid = temp_t.stuid;  \n\n-- 查询平均分高于80分的学生名字和对应的平均分分数\nSELECT stuname, avg_mark FROM \ntb_student, \n(SELECT stuid, AVG(mark) as avg_mark FROM tb_score GROUP BY(stuid) HAVING AVG(mark)>80) as temp_t \nWHERE tb_student.stuid = temp_t.stuid; \n\n-- 查询平均分高于80分的学生名字和对应的平均分分数\n-- 注意:如果连接查询的时候既有连接条件又有筛选条件，我们要把筛选条件写在连接条件后边\nSELECT stuname, avg_mark FROM \ntb_student, \n(SELECT stuid, AVG(mark) as avg_mark FROM tb_score GROUP BY(stuid)) as temp_t \nWHERE tb_student.stuid = temp_t.stuid and avg_mark>80;   \n\n\n-- 2.内连接 \n-- SELECT * FROM 表1 inner join 表2 on 表2的连接条件 inner join 表3 on 表3的连接条件 ...;\n-- 注意: 中间表写在最前面(存在关联其他表外键的表)\n-- 查询学生姓名对应的学科名的分数   \nSELECT stuname, couname, mark FROM tb_score  \nINNER JOIN tb_student ON tb_student.stuid=tb_score.stuid  \nINNER JOIN tb_course ON tb_course.couid=tb_score.couid \nWHERE mark < 60;  \n\n-- 3.外连接  \n-- 外连接分为左外连接、右外连接和全连接， 但是在MySQL中支持左外连接和右外连接  \n-- 表1(左表) left/right/inner join 表2(右表) \n-- 左外连接：将左表中对应字段的所有数据取出，然后再对应的右表中字段的值，如果右表对应的值不存在结果就为null \n-- 右外连接：将右表中对应字段的所有数据取出，然后再对应的左表中字段的值，如果左表对应的值不存在结果就为null \n\n-- 查所有学生名对应的成绩 \n-- SELECT stuname, mark FROM tb_score INNER JOIN tb_student ON tb_student.stuid=tb_score.stuid;\nSELECT stuname, mark FROM tb_score  RIGHT JOIN tb_student ON tb_student.stuid=tb_score.stuid;   \n\n\n-- =================================字段索引=======================================\n-- 字段的索引就相当于于目录，作用是为了能够快速的对这个字段进行查找  \n-- 添加索引的好处是可以大大的提高查询效率； 缺点是：1.会消耗额外的存储空间， 2.会让添加和删除的效率降低  \n-- 建议: 1.索引不能滥用  2.如果项目中针对某个字段的查询很频繁，建议加个对应的索引\n-- EXPLAIN： 获取执行计划\n\nEXPLAIN SELECT * FROM tb_student WHERE stuid=110;\n\nEXPLAIN SELECT * FROM tb_student WHERE stuname='张三';\n\n-- 添加索引: create index 索引名称 on 表名 (字段名);  - 给指定表中的指定字段添加索引\nCREATE INDEX index_stuname on tb_student (stuname);   -- 给名字加索引\nCREATE INDEX index_stuname1 on tb_student (stuname(1));    -- 按姓加索引\n\n-- 删除索引\nALTER TABLE tb_student DROP INDEX index_stuname;   \n\n\n\n","tags":["语言学习"],"categories":["python编程"]},{"title":"MySQL数据库(DDL和DML基础)","url":"/2019/02/26/MySQL数据库(DDL和DML基础)/","content":"本文介绍了MySQL数据库中的DDL(数据定义)和DML(数据操作)\n<!-- more -->\n\n\n-- SQL语法 \n\n-- DDL(数据定义语言)\n\n-- DML(数据操作语言）\n\n-- DCL(数据控制语言)  \n\n-- 注意: SQL中大小写不敏感（大写和小写是一样的）; 每条SQL语句必须以分号结束\n\n \n\n-- 一.DDL - 主要提供数据库和表的创建、删除和修改  \n\n-- 0. 删除数据库: drop database 数据库名;\n\nDROP DATABASE school;   -- 直接删除指定数据库\n\nDROP DATABASE if EXISTS school;   -- 如果指定的数据库存在就删除数据库\n\n \n\n-- 1.创建数据库: create database 数据库名;\n\ncreate database school;  -- 直接创建指定数据库\n\nCREATE database if not EXISTS school;  -- 当指定数据库不存在的时候才创建数据库\n\ncreate database if not EXISTS school default charset utf8;   -- 创建数据库的时候设置字符集编码方式为utf8,让数据库支持中文数据的存储\n\n \n\n-- 2.使用/切换数据库: use 数据库名;\n\nuse school;\n\n \n\n-- 3.新建表: create table if not exists 表名(字段名1 类型1, 字段2 类型2,...);\n\n-- 注意： a. 表名一般需要加前缀't'或者'tb'    b.字段用来确定表中要存储哪些数据，字段名随便命名但是不能是关键字  c.数据类型必须是MySQL支持的数据类型\n\n-- 常用数据类型: int-整数, char(size)-定长字符串, varchar(size)-不定长字符串, text-字符串, bit-布尔, date-日期\n\nCREATE TABLE if not EXISTS t_student(stuid int, stuname varchar(20), gender bit, birth date);  \n\n \n\n-- 新建表并且添加约束: create table if not exists 表名(字段名1 类型1 约束1, 字段2 类型2 约束2,...);\n\n-- 常见约束: not null - 不为空,  default  - 设置默认值,  unique - 值唯一,  primary key - 主键约束 \n\n-- 主键约束:  主键的值可以确定列表中唯一一条记录(通过一个主键值可以找到表中的唯一一条记录)\n\n-- 注意: auto_increment只针对主键有效,并且主键的类型是整型;\n\nCREATE TABLE if not EXISTS t_student\n\n(\n\nstuid int not null auto_increment, \n\nstuname varchar(20) not null, \n\ngender bit DEFAULT 1, \n\nbirth date,\n\nPRIMARY KEY(stuid)  -- 将字段stuid作为当前表的主键（设置主键可以间接约束这个字段的值是唯一的）\n\n);\n\n \n\n \n\n-- 4.删除表: DROP TABLE if EXISTS 表名;\n\nDROP TABLE if EXISTS t_student;  \n\n-- 清空表中的数据: TRUNCATE TABLE 表名;\n\nTRUNCATE TABLE t_student;\n\n \n\n-- 5.修改表\n\n-- 5.1 添加列: alter TABLE 表名 add COLUMN 字段名 字段类型 约束;\n\nalter TABLE t_student add COLUMN score FLOAT(8,2) DEFAULT 0;\n\n \n\n-- 5.2 删除列: alter TABLE 表名 drop COLUMN 字段名;\n\nalter TABLE t_student drop COLUMN gender;\n\n \n\n \n\n-- 二、DML(数据操作语言) - 主要针对数据库中数据的增、删、改、查\n\n-- 1.增(添加数据/记录)\n\n-- 1.1插入数据/记录: insert into 表名 values(值1, 值2, 值3,....)  - 依次给指定表中的字段赋值\n\nINSERT into t_student VALUES(100, '张三', 0, '2019-9-23');\n\n \n\n-- 1.2插入数据/记录: insert into 表名(字段名1,字段名2,...) values(值1, 值2,...) -以指定的顺序给指定的字段赋值  \n\nINSERT into t_student(stuname, birth) VALUES(\"小花\", date(now()));   -- 一次插入一条记录\n\n \n\n-- 一次插入多条记录\n\nINSERT into t_student(stuname, birth) VALUES\n\n(\"小花\", date(now())),\n\n('小明', '2018-9-8'),\n\n('路飞', '1999-12-16'),\n\n('佐助', '2000-10-12');\n\n \n\n-- 值的问题: sql中是数字对应的值直接写，字符串需要使用引号引起来，bit类型的值只有0或者1, 时间可以用内容是满足时间格式字符串也可以是通过时间函数获取的值\n\n-- 时间函数: now() - 当前时间  date(now()) - 当前日期   year(now()) - 当前年   month(now()) - 当前月 ....  \n\n \n\n-- 2.删（删除数据/记录） \n\n-- delete from 表名;    - 删除指定表中所有记录\n\nDELETE FROM t_student;\n\n \n\n-- delete from 表名 where 条件语句;    - 删除满足条件的记录  \n\n-- SQL中的条件语句: =(判断是否相等), <>(不等于,和python中的!=功能一样), >, <, >=, <=\n\nDELETE FROM t_student WHERE stuid=100;     -- 删除t_student表中stuid的值等于100的记录  \n\nDELETE FROM t_student WHERE stuname='小花';  -- 删除t_student表中stuname的值等于'小花'的记录\n\nDELETE FROM t_student WHERE stuid<108;   -- 删除t_student表中stuid的值小于'小花'的记录  \n\n \n\n-- 3.改(修改数据/记录) \n\n-- update 表名 set 字段1=新值1, 字段2=新值2,...;  \t- 将指定表中所有行的指定列/字段的值赋值为新值\n\nUPDATE t_student set birth='1999-10-1', gender=1;\n\n \n\n-- update 表名 set 字段1=新值1, 字段2=新值2,... where 条件语句;  -将表中满足条件的行中指定字段的值赋值为新值  \n\nUPDATE t_student set gender=0 WHERE stuname='小花';\n\n \n\n-- 通配符%: 表示任意个数的任意字符（包括0个）\n\nUPDATE t_student set birth='2000-01-01' WHERE stuname LIKE '小%';    -- 修改stuname是以'小'开头的行对应的birth的值\n\nUPDATE t_student set birth='2111-01-01' WHERE stuname LIKE '%小%';  \n\n-- 统配符_: 表示一个任意字符\n\nUPDATE t_student set birth='2444-01-01' WHERE stuname LIKE '小_';    --  修改stuname只有两个字符，并且第一个字符是‘小’对应的行的birth的值\n\n-- 注意: 通配符只针对字符串有效!  \n\n \n\n \n\n-- 4.查(获取数据)\n\n-- 4.1直接查询\n\n-- select * from 表名;    - 获取指定表中所有行和所有的列(所有数据)\n\nSELECT * FROM t_student;\n\n \n\n-- select 字段名1,字段名2,... from 表名;   - 获取指定表中所有行指定的列 \n\nSELECT stuname,stuid FROM t_student;   \n\n \n\n-- select * from 表名 where 条件;    - 获取指定表中所有满足条件的行所有列的数据  \n\nSELECT * FROM t_student WHERE stuid>115;    \n\n \n\n-- 4.2列重命名\n\n-- select 字段1 as 新字段1, 字段2 as 新字段2,... from 表名;\n\n-- 注意： 这儿的as可以省略\n\nSELECT stuid as '学号', stuname, gender as '性别' FROM t_student;    -- 对查询结果中的stuid和gender字段进行重命名\n\n \n\n-- 4.3对查询结果重新赋值(一般针对布尔数据)\n\n-- select if(字段名,值1,值2) from 表名;    -查询指定字段，并且判断字段对应的值是0还是1，如果是1结果为值1，否则为值2\n\n-- 注意: 这儿的if的用法是MySQL专有的\n\n-- MySQL写法: if(字段, 新值1, 新值2)\n\nSELECT stuname,if(gender,'男','女') as '性别' FROM t_student;    \n\n-- 通用写法:  case 字段 when 值 then 新值1 else 新值2 end\n\nSELECT case gender WHEN 1 THEN '男' ELSE '女' END as '性别' FROM t_student;\n\n \n\n-- 4.4对列进行合并\n\n-- select concat(字段1,字段2,...) from 表名;\n\nSELECT CONCAT(stuname,stuid) as 'name_id' FROM t_student;\n\nSELECT CONCAT(stuname,':',stuid) as 'name_id' FROM t_student;\n\n-- 注意: 数字和字符串数据可以合并，bit类型的数据不可以合并\n\n-- SELECT CONCAT(stuname,':',gender) as 'name_id' FROM t_student;   \n\n \n\n-- 4.5模糊查询 - 查询的时候时候通过like条件来指定查询对象\n\n-- sql中支持逻辑运算符and(逻辑与运算)和or(逻辑或运算)，not(逻辑非)\n\nSELECT * FROM t_student WHERE stuname like '%飞%' or not stuid < 110;  \n\n \n\n-- 4.6排序(先按之前的任何语法进行查询在排序)\n\n-- select * from 表名 order by 字段;      - 对查询结果按照指定字段的值进行升序排序 \n\n-- select * from 表名 order by 字段 asc;      - 对查询结果按照指定字段的值进行升序排序 \n\n-- select * from 表名 order by 字段 desc;      - 对查询结果按照指定字段的值进行降序排序\n\nSELECT * FROM t_student ORDER BY gender;    -- 按性别升序排序\n\nSELECT * FROM t_student ORDER BY stuid ASC;  -- 按学号升序排序\n\nSELECT * FROM t_student ORDER BY stuid DESC;  -- 按学号降序排序\n\n \n\n-- 排序的时候可以通过在order by的后边加多个字段，进行联排。排序的时候前面的字段的优先级高些\n\nSELECT * FROM t_student ORDER BY gender ASC, stuid DESC;   -- 先按性别进行升序排序，然后再按学号降序排序。  \n\n \n\n-- 4.7限制 \n\n-- select * from 表名 limit N;    -- 获取查询结果的前N条记录\n\nSELECT * FROM t_student LIMIT 3;   -- 获取查询结果的前3条记录\n\n \n\n-- select * from 表名 limit M offset N;   -- 对查询结果跳过前N条数据，取M条数据出来  \n\nSELECT * FROM t_student LIMIT 3 offset 4;  -- 跳过前4数据，然后取3条数据\n\n -- =================================sql基础补充===============================\n\n-- 1.条件语句的写法\n\n-- 在SQL中可以通过 `where 条件语句`来对操作对象进行筛选 - 筛选  \n\n-- a. 比较运算符： =, <>, >, <, >=, <=\n\n-- 注意: 判断一个字段的值是否为空不用使用=和<>, 而是使用`is null` 和 `is not null`\n\nSELECT addr FROM t_student;\n\nSELECT stuname FROM t_student WHERE addr is NULL;\t -- 判断是否为NULL（空）\n\nSELECT stuname FROM t_student WHERE addr='';     -- 判断是否是空串\n\n-- b. 逻辑运算符: and, or, not  \n\n-- c. where 字段名  between 值1 and 值2   --  筛选指定的字段的值在值1和值2之间\n\nSELECT stuname,birth FROM t_student WHERE birth BETWEEN '1990-1-1' AND '1999-12-31';  \n\n-- d. where 字段名 in 集合   -- 筛选出字段值是集合中的元素;(集合是使用括号括起来里面多个值)\n\nSELECT * FROM t_student WHERE stuname in ('小花', '小明', '路飞');  \n\n-- e. like操作 \n\n \n\n-- 2.数据类型 \n\n-- varchar(size): 不定长字符串，size决定的是最大长度\n\n-- char(size): 定长字符 \n\n-- text: 不限长度(最大是255个字符)\n\n-- int/tinyint(-128~127)\n\n-- FLOAT(size,d)/DOUBLE(size,d)  - 这儿的size和d的值都有约束效果\n\n-- bit: 只有0和1两个值\n\n-- date/datetime/time: 值可以是时间函数的结果，也可以时间字符串；计算或者是比较的时候内部是按时间处理的\n\nUPDATE t_student SET tel='1367819230';\n\nALTER TABLE t_student ADD COLUMN intro VARCHAR(10);\n\nSELECT * FROM t_student;  \n\n \n\n-- 3.去重 \n\nSELECT DISTINCT addr FROM t_student; \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n \n\n ","tags":["语言学习"],"categories":["python编程"]},{"title":"多线程技术","url":"/2019/02/24/python多线程技术/","content":"本文介绍了pyhton中的多线程技术\n<!-- more -->\n\n**进程**：一个正在运行的应用程序\n**主线程**：在默认情况下，一个进程有且只有一个线程\n一个进程中允许有多个线程同时对不同任务进行处理\n**应用场景**：耗时操作\n\npython内置标准库：threading\nThread：threading中的线程类\n**如何提供一个子线程**\n直接创建一个线程对象\n(需要一个子线程就创建一个Thread类的对象)\n###方法一、通过Thread类直接创建子线程\n```\nimport time\nfrom datetime import datetime\n# python多线程技术对应的模块\nimport threading\n\ndef download(file):\n    print('%s开始下载' % file, datetime.now())\n    # sleep(时间)  - 程序执行到这个位置等待指定的时候再接着往后面执行\n    time.sleep(10)\n    print('%s下载结束' % file, datetime.now())\n\n\ndef main():\n    print('程序开始')\n    # print(datetime.now())\n    # 1.在主线程中下载三个电影 (总耗时30s)\n    # download('枪王之王.mp4')\n    # download('开国大典')\n    # download('黄金国.mp4')\n\n    # 2.在三个子线程中同时下载三个电影\n    \"\"\"\n    Thread(target,args)   -  创建子线程对象\n    说明:\n    target - Function，需要传一个函数(这个函数中的内容会在子线程中执行)\n    args - 元祖,target对应的函数的参数\n    当通过创建好的子线程对象调用start方法的时候，会自动在子线程中调用target对应的函数, 并且将args中值作为实参\n    \"\"\"\n    # 创建线程对象\n    t1 = threading.Thread(target=download, args=('枪王之王.mp4',))\n    t2 = threading.Thread(target=download, args=('开国大典.mp4',))\n    t3 = threading.Thread(target=download, args=('黄金国.mp4',))\n\n    # 开始执行t1对应的子线程中的任务(实质就是在子线程中调用target对应的函数)\n    t1.start()\n    t2.start()\n    t3.start()\n\n    print('=============')\n\n\nif __name__ == '__main__':\n    main()\n```\n###方法二、创建一个子类继承Thread线程类，从而实现自己的线程类\n**创建子类的步骤**：\n1.声明类继承Thread\n2.重写run方法。\n**目的**：任务就是需要在子线程中执行的任务\n3.需要线程对象的时候，创建当前声明的类的对象\n4.通过线程对象.start方法在子线程中去执行run方法中的任务\n\n```\nimport threading\nimport time as time1\nfrom datetime import time\n\nclass DownloadThread(threading.Thread):\n    \"\"\"下载类\"\"\"\n    def __init__(self, file):\n        super().__init__()\n        self.file = file\n\n    def run(self):\n        print('开始下载:'+self.file)\n        print('run:', threading.current_thread())\n        time1.sleep(10)\n        print('%s下载结束' % self.file)\n\n\ndef main():\n    # 获取当前线程\n    print(threading.current_thread())\n\n    t1 = DownloadThread('沉默的羔羊.mp4')\n    t2 = DownloadThread('恐怖游轮.mp4')\n    # 调用start的时候会自动在子线程中调用run方法\n    t1.start()\n    t2.start()\n    # 注意：如果直接用对象调用run方法，run方法中的任务会在主线程执行\n    # t1.run()\n\n\nif __name__ == '__main__':\n    main()\n```\n```\nfrom threading import Thread\nimport requests\nimport re\nimport time\nfrom random import randint\n\n\nclass DownloadThread2(Thread):\n    \"\"\"下载类\"\"\"\n    def __init__(self, file, time):\n        super().__init__()\n        self.file = file\n        self.time = time\n\n    def run(self):\n        print('开始下载:'+self.file)\n        # t = randint(5, 10)\n        time.sleep(self.time)\n        print('%s下载结束, 总共耗时:%ds' % (self.file, self.time))\n\n\nclass DownloadImageThread(Thread):\n    def __init__(self, url):\n        super().__init__()\n        self.url = url\n\n    def run(self):\n        # 开始下载\n        file_name = re.split(r'/', self.url)[-1]\n        print(file_name)\n        print('%s开始下载' % file_name)\n        response = requests.get(self.url)\n        content = response.content\n\n        with open('images/'+file_name, 'bw') as f:\n            f.write(content)\n\n        print('%s下载结束' % file_name)\n\n\ndef creat_thread():\n    t1 = DownloadThread2('电影1', 6)\n    t2 = DownloadThread2('电影2', 4)\n    t1.start()\n    t2.start()\n    # 线程对象调用join方法，会导致join后的代码会在线程中的任务结束后才执行\n    t1.join()\n    t2.join()\n    print('电影下载结束!')\n\n\ndef main():\n    # t1 = DownloadImageThread('https://image.haha.mx/2015/12/04/middle/2082175_c5c3cc05eb73e4023149e663475d3ab4_1449192201.gif')\n    # t1.start()\n    #\n    # t2 = DownloadImageThread('http://img4.imgtn.bdimg.com/it/u=534897622,845095650&fm=26&gp=0.jpg')\n    # t2.start()\n\n    t0 = Thread(target=creat_thread)\n    t0.start()\n\n    print('========')\n    for x in range(100):\n        time.sleep(1)\n        print(x)\n\n\nif __name__ == '__main__':\n    main()\n```","tags":["语言学习"],"categories":["python编程"]},{"title":"pygame","url":"/2019/02/24/pygame/","content":"本文介绍了pyhton中第三方游戏库pygame的用法\n<!-- more -->\n\n####1.游戏基本框架\n```\n  # 1.初始化pygame, 做准备工作\n    pygame.init()\n\n    # 2.创建游戏窗口\n    \"\"\"\n    set_mode(窗口大小)  ==   set_mode((宽, 高))  - 会返回一个surface类型的对象\n    窗口大小对应的值是一个元祖\n    \"\"\"\n    window = pygame.display.set_mode((400, 600))\n    # 设置窗口标题\n    pygame.display.set_caption('游戏')\n\n    # 设置窗口背景颜色\n    \"\"\"\n    fill(颜色)  \n    颜色是一个元祖，元祖有三个int类型的元素，返回是0~255；分别代表R,G,B\n    \n    计算机三原色: 红、绿、蓝\n    红色 (255, 0, 0)\n    绿色 (0, 255, 0)\n    蓝色 (0, 0, 255)\n    白色 (255, 255, 255)\n    黑色 (0, 0, 0)\n    \"\"\"\n    window.fill((255, 255, 255))\n\n    # 想要对窗口内容进行的修改有效，必须执行以下操作\n    pygame.display.flip()\n\n    # 3.让游戏保持运行状态(游戏循环)\n    while True:\n        # 4.不断检测游戏过程中是否有事件的产生\n        for event in pygame.event.get():\n            # 只有当事件产生后才会进入for循环\n            # print('======')\n            if event.type == pygame.QUIT:\n                # return\n                # 退出!\n                exit()\n```\n####2.添加图片\n```\n   pygame.init()\n    window = pygame.display.set_mode((400, 600))\n    pygame.display.set_caption('图片')\n    window.fill((255, 255, 255))\n\n    # 3.添加固定显示内容\n    \"\"\"\n    显示图片\n    1.加载图片\n    image.load(图片地址)  -> 返回图片对象(surface)\n    \n    2.将图片添加(渲染)到窗口上\n    blit(渲染对象, 坐标)  \n    坐标： 一个元祖，两个元素，分别是x坐标和y坐标\n    \"\"\"\n    image = pygame.image.load('images/luffyy.png')\n    window.blit(image, (0, 0))\n\n    # 4.操作图片\n    \"\"\"\n    1.获取图片对象大小\n    surface类型有个对象方法: get_size()  - 返回的是元祖\n    \"\"\"\n    # 获取窗口大小\n    print(window.get_size())\n    # 获取图片大小\n    print(image.get_size())\n    width, height = image.get_size()\n    # window.blit(image, (400-width, 600-height))\n\n    \"\"\"\n    2.图片缩放和旋转(形变)\n    transform.scale(缩放对象, 目标大小)  -> 返回缩放后的新对象\n    transform.rotozoom(缩放对象, 旋转角度, 缩放比例)\n    \"\"\"\n    new_image = pygame.transform.scale(image, (50, 50))\n    new_image = pygame.transform.rotozoom(image, 45, 0.8)\n\n    window.blit(new_image, (10, 250))\n\n    pygame.display.flip()\n\n    while True:\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                exit()\n```\n####3.显示文字\n```\n    window = pygame.display.set_mode((400, 600))\n    pygame.display.set_caption('游戏')\n    window.fill((255, 255, 255))\n\n    # ============显示文字===========\n    \"\"\"\n    1.创建字体对象\n    a.系统字体\n    font.SysFont(字体名, 字体大小)  - 返回一个字体对象\n    b.自定义字体\n    font.Font(字体文件路径, 字体大小)\n    \"\"\"\n    # font = pygame.font.SysFont('Times', 40)\n    font = pygame.font.Font('images/font2.ttf', 40)\n    \"\"\"\n    2.根据字体创建文字对象\n    render(文字, True, 文字颜色)  - 返回一个文字对象(Surface)\n    \"\"\"\n    text = font.render('hello世界!', True, (255, 0, 0))\n    w, h = text.get_size()\n    \"\"\"\n    3.显示文字\n    blit(渲染对象, 坐标)\n    \"\"\"\n    window.blit(text, (400-w, 600-h))\n\n    pygame.display.flip()\n\n    while True:\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                exit()\n```\n####4.图形\n```\n    pygame.init()\n    window = pygame.display.set_mode((400, 600))\n    pygame.display.set_caption('游戏')\n    window.fill((255, 255, 255))\n\n    # ============画图形=============\n    # 1.画线\n    \"\"\"\n    line(画在哪个地方, 线的颜色, 起点, 终点, 线宽=1)\n    \"\"\"\n    pygame.draw.line(window, (0, 255, 0), (10, 10), (100, 100), 4)\n\n    # 2.画线\n    \"\"\"\n    lines(画在哪个地方, 线的颜色, 是否关闭, 点列表, 线宽=1)\n    \"\"\"\n    point_list = [(200, 200), (250, 10), (300, 200), (150, 100), (350, 100)]\n    # pygame.draw.lines(window, (255, 0, 0), True, point_list)\n\n    # 3.画圆\n    \"\"\"\n    circle(画在哪个地方, 线的颜色,圆心,半径, 线宽=0)\n    \"\"\"\n    pygame.draw.circle(window, (0, 0, 0), (200, 300), 100, 0)\n    pygame.draw.circle(window, (255, 0, 0), (200, 300), 90, 0)\n\n    # 4.画多边形\n    \"\"\"\n    polygon(画在哪个地方,线的颜色, 点列表,线宽)\n    \"\"\"\n    pygame.draw.polygon(window, (255, 0, 0), point_list, 0)\n\n    # 5.画弧线\n    \"\"\"\n    arc(画在哪个地方,线的颜色, 矩形, 起始弧度, 终止弧度, 线宽)\n    \"\"\"\n    pygame.draw.arc(window, (0, 255, 255), (10, 470, 150, 200), math.pi/4, math.pi/4*3, 5)\n\n    # 6.画矩形\n    pygame.draw.rect(window, (100, 20, 50), (200, 470, 100, 50), 2)\n    window.fill((255, 255, 255))\n\n    pygame.display.flip()\n```\n\n####5游戏事件\n**1.鼠标事件**:\n**MOUSEBUTTONDOWN** - 鼠标按下\n**MOUSEBUTTONUP** - 鼠标弹起\n**MOUSEMOTION** - 鼠标移动\n\n**重点**：事件发生的位置: event.pos\n**方法**：event.pos\n**含义**：鼠标的坐标\n**返回值**：元祖（坐标x, y）\n\n2.键盘事件\n**KEYDOWN** - 键盘按下 \n**KEYUP** - 键盘弹起 \n\n**重点**：按了哪个键\n**方法**：event.key\n**返回值**：按键对应的字符的编码值\n\n```\n# 模块的导入\nimport pygame\nfrom color import Color\nfrom random import randint\n\npygame.init()\nwindow = pygame.display.set_mode((400, 600))\npygame.display.set_caption('事件')\nwindow.fill(Color.white)\n\npygame.display.flip()\nis_move = False\nwhile True:\n\n    # 不断检测是否有事件产生，如果有事件产生才会进入for循环\n    for event in pygame.event.get():\n        # 这儿的event是事件对象，我们可以通过事件对象的type值来判断事件的类型\n        #==================鼠标事件===================\n        if event.type == pygame.QUIT:\n            exit()\n        elif event.type == pygame.MOUSEBUTTONDOWN:\n            # 鼠标按下要做什么，就将代码写这个if语句中\n            print('鼠标按下', event.pos)\n            # pygame.draw.circle(window, Color.random_color(), event.pos, randint(10, 20))\n            # pygame.display.update()\n            is_move = True\n        elif event.type == pygame.MOUSEBUTTONUP:\n            # 鼠标弹起要做什么，就将代码写这个if语句中\n            print('鼠标弹起')\n            is_move = False\n        elif event.type == pygame.MOUSEMOTION:\n            # 鼠标移动要做什么, 就将代码写这个if语句中\n            if is_move:\n                pygame.draw.circle(window, Color.random_color(), event.pos, 20)\n                pygame.display.update()\n                print('鼠标移动')\n\n        # ================键盘事件=================\n        if event.type == pygame.KEYDOWN:\n            print('按键被按下')\n            print(event.key, chr(event.key))\n        elif event.type == pygame.KEYUP:\n            print('按键弹起!')\n```\n颜色脚本：color模块\n```\nfrom random import randint\n\n\nclass Color:\n    white = (255, 255, 255)\n    black = (0, 0, 0)\n    red = (255, 0, 0)\n    green = (0, 255, 255)\n    blue = (0, 0, 255)\n    yellow = (255, 255, 0)\n    gray = (155, 155, 155)\n\n    @staticmethod\n    def random_color():\n        return randint(0, 255), randint(0, 255), randint(0, 255)\n```\n按钮：\n```\nimport pygame\nfrom color import Color\nfrom random import randint\n\n\nclass Button:\n    \"\"\"声明一个按钮类\"\"\"\n    def __init__(self, x, y, width, height, text='', background_color=Color.red, text_color=Color.white):\n        # 按钮的x坐标\n        self.x = x\n        # 按钮的y坐标\n        self.y = y\n        # 按钮的宽度\n        self.width = width\n        # 按钮的长度\n        self.height = height\n        # 按钮的显示内容\n        self.text = text\n        # 按钮的背景颜色\n        self.background_color = background_color\n        # 显示内容的颜色\n        self.text_color = text_color\n        # 按钮的字体大小\n        self.font_size = 30\n\n    def show(self, window):\n        \"\"\"将按钮显示在屏幕上\"\"\"\n        # 画一个矩形，然后显示在屏幕上\n        pygame.draw.rect(window, self.background_color, (self.x, self.y, self.width, self.height))\n        # 创建一个字体对象\n        font = pygame.font.SysFont('Times', self.font_size)\n        # 根据字体创建一个文字对象\n        text = font.render(self.text, True, self.text_color)\n        # 获取文字对象的大小\n        w, h = text.get_size()\n        # 获取显示在屏幕上的x坐标\n        x = self.width / 2 - w / 2 + self.x\n        # 获取显示在屏幕上的y坐标\n        y = self.height / 2 - h / 2 + self.y\n        # 将文字显示在屏幕上\n        window.blit(text, (x, y))\n\n    def is_cliecked(self, pos):\n        \"\"\"根据传入的坐标判断是否在范围内\"\"\"\n        # 获取传入坐标的x,y值\n        x, y = pos\n        # 返回点击鼠标的位置，是否反应\n        return (self.x <= x <= self.x + self.width) and (self.y <= y <= self.y + self.height)\n\n\ndef main():\n    # 初始化窗口\n    pygame.init()\n    # 创建一个窗口\n    window = pygame.display.set_mode((400, 600))\n    # 设置窗口标题\n    pygame.display.set_caption('事件')\n    # 设置窗口的背景颜色\n    window.fill(Color.white)\n\n    # add_btn(window)\n    # 创建一个按钮对象\n    add_btn = Button(100, 100, 100, 50, 'del')\n    # 将对象显示在屏幕上\n    add_btn.show(window)\n    # 创建第二个按钮对象\n    btn2 = Button(100, 250, 100, 60, 'Score', background_color=Color.yellow, text_color=Color.black)\n    # 将第二个对象显示在屏幕上\n    btn2.show(window)\n    # 将修改过的内容有效显示\n    pygame.display.flip()\n    is_move = False\n    while True:\n        # 不断检测事件的发生，有事件就进入for循环\n        for event in pygame.event.get():\n            # 将窗口关闭\n            if event.type == pygame.QUIT:\n                exit()\n            # 鼠标按下要做的事情\n            elif event.type == pygame.MOUSEBUTTONDOWN:\n                # 鼠标点击的坐标\n                mx, my = event.pos\n                # 如果点击的坐标在按钮范围内，要发生的事情\n                if add_btn.is_cliecked(event.pos):\n                    print('删除!')\n                    # 继续下一次事件的判断\n                    continue\n                # 如果点击的坐标在第二个按钮的范围内，要发生的事情\n                if btn2.is_cliecked(event.pos):\n                    # print('hello')\n                    # 更改按钮要显示的内容\n                    btn2.text = str(randint(0, 100))\n                    # 重新展示在屏幕上\n                    btn2.show(window)\n                    # 在屏幕上更新修改的内容\n                    pygame.display.update()\n                    # 继续下一次事件的判断\n                    continue\n\n\n\nif __name__ == '__main__':\n    main()\n```\n小球的移动控制：\n```\n\nimport pygame\nfrom color import Color\nfrom random import randint\n\nwindow_width = 400\nwindow_height = 600\n\nclass Direction:\n    \"\"\"方向类\"\"\"\n    UP = 273\n    DOWN = 274\n    RIGHT = 275\n    LEFT = 276\n\n\nclass Ball:\n    def __init__(self, center_x, center_y, radius, bg_color=Color.random_color()):\n        self.center_x = center_x\n        self.center_y = center_y\n        self.radius = radius\n        self.bg_color = bg_color\n        self.is_move = True   # 是否移动\n        self.move_direction = Direction.DOWN\n        self.speed = 5\n\n    def disappear(self, window):\n        \"\"\"\n        球从指定界面消失\n        :param window:\n        :return:\n        \"\"\"\n        pygame.draw.circle(window, Color.white, (self.center_x, self.center_y), self.radius)\n\n    def show(self, window):\n        \"\"\"\n        小球显示\n        :param window:\n        :return:\n        \"\"\"\n        pygame.draw.circle(window, self.bg_color, (self.center_x, self.center_y), self.radius)\n\n    def move(self, window):\n        \"\"\"\n        小球移动\n        :param window:\n        :return:\n        \"\"\"\n        # 让移动前的球消失\n        self.disappear(window)\n        if self.move_direction == Direction.DOWN:\n            self.center_y += self.speed\n        elif self.move_direction == Direction.UP:\n            self.center_y -= self.speed\n        elif self.move_direction == Direction.LEFT:\n            self.center_x -= self.speed\n        else:\n            self.center_x += self.speed\n\n        # 移动后重新显示球\n        self.show(window)\n\n    @classmethod\n    def creat_enemy_ball(cls):\n        r = randint(10, 25)\n        x = randint(r, int(window_width - r))\n        y = randint(r, int(window_height - r))\n        enemy = cls(x, y, r, Color.random_color())\n        enemy.is_move = False\n        return enemy\n\n\ndef main():\n    pygame.init()\n    window = pygame.display.set_mode((window_width, window_height))\n    pygame.display.set_caption('事件')\n    window.fill(Color.white)\n\n    # 先显示一个的球\n    ball = Ball(100, 100, 30)\n    ball.show(window)\n\n    pygame.display.flip()\n    # 计时\n    time = 0\n    # 所有被吃的球\n    all_enemy = []\n    while True:\n        time += 1\n\n        # 每隔100个运行单位移动一次\n        if time % 100 == 0:\n            if ball.is_move:\n                # 让球动起来\n                ball.move(window)\n                pygame.display.update()\n\n        if time == 10000:\n            time = 0\n            enemy = Ball.creat_enemy_ball()\n            all_enemy.append(enemy)\n            enemy.show(window)\n\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                exit()\n            elif event.type == pygame.KEYDOWN:\n                if event.key == Direction.DOWN or event.key == Direction.UP or event.key == Direction.LEFT or event.key == Direction.RIGHT:\n                    # ball.is_move = True\n                    ball.move_direction = event.key\n            elif event.type == pygame.KEYUP:\n                if event.key == Direction.DOWN or event.key == Direction.UP or event.key == Direction.LEFT or event.key == Direction.RIGHT:\n                    # ball.is_move = False\n                    pass\n\n\n\nif __name__ == '__main__':\n    main()    \n\n```\n小球游戏：\n```\nimport pygame\nfrom color import Color\nfrom random import randint\n\nwindow_height = 600\nwindow_width = 400\n\n\nclass Ball:\n    def __init__(self, center_x, center_y, radius, bg_color=Color.random_color()):\n        self.center_x = center_x\n        self.center_y = center_y\n        self.radius = radius\n        self.bg_color = bg_color\n        self.is_move = True\n        self.y_speed = 6\n\n    def move(self, window):\n        self.disapper(window)\n        new_y = self.center_y + self.y_speed\n        if new_y >= window_height - self.radius:\n            new_y = window_height - self.radius\n            self.y_speed *= -1\n\n        if new_y <= self.radius:\n            new_y = self.radius\n            self.y_speed *= -1\n\n        self.center_y = new_y\n\n        self.show(window)\n\n\n    def disapper(self, window):\n        pygame.draw.circle(window, Color.white, (self.center_x, self.center_y), self.radius)\n\n    def show(self, window):\n        pygame.draw.circle(window, self.bg_color, (self.center_x, self.center_y), self.radius)\n\n\ndef main():\n\n    pygame.init()\n    window = pygame.display.set_mode((window_width, window_height))\n    pygame.display.set_caption('事件')\n    window.fill(Color.white)\n\n    ball = Ball(100, 100, 20)\n    ball.show(window)\n    pygame.display.flip()\n    time = 0\n    while True:\n        time += 1\n        if time % 1000 ==0:\n            if ball.is_move:\n                ball.move(window)\n                pygame.display.update()\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                exit()\n\n\nif __name__ == '__main__':\n    main()\n```","tags":["语言学习"],"categories":["python编程"]},{"title":"正则表达式","url":"/2019/02/24/正则表达式/","content":"本文介绍了计算机语言中通用的正则表达式的相关用法\n<!-- more -->\n\n\n# 一、匹配字符\n**1.什么是正则表达式（语法通用）**\n**定义**：一种用来做字符串匹配的工具，通过不同的符号匹配不同的字符\n\n**2.python对正则表达式的支持**\nre模块\n\n**re模块方法**：\nfullmatch(正则表达式，字符串） \n**功能**：正则表达式和指定字符串进行匹配\n**输出**：成功返回匹配对象，失败返回None\n\n**注意**：python中的正则表达式是写在字符串中的，但是一般情况下不会在最前面加R/r\n```\nfrom re import fullmatch, search\n```\n ###普通字符（代表字符本身）\n```\n#匹配一个字符串，只有三个字符，每个字符分别是a,b,c\nre_str = r'abc'\nresult = fullmatch(re_str, 'abc')\nprint(result)\n```\n###1 .(匹配任意字符）\n**注意**：\na.一个.代表一个字符\nb.不能匹配\\n\n```\n# 匹配一个字符串，只有三个字符，第一个字符是a,第二个字符是任意字符，第三个字符是c\nre_str = r'a.c'\nresult = fullmatch(re_str, 'acc')\nprint(result)\n```\n###2 \\w(匹配字母数字下划线)\n**注意**：\n a.也可以匹配中文\n b.一个\\w只能匹配一个字符\n```\n# 匹配一个字符串，第一个是任意字符，第二三是字母数字下划线，最后三个是abc\nre_str = r'.\\w\\wabc'\nresult = fullmatch(re_str, 'd33abc')\nprint(result)\n```\n###3 \\s(匹配空白字符）\n空白字符：所有能产生空白的字符，包括空格，制表符，换行等\n```\n# 匹配一个字符串，前面两个是字母数字下划线或中文，第三个是空白，最后是任意字符\nre_str = r'\\w\\w\\s.'\nresult = fullmatch(re_str, 'a2\\td')\nprint(result)\n```\n###4 \\d(匹配数字字符)\n```\n# 匹配一个字符串，每个字符都是数字字符\nre_str = r'\\d\\d\\d'\nresult = fullmatch(re_str, '343')\nprint(result)\n```\n###5 \\b(检测单词边界)\na.检测正则表达式中\\b所在的位置，是否是单词边界\nb.单词边界：所有可以将两个单词区分开的符号都是单词边界，\n例如：空格, 缩进，标点符号等\n**注意**：\n\\b检测时不看，先匹配，匹配好在加上看\n\\b不是匹配符号，不会匹配出一个字符，只是检测所在的位置是否满足要求。\n​    \n```\n# 匹配一个字符串的内容是'how are',并且字符'a'的前面是单词边界\nre_str = r'how \\bare'\nresult = fullmatch(re_str, 'how are')\nprint(result)\n```\n###6 ^(检测是否以指定的字符串开头)\n```\n# 匹配一个字符串是三个数字字符，并且第一个字符所在的位置是字符串开头\nre_str = r'^\\d\\d\\d'\nresult = search(re_str, '333dfd333dffeee444d')\nprint(result)\n```\n###7 $ (检测是否以指定的字符串结尾）\n```\n# 匹配一个字符串是三个数字字符，并且最后一个字符的后面是字符串结尾\nre_str = r'\\d\\d\\d$'\nresult = search(re_str, '333fdf33332')\nprint(result)\n```\n###8 \\B(检测非单词边界）\n```\nre_str = r'dff\\B33'\nresult = fullmatch(re_str, 'dff33')\nprint(result)\n```\n###9 \\W(匹配非数字字母下划线)\n###10 \\S(非空白字符）\n###11 \\D(匹配非数字字符）\n\n###12 [字符集]（匹配字符集中的任意一个字符）\n\n**注意**：一个[]代表一个字符\n    a.普通用法\n    [字符集] - 匹配字符集中的任意一个字符\n    b.表示范围\n    [字符1-字符2] - 表示匹配字符1到字符2中所有的字符，要求字符1的编码值要小于字符2的编码值 \n    [1-9] - 数字1-9\n    [A-Z] - 大写字母\n    [a-z] - 小写字母\n    [a-zA-Z] - 所有字母\n    [a-zA-Z\\d_] - 数字字母下划线\n```\n# 匹配一个字符串有4个字符，第一个是a或者b或者c.后边是123\nre_str = r'[abc]123'\nresult = fullmatch(re_str, 'b123')\nprint(result)\n\n# 匹配一个字符串有4个字符，第一个是数字1-9中的任意一个，最后一个\n# 是任意小写字母，中间两个是任意数字\nre_str = r'[1-9]\\d\\d[a-z]'\nresult = fullmatch(re_str, '323d')\nprint(result)\n\nre_str = r'[a-zA-Z\\d_]'\nresult = fullmatch(re_str, 'a')\nprint(result)\n```\n###13 [^字符集]（匹配没有在字符集中的其他任意字符）\n**注意**：\n^放在[]的最前面，才表示匹配不在字符集中的其他任意字符\n ^不放在[]最前面，就表示字符本身\n```\n# 匹配一个字符串，第一个字符只要不是abc中的一个，其他都可以，后面是123\nre_str = r'[^abc]123'\nresult = fullmatch(re_str, 'h123')\nprint(result)\n\n# 第一个字符是1-9中的一个或者^\nre_str = r'[1-9^]123'\nresult = fullmatch(re_str, '^123')\nprint(result)\n```\n###14 转义符号\n正则中可以通过在特殊符号前加\\来对符号进行转义\n\\\\\\\\\n\\\\\\.\n\\\\\\^\nb.除了在中括号中有特殊意义的符号，其他符号放在[]中也是表示符号本身\n\\- 想要表示本身，就不要放在两个字符之间\n^ 想要表示本身，就不要放在字符集开头\n[] 表示中括号本身，加\\\\\n**注意**：\n转义字符是字符串中的概念    \n转义符号是正则表达式的概念\n```\nre_str = r'\\d\\d\\.\\d\\d\\\\b'\nprint(fullmatch(re_str, '34.23\\\\b'))\nprint(fullmatch(r'[-19.\\]*^]', '*'))\n```\n# 二、匹配次数\n###1 *(匹配0次或多次）\n\n字符* - 指定的字符出现0次或者多次（字符可以是正则符号，也可以是普通字符）\na* - a出现0次或者多次\n\\d* - 任意数字出现0次或者多次\n[a-z]* - 任意小写字母出现0次或者多次\n```\n# 123前有0个或者多个字符，并且每个是a\nre_str = r'[a-z]*123'\nprint(re.fullmatch(re_str, '123'))\nprint(re.fullmatch(re_str, 'a123'))\n\n# 123前有0个或者多个字符，并且每个是数字字符\nre_str = r'\\d*123'\nprint(re.fullmatch(re_str, '123'))\nprint(re.fullmatch(re_str, '1123'))\n```\n###2 +(一次或者多次）\n```\nre_str = r'[a-z]+123'\nprint(re.fullmatch(re_str, 'aaa123'))\nprint(re.fullmatch(re_str, 'a123'))\n```\n###3 ?(0次或1次）\n```\nre_str = r'\\+?abc'\nprint(re.fullmatch(re_str, 'abc'))\nprint(re.fullmatch(re_str, '+abc'))\n\n# 练习：写一个正则表达式能够匹配所有的整数字符串\nre_str = r'[+-]?[1-9]\\d*|0'\nprint(re.fullmatch(re_str, '0'))\n```\n###4 {}(匹配次数）\n- {m,n} - 匹配m到n次（最少m次，最多n次）\n- {m,} - 至少m次\n- {，n} - 最多n次\n- {n} - n次\n```\nprint(re.fullmatch(r'a{2,5}', 'aaa'))\n# 密码：6-16，只能是数字字母\nprint(re.fullmatch(r'[a-zA-Z\\d]{6,16}', '222222'))\n```\n# 三、分支和分组\n###1 |(分支）\n\n表达式1|表达式2|表达式3\n先用表达式1进行匹配，匹配成功就成功，不成功就使用表达式2区匹配，如果表达式2\n也不成功，就使用表达式3去匹配（三个表达式只要有一个能够匹配成功就成功，否则就失败）\n```\nimport re\n\nre_str = r'[a-z]{3}|\\d{3}'\nprint(re.fullmatch(re_str, '384'))\n```\n###2 （）（分组）\n**a.分组**\n将括号里的内容看做一个整体\n\n**b.分组重复**\n在有分组的正则表达式中，可以在分组的后面通过   **\\数字**   来重复前面第几\n个分组匹配到的结果\n**注意**：如果前面没有括号，程序会报错\n```\nre_str = r'abc([a-z]{3}|\\d{3})'\nprint(re.fullmatch(re_str, 'abc384'))\n\nre_str = r'(abc){2}'\nprint(re.fullmatch(re_str, 'abcabc'))\n\nre_str = r'(\\d{2})a(\\d{3})bc\\2'\nprint(re.fullmatch(re_str, '34a909bc909'))\n```\n**c.捕获**\n**步骤**：\n**第一步**：先用整个正则表达式去匹配字符串，匹配成功\n**第二步**：再获取部分数据（括号里的数据）\n```\nre_str = r'(\\d\\d)\\.[a-z]{2,3}'\nresult = re.findall(re_str, 's56fjh22.huk--=334.ko\";sss;ss94.al////')\nprint(result)  # ['22', '34', '94']\n```\n# 四、非贪婪\n**定义**：在正则中控制匹配**不确定次数**的符号后边可以加?,来表示尽可能少的匹配\n**注意**：尽可能少是在**能够匹配到**的前提下尽可能少\n**贪婪**：尽可能匹配多的次数\n```\nprint(re.search(r'\\d+', 'abchs3482==sdd'))  # <_sre.SRE_Match object; span=(5, 9), match='3482'>\nprint(re.search(r'\\d+?', 'abchs3482==sdd'))  # <_sre.SRE_Match object; span=(5, 6), match='3'>\n```\n\n# 五、re模块相关方法\n### 1. compile(正则表达式)\n**目的**：将正则表达式转换成正则对象\n**特点**：编译后可以直接通过对象调用相关的对象方法 \n```\nre_object = re.compile(r'\\d{3}')\nre_object.fullmatch('432')\n```\n### 2. fullmatch(正则表达式, 字符串)\n**目的**：让字符串和正则表达式完全匹配，匹配成功返回匹配对象，匹配失败返回None\n####应用：检测字符串内容是否符合要求,例如：检测账号、密码、判断手机号、身份证号等是否合法\n```\nresult = re.fullmatch(r'(\\d{3})=([a-z]+)', '342=sjaks')\nprint(result)  # <_sre.SRE_Match object; span=(0, 9), match='342=sjaks'>\n```\n### 匹配对象\n####a.span()\n**功能**：匹配到的字符串在原字符串中的下标范围(结果是元素)\n```\nresult = re.fullmatch(r'(\\d{3})=([a-z]+)', '342=sjaks')\nprint(result.span())   # 获取整个正则表达式匹配到的内容的范围\n# start, end = result.span()\n# print(start, end)\n\nprint(result.span(1))  # 获取正则表达式中第一个分组匹配到的内容的范围\nprint(result.span(2))  # 获取正则表达式中第二个分组匹配到的内容的范围\n```\n####b. start()和end()\n**目的**：匹配到的字符串在原字符串中的**开始下标**和**结束下标**\n```\nprint('====start名，end====')\nprint(result.start(), result.end())\nprint(result.start(1), result.start(2))\n```\n####c. group()\n**目的**：获取匹配到的字符串(结果是字符串)\n```\nprint(result.group())   # 获取整个正则匹配到的字符串\nprint(result.group(1))  # 获取第一个分组匹配到的字符串\nprint(result.group(2))  # 获取第二个分组匹配到的字符串\nprint(result.groups())  # 同时获取所有分组匹配到的字符串(结果是元祖)\n```\n####d. string\n**目的**：获取原字符串\n  ```\nprint(result.string)\n  ```\n###3.match(正则表达式,字符串)\n**目的**：让字符串的开头和正则表达式进行匹配，匹配成功结果是匹配对象，否则是None\n```\nprint(re.match(r'\\D\\d', 's3skjkjks'))\n```\n###4.search(正则表达式,字符串)\n**目的**：在字符串中去匹配出第一个符合正则表达式的子串, 匹配成功结果是匹配对象,否则是None\n```\nprint(re.search(r'[\\u4e00-\\u9fa5]{3}', 'hsj后视ss023你好吗,skss上的30s'))\n```\n###5.split(正则表达式,字符串)\n**目的**：将字符串按照满足正则要求的子串进行切割(返回值是列表)\n```\nprint(re.split(r'\\d+', 'asj38jkas0093kjsj78kajs89==asdfj3jkkss'))\n```\n###6.sub(正则表达式,字符串1, 字符串2)\n**目的**：将字符串2中能够和正则表达式匹配的子串替换成字符串1，产生一个新的字符串\n```\nprint(re.sub(r'\\d+', '*', 'jsj93jksj93j5a45s3s是看得见'))\nprint(re.sub(r'傻逼|[傻艹草操]', '*', '你是傻逼吗？艹!'))\n```\n###7.findall(正则表达式, 字符串)\n**目的**：在字符串中获取满足正则表达式的所有的子串(结果是列表)\n**注意**: 如果正则表达式中有分组，直接获取到的是分组中匹配到的内容; 如果有多个分组列表中的元素是元祖\n```\nprint(re.findall(r'\\d+[a-z]', 'sjh83bkss93ksjhf9922'))\nprint(re.findall(r'(\\d+)[a-z]', 'sjh83bkss93=sjhf9922'))\nprint(re.findall(r'abc(\\d{2}|[A-Z]{2})', '=-aaabc73kkjabcKJL=3'))\n```\n###8.finditer(正则表达式, 字符串)\n**目的**：在字符串中获取满足正则表达式的所有的子串(结果是迭代器,元素是匹配对象)\n```\nresult = re.finditer(r'(\\d+)[a-z]', 'sj8khk83jks数据310sj=sd')\nprint(result)\nprint(next(result).group())\n```\n###9.re.I\n**功能**：忽略大小写\n**注意**：匹配的约束条件是放在函数的flags参数中的\n```\nprint(re.fullmatch(r'[a-z]{2}', 'SA', re.I))\n```","tags":["语言学习"],"categories":["python编程"]},{"title":"类和对象（提升）","url":"/2019/02/24/python类和对象（提升）/","content":"本文介绍了pyhton中如何进行面向对象编程中的提升知识部分\n<!-- more -->\n\n# 一、私有化\n**1.属性和方法访问权限**\n**私有的**：在类的外部不可以使用，也不可以继承\n**保护的**：在类的外部不可以使用，可以继承\n**公开的**：类的外部可以使用，可以被继承\n\n**2.python中属性和方法的访问权限**\n只有公开，但是提供了另一种私有化的方式\n\n**2.如何私有化**\n**定义**：在属性或者方法前加\\_\\_,属性或者方法就会变为私有化\n**特点**：私有的属性和方法只能在类的内部使用，不能在类的外面使用\n**注意**：\n输入时，只能在前面加\\_\\_，不能在后面加\\_\\_\n\n类的字段：可以在内部用，不能在外部用\n对象属性：可以在内部用，不能在外部用\n对象方法：可以在内部用，不能在外部用\n类方法：可以在内部用，不能在外部用\n静态方法：可以在内部用，不能在外部用\n\n**3.python私有化原理**\n在私有化的属性和方法前再加\"\\_类名\"去保存属性和方法\n外部想调用可以通过\"\\_类名\\_\\_（属性或者方法）\"\n```\nclass Person:\n    num = 61\n    __num2 = 62\n\n    def __init__(self, name='张三', age=0):\n        self.name = name\n        self.age = age\n        self.__sex = '男'\n\n    def eat(self, food):\n        print(self.__sex)\n        print(self.name, food)\n        self.__run()\n\n    def __run(self):\n        print('%s在跑步' % self.name)\n\n    @classmethod\n    def show_num(cls):\n        print('人类的数量:%d, %d' % (cls.num, cls.__num2))\n\n    @staticmethod\n    def func1():\n        print('人类要保护大自然!')\np1 = Person()\nprint(Person.num)  # 61\n# print(Person.__num2)  # AttributeError: type object 'Person' has no attribute '__num2'\nprint(p1.name)  # 61\n# print(p1.__sex)  # AttributeError: 'Person' object has no attribute '__sex'\nprint(p1._Person__sex)  # 男\np1.eat('面条')  # 张三 面条\n# p1.run()  # AttributeError: 'Person' object has no attribute 'run'\nPerson.show_num()  # 人类的数量:61, 62\nPerson.func1()  # 人类要保护大自然!\nprint(p1.__dict__)  # {'name': '张三', 'age': 0, '_Person__sex': '男'}\n```\n# 二、getter和setter\n**1.应用场景**\n**getter**：**获取对象属性的值**(调用时)之前想要做点别的事情,就给这个属性添加getter\n**setter**：**给对象属性赋值**（传参时）之前想要做点别的事情，就给这个属性添加setter\n\n**2.getter**\n**第一步**：声明属性的时候，在属性名前加_\n**第二步**：声明一个函数,函数名前加@property\n**要求**：只有self参数，必须要有函数返回值\n**返回值**：获取属性拿到的值\n@property\ndef 去掉_的属性名（self):\n    &emsp;做点别的事情\n    &emsp;（重点）返回属性的值\n**第三步**：在类的外部通过对象.去掉_的属性去获取相关的属性\n\n**3.setter**\n**要求**：想要添加setter，必须添加getter为前提\n**第一步**：声明属性的时候，在属性名前加_\n**第二步**：声明函数\n**要求**：函数除了self以外还需要一个参数，没有返回值，**参数代表给属性赋的值**\n@去掉_的属性名.setter\ndef 去掉_的属性名(self, 参数）：\n   &emsp;  做点别的事情\n    &emsp; 给属性赋值\n**第三步**：在类的外部通过**对象.去掉_的属性**去给相关属性赋值  \n```\nclass Person:\n    def __init__(self, name=''):\n        self.name = name\n        self._age = 0\n        self._week = 7    # 属性名前有_，使用属性的时候不要直接用\n\n    @property\n    def age(self):\n        return self._age\n\n    # 给age添加setter\n    @age.setter\n    def age(self, value):\n        if not isinstance(value, int):\n            raise ValueError\n        if not (0 <= value <= 150):\n            raise ValueError\n        self._age = value\n\n    # 给week添加getter\n    @property\n    def week(self):\n        if self._week < 7:\n            return '星期%d' % self._week\n        else:\n            return '星期天'\n\n    @week.setter\n    def week(self, value):\n        self._week = value\n\n\ndef main():\n    p1 = Person('小明')\n\n    # 通过不带_的属性给属性赋值实质是在调用setter对应的函数\n    p1.age = 45\n    p1.age = 3\n\n    # 这个操作实质是在调用week函数\n    # 通过不带_的属性来获取属性的值实质是在调用getter对应的函数\n    print(p1.week)\n    p1.week = 4\n```\n# 三、继承\n**1.什么是继承**\n**定义**：一个类继承另外一个类，其中会产生继承者和被继承者，这里的继承者叫子类，被继承者叫父类/超类\n\n\n**2.怎么继承**\nclass 类名（父类列表）：\n    &emsp;类的内容\n\n**说明**：\n**a.**python中所有的类都是**直接或者间接**继承基类object\nclass 类名：   ==> class 类名（object):\n**b.**python中的继承支持**多继承**， 父类列表中可以有多个类，多个类之间用逗号隔开\n\n**3.继承哪些东西**:\n所有的属性和方法\n**注意**：**a.**\\_\\_slots\\_\\_的值继承后没有约束效果\n**b.**在类中给\\_\\_slots\\_\\_赋值后，当前类的对象不能使用\\_\\_dict\\_\\_，但是子类可以使用，只是\\_\\_dict\\_\\_中没有从父类继承下来的对象属性，只有子类中添加的对象属性\n**c.**如果父类没有给\\_\\_slots\\_\\_赋值，直接给子类的\\_\\_slots\\_\\_，无效\n```\nclass Person(object):\n    num = 61\n    # __slots__ = ('name', 'age', 'sex', '__face')\n\n    def __init__(self,name='zhangsan', age=0, sex='男'):\n        self.name = name\n        self.age = age\n        self.sex = sex\n        self.__face = 60\n\n    def eat(self, food):\n        print('%s在吃%s' % (self.name, food))\n\n    @classmethod\n    def show_num(cls):\n        print('人类的数量:%d' % cls.num)\n\nprint(Student.num)  # 61\nstu = Student()\nprint(stu.name)  # zhangsan\n# print(stu.__dict__)\n# print(stu.__face)\nstu.eat('海底捞')  # zhangsan\nStudent.show_num()  # 人类的数量:61\np1 = Person()\n# print(p1.__dict__)\n# p1.score = 100\nstu.score = 100\nprint(stu.score)  # 100\nprint(stu.__dict__)  # {'name': 'zhangsan', 'age': 0, 'sex': '男', '_Person__face': 60, 'score': 100}\n```\n# 四、添加方法\n**1.添加新的方法**\n**怎么声明**：直接在子类中声明新的方法\n\n**2.重写方法**\n**完全重写**：在子类中重新声明实现父类的方法\n**部分重写**:保留父类的功能，在子类中添加新的功能\n**如何操作**：在子类方法中通过\"**super().**\"的方式调用父类方法\n\n**3.类中函数的调用过程**\n回到函数声明的位置：先看当前类中是否有方法，如果有，就直接调用当前类中的方法，没有就去看父类中是否有方法，如果父类也没有，就去找父类的父类，直到找到object类，如果还没有，就报错\n- 会一直往上找，不会往下找\n```\nclass Person(object):\n    num = 61\n\n    def __init__(self,name='zhangsan', age=0, sex='男'):\n        self.name = name\n        self.age = age\n        self.sex = sex\n        self.__face = 60\n\n    def eat(self, food):\n        print('%s在吃%s' % (self.name, food))\n\n    @classmethod\n    def show_num(cls):\n        print('人类的数量:%d' % cls.num)\n\n\nclass Student(Person):\n    num2 = 100\n\n    # 添加方法\n    def study(self):\n        print('%s在写代码' % self.name)\n\n    @classmethod\n    def func1(cls):\n        print('我是学生类的类方法')\n\n    @staticmethod\n    def func2():\n        print('我是学生类的静态方法')\n\n    @classmethod\n    def show_num(cls):\n        print('学生数量:%d' % cls.num)\n\n    def eat(self, food):\n        super().eat(food)\n        print('吃饱了')\n\np1 = Person('张三')\nstu1 = Student('李四')\nstu1.study()  # 李四在写代码\nStudent.func1()  # 我是学生类的类方法\n# 子类可以使用父类的属性和方法，但是父类不能使用子类中添加的属性和方法\n# Person.func2()\nPerson.show_num()  # 61\nStudent.show_num()  # 61\nstu1.eat('包子')  # 李四在吃包子 吃饱了\nprint(Student.num2)  # 100\n```\n# 五、添加属性\n**1.添加类的字段**\n**如何声明**：直接在子类中声明新的字段\n**2.添加对象属性**\n**本质**：对象属性是通过继承init方法继承下来的\n```\nclass Animal:\n    def __init__(self, age):\n        self.age = age\n        self.color = '灰色'\n\nclass Dog(Animal):\n    def __init__(self, name, age):\n        # 调用父类的init方法来继承父类的对象属性\n        # 父类的init方法需要传参的话，需要在init加参数\n        super().__init__(age)\n        self.name = name\n# 情景1：直接继承不添加\n# dog1 = Dog()\n# print(dog1.age)\ndog2 = Dog('才次', 18)\nprint(dog2.name)  # 才次\n# print(dog2.age)  # AttributeError: 'Dog' object has no attribute 'age'\np1 = Student(23)\nprint(p1.sex)  # 男\n```\n###补充：多继承\n多继承:\nclass 类名(父类1, 父类2,....):\n    &emsp;类的内容\n**特点**：\n1.方法：多个父类都可以继承\n2.属性：类的字段都可以继承，对象属性只能继承第一个父类\n```\nclass Animal:\n    def __init__(self, name=''):\n        self.name = name\n        self.age = 0\n        self.color = '黑色'\n\n    def fun1(self):\n        print('动物中的对象方法')\n\n\nclass Fly:\n    def __init__(self):\n        self.height = 1000\n\n    def func2(self):\n        print('飞行类的对象方法')\n\n\nclass Bird(Animal, Fly):\n    pass\n\ndef main():\n    b1 = Bird()\n    b1.fun1()  # 动物中的对象方法\n    b1.func2()  # 动物中的对象方法\n    print(b1.name, b1.age)\n    # print(b1.height)  # 'Bird' object has no attribute 'height'\n```\n# 六、运算符重载\n**1.什么是运算符重载**\n**目的**：通过实现类中相应的**魔法方法**来让当前类的对象支持相应的运算符\n\n**注意**：python中所有的数据类型都是类，所有的数据都是对象\n\n**步骤**：\n**第一步**：找到运算符相应的魔法方法\n**如何找**：通过一个能支持的表达式，按ctrl键来查看\n**第二步**：在类中重新声明，重写相应的魔法方法\n```\nclass Student(object):\n    def __init__(self, name='', age=0, score=0):\n        self.name = name\n        self.age = age\n        self.score = score\n\n    def __repr__(self):\n        return '<' + str(self.__dict__)[1:-1] + '>'\n\n    # 实现'+'对应的魔法方法，让两个学生对象能够进行+操作\n    # self和other的关系： self+other    ==> self.__add__(other)\n    # 返回值就是运算结果\n    def __add__(self, other):\n        # a.支持Student+Student:\n        return self.age + other.age\n        # b.支持Student+数字\n        # return self.age + other\n\n    # self * other\n    # 将other当成数字\n    def __mul__(self, other):\n        return self.name * other\n\n    # self和other都是学生对象\n    # 注意：大于和小于运算符是需要重载一个就行\n    def __gt__(self, other):\n        return self.score > other.score\n\nstu1 = Student('小花', 18, 90)\nstu2 = Student('夏明', 20, 78)\nstu3 = Student('小红', 17, 99)\n\n# 所有类的对象都支持'=='和'!='运算\nprint(stu1 == stu2)  # False\n\nprint(stu1 + stu2)     # print(stu1.__add__(stu2))  # 38\n\n# print(stu1 > stu2)\n# print(stu1 < stu2)\n\nprint(stu1 * 2)   # print(stu1.__mul__(2))  # 小花小花\n\nstudents = [stu1, stu2, stu3]\nprint(students)\nstudents.sort()\nprint(students)\n```\n# 七、python内存管理机制\n**1.数据的存储**\n内存分为**栈**区间和**堆**区间\n底层：\n**栈区间内存**：系统自动释放和开辟\n**堆区间内存**：由程序员通过代码开辟和释放\n**代码**：手写函数melloc\npython：\n**栈区间内存**:系统自动开辟和释放\n**堆区间内存**:内存管理也已封装好，无需程序员在写代码手动释放\npython:\n**栈区间**：变量本身，函数调用过程(压栈)\n**堆区间**：所有的对象（python中一切数据皆对象）\n**变量赋值过程**：\n**堆区间**：开辟空间储存数据，产生一个地址\n**栈区间**：变量储存数据的地址\n**特殊情况**：数字和字符串\n**堆区间**：赋值前先检测之前是否存过这个数据\n如果有，直接使用之前的地址，反之，开辟空间\n​             \n**2.内存释放（垃圾回收机制）**\n**引用计数**：每个对象都有一个属性叫引用计数，用来表示当前对象的引用计数\n**如何判断一个对象是否销毁**\n**依据**：看一个对象的引用计数是否为0，为0就\n销毁，不为0就不销毁\n**getrefcount函数**\n**用法**：getrefcount（对象）\n **目的**：获取对象的引用计数\n**如何增加引用计数**：\n使用不同变量存地址（让多个变量指向一个地址）\n**如何减少引用计数**：\n1.让变量指向其他地址（重新赋值）\n2.直接删除变量","tags":["语言学习"],"categories":["python编程"]},{"title":"类和对象（基础）","url":"/2019/02/24/python类和对象（基础）/","content":"本文介绍了pyhton中如何进行面向过程编程的基础知识\n<!-- more -->\n# 一、编程思想\n**1.面向过程**\n**做法**：遇到问题直接将（**逻辑和算法**）转换为代码\n**使用工具**：逻辑和算法\n**2.面向函数式编程**\n**做法**：遇到问题就想找一个、写一个相应功能的函数\n**使用工具**：函数\n**3.面向对象**\n**做法**：遇到问题就考虑可不可以有一个类来提供相应的功能和数据\n**使用工具**：类和对象\n类中的属性 - 对数据的封装\n类中的函数 - 对功能的封装\n\n# 二、类和对象基础\n\n**1.类和对象的概念**\n**a.什么是类**：\n**概念**：拥有**相同功能**和相同**属性**的对象的集合（抽象）\n**b.什么是对象**\n**概念**：类的实例（具体）\n\n**2.类的声明**\n**内容**：功能（函数）和属性（变量/属性）\n**a.语法**\nclass 类名（父类）：\n    &emsp;类的内容\n\n**b.说明**\n**class**: 声明类的关键字\n**类名**：标识符，并且不能是关键字\n **规范**：采用大驼峰式命名\n**：**：规定写法\n**类的内容**：累的方法、属性和说明文档\n**方法**：声明在类中的函数\n**属性**：声明在类中的变量\n\n**3.如何声明对象**\n**方法**：类名（）\n**说明**：创建指定类的对象并且返回\n\n**注意**：同一个类可以创建多个对象\n示例：\n```\n# 声明一个人类\nclass Person:\n    \"\"\"类的说明文档\"\"\"\n    num = 61  # 类中的属性\n\n    # 类中的方法\n    def eat(self):\n        print('人在吃饭！！')\n    # 创建Person类的对象；p1就是对象\n    p1 = Person()\n    print(p1)\n\n    # 同一个类可以创建多个对象\n    p2 = Person()\n    print(p2)\n```\n# 三、对象方法\n***声明类的伪代码***\nclass 类名：\n   &emsp; 类中的属性\n   &emsp; 类中的方法\n\n**1.什么是类中的方法**\n声明在类中的函数就是方法\n**分类**：\n**指导思想**：怎么声明，怎么调用，特点\n**a.对象方法**：\n**声明**：直接声明在类中\n**特点**：有默认参数self,通过对象调用可以不用传参\n**调用**：对象.对象方法名\n**当前对象**：调用当前方法的对象（谁调用对象方法**self**就是谁）\n**注意**：当前类的对象能做的事情，self都能做\n\n**b.类方法**：\n**声明**：声明函数前加@classmethod\n**特点**：有默认参数cls,通过类调用时，可以不用传参\n**调用**：类名.类方法名\n**当前对象**：调用当前方法的类（谁调用类方法**cls*就是谁）\n**注意**：当前类能做的事情，cls都能做\n**c.静态方法**：\n**声明**：声明函数前加@staticmethod\n**特点**：没有默认参数\n**调用**：类名.静态方法名\n\n####实际运用\n类中怎么选择使用哪种方法：\n**对象方法**：实现函数功能需要使用对象属性\n**类方法**：\n1.不需要使用对象属性为前提\n2.需要使用类的字段\n**静态方法**：对象属性和类的字段皆不需要\n```\nclass Person:\n    # 类的字段\n    num = 23\n\n    # 对象方法：用到对象属性name\n    def __init__(self):\n        self.name = '张三'\n\n    # 对象属性和类的字段都有，选择对象方法\n    def func4(self):\n        # 通过self.name来获取对象的姓名\n        print('%s对应的对象' % self.name)\n        # 通过 类名.类的字段 来使用类的字段\n        print('人类的数量%d亿' % Person.num)\n\n    # 静态方法：对象属性和类的字段都不需要\n    @staticmethod\n    def func3():\n\n        print('我是静态方法')\n    # 类方法：需要使用类的字段\n    @classmethod\n    def func1(cls):\n        # 类能做的事情，cls都能做\n        p1 = cls()  # 用cls创建对象\n        print(p1)\n        cls.num = 100  # 用cls来使用类的字段\n        print(cls)\n        print('这是一个类方法')\n```\n# 四、init方法和构造方法\n**1.init方法**：__init__\n**定义**：类中的一个特殊的对象方法\n**功能**：专门用来对象创建的对象进行初始化\n**过程**：当通过类创建对象时，系统就会自动**调用init方法**\n\n**2.构造方法**：\n**定义**：函数名和类名一样的函数\n**功能**：专门用来创建对象\n**原理**：\n1.声明类时，系统自动创建类对应的构造方法\n**内部如何实现**\n2.创建对象时，内部会先在内部开辟空间保存对象；然后用创建的对象去调用__init__方法，用来对对象进行初始化，__init__方法结束后，返回对象\n\n\ndef Person(*args, **kwargs):\n   &emsp; 对象 = 创建对象\n    &emsp; 对象.__init__（*args, **kwargs）\n   &emsp;  return 对象\n\n**注意**：如果类的__init__方法除了self以外，还有**其他参数**，那么我们在创建对象的时候，需要通过给构造方法传参，来间接给__init__方法参数赋值\n\n**魔法方法**：类中以\\_\\_开头并且以\\_\\_结尾的方法\n**特点**：创建对象时，无需主动调用，系统会自动调用\n```\n# =========构造方法和init方法的原理=========\n# 构造方法的伪代码\ndef my_init(x, y, z):\n    print(x, y, z)\n    print('my_init')\n\ndef my_Dog(*args, **kwargs):\n    my_init(*args, **kwargs)\n\nmy_Dog(10, 29, 39)\n```\n# 五、类中属性\n\n**分类**：类的字段和对象属性\n**a.对象属性**：\n**特点**：属性的值会因为对象不同而不同\n**声明**：init对象方法中\n**方式**：self.属性 = 值（这里属性就是对象属性）\n**调用**：对象.属性\n\n**b.类的字段**\n**特点**：属性的值不会因为对象的不同而不同\n**声明**：在类中，但在函数外\n**方式**：类的字段名 = 值\n**调用**：类名.类的字段名\n```\nclass Person:\n    # 类的字段\n    num = 33\n\n    # 在init方法中声明对象属性\n    def __init__(self, name1='', age1=0):\n        self.name = name1\n        self.age = age1\n```\n###对象属性的增删改查\n**1.查（获取对象属性）**\n**方法一**：\n对象.属性\n**功能**：获取指定对象的指定属性值;属性不存在报错 \n**错误类型**：AttributeError 属性错误\n```\nclass Person:\n    def __init__(self, name='', age=0, sex='女'):\n        self.name = name\n        self.age = age\n        self.sex = sex\nprint(p1.name)\n# print(p1.name1)  # AttributeError 属性错误\n```\n **方法二**：\ngetattr(对象，属性名）\n**功能**：获取指定对象的指定属性值;\n **特点**：属性不存在，给默认值赋值，不会报错，并且将默认值作为结果返回\n**应用场景**：不确定属性值是否存在时使用\n```\nclass Person:\n    def __init__(self, name='', age=0, sex='女'):\n        self.name = name\n        self.age = age\n        self.sex = sex\n# 属性不确定，可以使用getattr\n    # attr = input('属性：')\n    # print(getattr(p1, attr))\nprint(getattr(p1, 'name', None))\nprint(getattr(p1, 'name1', None))\n```\n**2.增（添加属性）/ 改（修改属性的值）**\n**方法一**：\n对象.属性 = 值\n **功能**：\n1.属性存在，修改属性值\n2.属性不存在，添加属性\n**方法二**：\n setattr(对象，属性名，值）\n**功能**：\n1.属性存在，修改属性值\n2.属性不存在，添加属性\n```\nclass Person:\n    def __init__(self, name='', age=0, sex='女'):\n        self.name = name\n        self.age = age\n        self.sex = sex\n# 修改属性\np1.name = '啊帅'\nprint(p1.name)\n# 添加属性\np1.height = 180\nprint(p1.height)\n\n# 修改属性\nsetattr(p1, 'age', 300)\nprint(p1.age)\n# 添加属性\nsetattr(p1, 'weight', 200)\nprint(p1.weight)\n```\n**3.删（删除属性）**\n**方法一**：\n del 对象.属性\n**功能**：删除对象属性\n**方法二**：\ndelattr(对象，属性名）\n**输入**：2个，对象、属性名\n**功能**：删除对象属性\n```\nclass Person:\n    def __init__(self, name='', age=0, sex='女'):\n        self.name = name\n        self.age = age\n        self.sex = sex\ndel p1.sex\n# print(p1.sex)  # AttributeError: 'Person' object has no attribute 'sex'\ndelattr(p1, 'age')\n# print(p1.age)  # AttributeError: 'Person' object has no attribute 'age'\n```\n**注意**：对象属性的操作只针对于当前对象，不会影响其他对象\n\n#####补充：\\_\\_slots\\_\\_魔法方法\n**功能**：约束当前对象能够拥有的属性个数\n**特点**：init方法里对象属性的个数少于或者等于slots方法的个数\n```\nclass Dog:\n    # __slots__魔法\n    # 约束当前对象最多能拥有的那个属性\n    __slots__ = ('name', 'color', 'sex', 'age')  # 下边声明的属性比这里少就行\n\n    def __init__(self, name= '', color='黑色'):\n        self.name = name\n        self.color = color\ndog1 = Dog('大话', '黄色')\n    dog1.name = 'sss'\n    del dog1.color\n```\n# 六、内置属性\n**定义**：创建对象时，系统自动给我们添加的属性（通过继承得到）\n- **\\_\\_name\\_\\_**\n  **功能**：获取类的名字\n  **返回值**：字符串\n  **调用**：类名.\\_\\_name\\_\\_\n  **补充**：获取的字符串可以当做字符串来用\n```\nclass Person:\n    \"\"\"说明文档：人类\"\"\"\n    num = 62\n    def __init__(self, name='', age=0, sex='男'):\n        self.name = name\n        self.age = age\n        self.sex = sex\nprint(Person)  # <class '__main__.Person'>\nprint(Person.__name__, type(Person.__name__))  # Person <class 'str'>\n # 值是一个字符串，可以当做字符串来用\nprint(Person.__name__.upper())  # PERSON\n```\n- **\\_\\_class\\_\\_**\n  **功能**：获取对象对应的类\n  **返回值**：类名\n  **调用**：对象.\\_\\_class\\_\\_\n  **补充**：可以将获取的类名当做类来用\n```\nclass Person:\n    \"\"\"说明文档：人类\"\"\"\n    num = 62\n    def __init__(self, name='', age=0, sex='男'):\n        self.name = name\n        self.age = age\n        self.sex = sex\np1 = Person()\nmy_class = p1.__class__\nprint(my_class)  # <class '__main__.Person'>\n# 可以将my_class当做类使用\np2 = my_class('笑素数')\nprint(p2.num)  # 62\n```\n- **\\_\\_doc\\_\\_**\n  **功能**：获取类的说明文档\n  **返回值**：字符串\n  **调用**：类名.\\_\\_doc\\_\\_\n```\nclass Person:\n    \"\"\"说明文档：人类\"\"\"\n    num = 62\n    def __init__(self, name='', age=0, sex='男'):\n        self.name = name\n        self.age = age\n        self.sex = sex\nprint(Person.__doc__)  # 说明文档：人类\n# 获取p1对应的说明文档\np1 = Person()    \nprint(p1.__class__.__doc__)  # 说明文档：人类\n```\n- \\_\\_dict\\_\\_\n  **功能**：将对象属性转化为字典，属性作为key，值作为value\n  **返回值**：字典\n  **调用**：对象.\\_\\_dict\\_\\_\n#####坑：当给__slots__属性赋值后，对象的__dict__属性就不能使用\n```\nclass Person:\n    \"\"\"说明文档：人类\"\"\"\n    num = 62\n    def __init__(self, name='', age=0, sex='男'):\n        self.name = name\n        self.age = age\n        self.sex = sex\np1 = Person()  \nprint(p1.__dict__)  # {'name': '', 'age': 0, 'sex': '男'}\n```\n- **\\_\\_bases\\_\\_**\n  **功能**:获取当前类的父类\n  **返回值**：元祖\n  **调用**：类名.\\_\\_bases\\_\\_\n```\nclass Person:\n    \"\"\"说明文档：人类\"\"\"\n    num = 62\n    def __init__(self, name='', age=0, sex='男'):\n        self.name = name\n        self.age = age\n        self.sex = sex\nprint(Person.__bases__)  # (<class 'object'>,)\n```\n###补充：**\\_\\_repr\\_\\_**\n**原理**：当通过print打印一个对象的时候，实质是打印对象调用\\_\\_repr\\_\\_函数的返回值\n**功能**：定制对象的打印格式\n**返回值**：字符串\n**声明**：类中的对象魔法方法\n```\nclass Person:\n    \"\"\"说明文档：人类\"\"\"\n    num = 62\n    def __init__(self, name='', age=0, sex='男'):\n        self.name = name\n        self.age = age\n        self.sex = sex\n\n    def __repr__(self):\n    # 系统默认的打印格式\n    return '<%s.%s object at %s>' % (self.__class__.__module__, self.__class__.__name__, hex(id(self)))\n    return str(self.__dict__)[1:-1] + 'at' + hex(id(self))  # 定制\n```","tags":["语言学习"],"categories":["python编程"]},{"title":"异常捕获和json","url":"/2019/02/24/python异常捕获和json/","content":"本文介绍了pyhton中的json数据格式和异常捕获\n<!-- more -->\n\n#一、json\n**1.什么是json数据**\n**定义**：特定语法的数据格式\n\n**2.json数据的语法**\n**a.**一个json数据只能有一个数据（而且必须要有一个）\n**b.**这个数据的数据类型必须是json支持的数据类型\n\n**3.json支持的数据类型**\n\n**a.数字类型**:包含所有的数字，支持科学计数法\n**注意**：数字前不能加+号\n\n**b.字符串**：使用**双引号**括起来的数据\n\n**c.布尔**：true 和 false 两个值  \n**表示**：真 和 假\n\n**d.数组**：相当于python的列表，[]表示，多元素用逗号隔开；例如：['dff', 90, 'dfj']\n\n**e.字典**：相当于python的字典，{}表示，多个键值对逗号隔开，例如：{'a': 1, 'b': 2}\n\n**f.空值**：null， 相当于python中的None\n\n**4.python处理json数据**\npython中提供了json库，专门处理json数据\n**a.将json数据转换成python数据（通过爬虫获取别人提供的json数据，在python中处理）**\n1.转换方式\n| 类型   | json | python                    |\n| ---- | ---- | ------------------------- |\n| 数字   | int  | int/float                 |\n| 字符串  | str  | str，可能双引号会变成单引号           |\n| 布尔   | bool | bool（会将首字母变大写） True False |\n| 数组   | list | list                      |\n| 字典   | dict | dict                      |\n| 空值   | null | None                      |\n\n2.loads方法\n**loads(字符串， encoding='utf-8')**\n**功能**：将字符串中的json数据转换成对应的python数据\n**输入**：字符串，文字编码方式\n**输出**：python数据\n**注意**：这里的字符串**内容**必须是json支持的数据类型\n\n**b.将python数据转换成json数据（python写后台接口，将数据提供给客户端）**\n1.转换方式\n| 类型    | python     | 类型   | json                     |\n| ----- | ---------- | ---- | ------------------------ |\n| 数字    | int/float  | 数字   | int                      |\n| 字符串   | str        | 字符串  | str(单引号会转换为双引号）          |\n| 布尔    | bool       | 布尔   | True->true  False->false |\n| 元祖、列表 | list/tuple | 数组   | list                     |\n| 字典    | dict       | 字典   | dict                     |\n| 空值    | None       | 空值   | null                     |\n\n\n**注意**：集合（set)不能转换成json数据类型\n\n2.dumps(对象)\n**输入**：python数据\n**输出**：内容是json数据的字符串\n**注意**：返回值是字符串，并且字符串的**内容**是json数据\n\n\n**5.json文件处理**\n**什么是json文件**：严格来说，json文件是文件内容是json数据的文件\n\n**load(文件对象)**\n**功能**：将指定文件中的内容读出来，并且转换成pyhton对应的数据\n**输入**：json数据格式的文件\n**输出**：python对应的数据文件\n**注意**：这里涉及到**文件的读写**\n\n**dump(对象，文件对象)**\n**功能**：将指定对象转换成内容是json格式的字符串，然后写入指定的文件中\n**注意**：\n1.对象对应的类型必须是能够转换成json的数据类型\n2.这里涉及到**文件的读写**\n ```\nimport json\n ```\n\n#####1.json转python\n```\n    # 将json中的字符串转换成python数据\n    content = json.loads('\"abc\"', encoding='utf-8')\n    print(content, type(content))  # abc <class 'str'>\n    # 将json中的数字转换成python数据\n    content = json.loads('1111', encoding='utf-8')\n    print(content, type(content))  # 1111 <class 'int'>\n    # 将json中的字典转换成python数据\n    content = json.loads('{\"name\": \"张三\", \"age\": 18}', encoding='utf-8')\n    print(content, type(content))  # {'name': '张三', 'age': 18} <class 'dict'>\n    print(content['name'])  # 张三\n    # 练习\n    with open('data.json', encoding='utf-8') as f:\n        info = f.read()\n        dict1 = json.loads(info, encoding='utf-8')\n        for item in dict1['data']:\n            print(item['url'])\n```\n#####2.python转json\n```\n    result = json.dumps(100)\n    print(type(result), result)  # <class 'str'> 100\n\n    result = json.dumps('abc')\n    print(type(result), result)  # <class 'str'> \"abc\"\n\n    result = json.dumps('True')\n    print(type(result), result)  # <class 'str'> \"True\"\n\n    result = json.dumps([10, 'abc', True])\n    print(type(result), result)  # <class 'str'> [10, \"abc\", true]\n\n    result = json.dumps({'a': 10, 'b': True, 'c': None})\n    print(type(result), result)  # <class 'str'> {\"a\": 10, \"b\": true, \"c\": null}\n```\n\n#####3.读json文件\n```\n    with open('data.json', encoding='utf-8') as f:\n        result = json.load(f)  # 相当于 result = json.loads(f.read())\n        print(type(result), result['msg'])  # <class 'dict'> 成功!\n\n    all_student = [\n        {'name': '小明', 'age': 12, 'tel': '12333333'},\n        {'name': '大明', 'age': 12, 'tel': '12333333'},\n        {'name': '地明', 'age': 12, 'tel': '12333333'}\n    ]\n    with open('student.json', 'w', encoding='utf-8') as f:\n        json.dump(all_student, f)  # 相当于f.write(json.dumps(all_student))\n```\n#二、数据请求\n\n\npython中的数据请求（http请求），是第三方库requests来提供的\n\n**1.requests第三方库的使用**\nget/post都是发送请求获取**接口**提供的数据\n**get(url, params=None)**\n**url**:字符串，需要获取的数据的接口地址\n**params**:字典，参数列表（给服务器发送请求的时候，需要传给服务器的数据）\n\n##### 完整的接口：协议：//主机地址/路径？参数列表\n**主机地址**：互联网上唯一的计算机的ip\n**路径**：绝对路径\n**参数列表**：参数名1=值1 & 参数名2=值2\n\npost(url, params=None, json=None)（暂时不管）\n#####1发送请求，并且获取返回的数据\n   ```\nimport requests\n    # 1发送请求，并且获取返回的数据\n    # 服务器返回的数据叫响应\n    response = requests.get('https://www.apiopen.top/meituApi?page=1')\n    # response = requests.get('https://www.apiopen.top/meituApi', {'page': 1})\n    print(response)\n   ```\n\n #####2.从响应中获取数据\n```\n    # a.获取json数据\n    content_json = response.json()  # 自动将json数据转换成python对应的数据\n    print(content_json)\n    print(type(content_json))\n\n    # b.获取字符串数据\n    content_text = response.text\n    print(type(content_text))\n    print(content_text)\n\n    # c.获取二进制数据(获取原始数据）\n    content_bytes = response.content\n    print(content_bytes)\n\n    # 下载图片\n    response2 = requests.get('http://tx.haiqq.com/uploads/allimg/170506/0H92Q915-1.jpg')\n    with open('luffy.jpg', 'wb') as f:\n        f.write(response2.content)\n```\n#三、异常捕获\n\n**1.异常捕获**\n**本质**：让本该报错的代码不报错\n**使用场景**：知道某段代码会出现异常，但是又没有办法避免，同时不希望出现异常时程序崩溃，这时候就可以通过异常捕获，来让程序不崩溃，并且自行处理异常\n\n**2.异常捕获语法**\n**a.try-except**\n**功能**：可以捕获**所有类型**的异常，只要出现异常就捕获\ntry:\n  &emsp;  代码段1(可能会出现异常的代码段）\nexcept:\n  &emsp;   代码段2（出现异常后处理异常的代码段）\n**执行过程**：\n执行代码段1，如果执行代码段1中**出现异常**，程序不崩溃，**直接执行**代码段2,如果代码段1中未出现异常，就不执行代码段2，而是直接执行后面的其他语句\n\n**b.try-except 错误类型**\n **功能**：捕获指定类型的异常，只有代码段1中出现了指定类型的异常才捕获\ntry：\n  &emsp;   代码段1(可能会出现异常的代码段）\nexcept 错误类型：\n  &emsp;   代码段2（出现异常后处理异常的代码段）\n\n**c.try - except (错误类型1，错误类型2，....)**\n**功能**：同时捕获**多种指定异常**，做出**相同处理**\ntry:\n   &emsp;  代码段1(可能会出现异常的代码段）\nexcept (错误类型1，错误类型2，....):\n   &emsp;  代码段2（出现异常后处理异常的代码段）\n\n**d.try - except -错误类型1 - except 错误类型2...\n**功能**：同时捕获多种异常，可以对不同异常做不同处理\ntry:\n    &emsp; 代码段1(可能会出现异常的代码段）\nexcept 错误类型1：\n    &emsp; 代码段2\nexcept 错误类型2：\n    &emsp; 代码段3\n\n**3.抛出异常**（主动让程序崩溃）\n\n**raise 错误类型**\n**说明**：程序执行到此，如果没有满足要求，就抛出异常\n\n**注意**：错误类型可以是系统提供的错误类型，也可以是自定义错误类型（要求这个值是一个类，而且是exception的子类）\n#####a.try-except\n```\ndef method11():\n    while 1:\n        try:\n            # 正确就跳出循环，否则继续输入\n            number = int(input('输入数字：'))\n            print('输入正确', number)\n            break\n        except:\n            print('输入有误，继续输入')\n```\n #####c.try-except (错误类型1,错误类型2...)\n```\ndef method2():\n    try:\n        print({'a': 100}['b'])  # KeyError\n        print([1, 2, 3][4])  # IndexError\n    except (KeyError, IndexError):\n        print('出现异常')\n```\n #####b.try-except 错误类型\n```\ndef method2():\n    try:\n        print({'a': 100}['b'])  # KeyError\n        print([1, 2, 3][4])  # IndexError\n    except KeyError:\n        print('出现异常')\n```\n\n #####d.try - except -错误类型1 - except 错误类型2\n```\ndef method3():\n    try:\n        with open('abc.txt', 'r') as f:\n            print(f.read())\n        print({'a': 100}['b'])  # KeyError\n    except KeyError:\n        print('key不存在')\n    except FileNotFoundError:\n        print('文件不存在')\n```\n#####3.抛出异常\n```\ndef pu_func1(age:int):\n    if age > 18:\n        raise ValueError\n    print(age)  # 报错\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["语言学习"],"categories":["python编程"]},{"title":"生成式和文件操作","url":"/2019/02/24/python生成式和文件操作/","content":"本文介绍了pyhton中的生成式和文件操作相关的知识\n<!-- more -->\n\n#一、生成式\n**1.什么是生成式**\n生成式就是生成器的一种特殊写法\n**作用**：让变量去序列中取值，每取一个值，就将对应的表达式的值，作为生成器的元素\n**2.写法**\na.生成器 = （表达式 for 变量 in 序列）\n**展开**：\ndef 函数名（）：\n   &emsp; for 变量 in 序列：\n    &emsp;&emsp;    yield 表达式\nb.生成器 = （表达式 for 变量 in 序列 if 条件语句）\n**展开**：\ndef 函数名（）：\n &emsp;   for 变量 in 序列：\n     &emsp;&emsp;   if 条件语句：\n      &emsp;&emsp;&emsp;      yield 表达式\n```\ngen1 = (x*2 for x in 'abc123')\nprint(gen1)\nprint(next(gen1))\nprint(next(gen1))\nprint(next(gen1))\n\n# 这个是生成式(x*2 for x in 'abc123')展开成生成器的写法\ndef func1():\n    for x in 'abc123':\n        yield x*2\n\ngen2 = ((value, key) for key, value in {'name': 'xioaming', 'age': 10}.items())\nprint(next(gen2))  # ('xioaming', 'name')\nprint(next(gen2))  # (10, 'age')\n\n\ngen3 = (x for x in range(10) if x & 1)\nprint(next(gen3))  # 1\nprint(next(gen3))  # 3\n\n```\n**3.将迭代器和生成器转换成其他序列**\n\n```\n\ngen5 = (x.upper() for x in '12df43df3df5' if 'a' <= x <= 'z')\n\n\ndef list_pu(seq):\n    new = []\n    for x in seq:\n        new.append(x)\n    return new\n\n\nlist2 = list_pu(gen5)\nprint(list2)  # ['D', 'F', 'D', 'F', 'D', 'F']\n\n# [生成式] -> 直接将生成式对应的生成器转换为列表\nlist3 = [x.upper() for x in '12df43df3df5' if 'a' <= x <= 'z']\nprint(list3)  # ['D', 'F', 'D', 'F', 'D', 'F']\n```\n```\n# 交换字典的key和value的位置\ndict1 = {'a': 1, 'b': 2, 'c': 3}\nresult = dict((x, y) for y, x in dict1.items())\nprint(result)  # {1: 'a', 2: 'b', 3: 'c'}\n```\n\n#二、文件操作\n**1.数据本地化和数据持久化**\n**定义**：将数据以文件的形式存到计算机硬盘（程序中保存的数据，当程序运行结束会自动销毁）\n\n**2.如何数据持久化（如何将程序中数据和本地文件数据关联）**\n**文件读写操作**：\n**读**：获取文件中的内容\n**写**：将数据添加到文件中\n\n**a.文件操作的基本流程**：\n**第一步**：打开文件\n**第二步**：文件操作（读/写）\n**第三步**：关闭文件\n\n**3.打开文件**\n**open(file, mode='r', encoding=None)**\n**功能**：以指定的模式打开指定的文件，并且返回被打开的文件对象\n**说明**：\n**file**:**字符串**，需要打开的文件的路径\n        1.（了解）绝对路径：文件在电脑上的全路径\n        2.**（掌握）相对路径**：相对当前代码文件对应的目录来确定的路径\n                       **./**   &emsp; 当前py文件所在的目录\n                        **../**  &emsp; 代表当前目录的上层目录\n                        **.../**  &emsp;代表当前目录的上层目录的上层目录\n**mode**:**字符串**，文件的打开方式\n       **r**: 以**只读**的形式打开，文本  （默认值）\n        **w**: 以写的形式打开（覆盖），文本\n        **a**:以写的形式打开（追加），文本\n       **rb/br** : 以只读的形式打开，二进制\n        **wb/bw**: 以写的形式打开（覆盖），二进制\n        **+**:以读写的形式打开\n        **注意**：\n1.以**读的方式**打开一个不存在的文件，程序报错：FileNotFoundError\n2.以**写的方式**打开一个不存在的文件，不会报错，还会**自动创建**这个文件\n**encoding**:**字符串**，文字编码方式\n           &emsp;&emsp;&emsp;&emsp;&emsp; utf-8:支持所有的语言\n            &emsp;&emsp;&emsp;&emsp;&emsp;gbk:只支持英文\n            **注意**：\n            a.读和写对应的编码要保持一致\n            b.非文本文件不能设置编码encoding，例如：图片，视频，可执行文件等..\n            c.传值时，必须使用关键字参数\n            d.以二进制形式打开文件，不能设置encoding\n\n**4.操作文件**：\n**a.读操作**\n**文件对象.read()**\n**目的**：获取指定文件的内容\n**注意**：打开一次，只能读一次，再用需要再打开\n\n**5.关闭文件**\n**文件对象.close()**\n\n**6.文件操作的简写方式**\n**说明**：打开文件后，操作完成后会自动关闭文件\n#####with open(file, mode, encoding) as 文件对象：\n  &emsp;  文件操作代码\n\n#####a.打开文件\n\n***1.打开当前目录下的文件：文件名 或者 ./文件名***\n ```\nopen('致橡树.txt')\nopen('./致橡树.txt')\n ```\n***2.打开当前目录下，子目录下的文件:子目录/文件名***\n```\nopen('files/abc.txt')\nopen('files/f1/aaa.txt')\n```\n\n#####b.打开方式\n```\nf = open('files/a1.txt', 'w', encoding='utf-8')\n```\n\n#####c.读操作\n\n***1.读整个文件内容***\n```\nf = open('致橡树.txt', encoding='utf-8')\nprint(f.read())\n\nf = open('致橡树.txt', 'rb')\ncontent = f.read()\nprint(type(content))  # <class 'bytes'>  二进制对应的数据类型\n```\n***2.读一行内容***\n```\nf2 = open('致橡树.txt', encoding='utf-8')\nline1 = f2.readline()\nprint(line1)\nline2 = f2.readline()\nprint(line2)\nprint(f2.read())\n```\n#####应用\n```\n# 练习：读文件中的内容，一行一行读，读完为止\nf1 = open('致橡树.txt', encoding='utf-8')\n\nwhile True:\n    line1 = f2.readline()\n    if not line1:\n        break\n    print(line1)\n```\n\n#####d.写操作示例\n```\n# 如果需要对文件进行写操作，那么文件必须以写的方式打开\n# w -> 用新的内容覆盖原内容\n# a -> 在源文件末尾添加新的内容\n# bw/wb\nf = open('致橡树.txt', 'a', encoding='utf-8')\nf.write('哈喽，小姐姐！！！')\n```\n# 文件读写的应用步骤\n**第一步**：程序中需要这个数据时，就从文件中将这个数据读出来\n**第二步**：对数据进行修改后，再将修改了之后最新的数据保存到文件中\n示例：\n```\n# 用一个变量保存当前文件执行的次数：第一次执行py文件打印1，第二次执行打印2...\n\n# 将数据从文件中读出来\nwith open('files/data.txt', encoding='utf-8') as f:\n    num = int(f.read())\n\nnum += 1\n\n# 将新的数据写入文件中\nwith open('files/data.txt', 'w', encoding='utf-8') as f:\n    f.write(str(num))\n\n# 显示数据\nprint(num)\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["语言学习"],"categories":["python编程"]},{"title":"函数（三）","url":"/2019/02/24/python函数（三）/","content":"本文介绍了pyhton中的函数中的递归函数和模块方面的知识\n<!-- more -->\n\n#一、递归函数\n\n实际开发时候，能不用递归就不用\n\n**1.什么是递归函数**\n函数中调用函数本身的函数就是递归函数\n\n**2.递归的作用**\n循环能做的事情，递归函数都能做\n\n```\na = 0\ndef func2():\n    global a\n    if a < 5:\n        print('~~~~~')\n        a += 1\n        func2()\n```\n**3.怎么写递归函数**: f(n)\n**步骤：**\n**第一步**：确定临界值 \n**说明**：循环结束的条件，在临界值的地方要让递归函数结束！\n**第二步**：找关系 - 找当次循环和上次循环的关系\n&emsp; &emsp; &emsp;          找f(n)和f(n-1)的关系\n**第三步**：假设函数的功能已经实现，通过f(n-1)来实现f(n)的功能\n\n```\ndef f(n):\n    # 1 找临界值\n    if n == 1:\n        return 1\n    # 2.找关系\n    \"\"\"\n    f(n) = f(n-1) + n\n    \"\"\"\n    return f(n-1)+n\n\nprint(f(100))\n```\n\n**4.循环能做的事情不能用递归做！**\n**原因**：\n**递归函数**:每次调用函数本身，都会在栈区间开辟一块空间，并且不会释放，直到找到临界点，严重消耗内存\n**循环**：开辟一块空间，反复改变里面的值\n#二、模块\n\n\n**1.什么是模块**\n在python中一个.py文件就是一个模块\n\n**分类**：\n**a.系统模块（标准库）**:系统提供的模块（安装解释器时，已经导入到解释器中,直接使用即可）\n**random**\n**作用**：提供随机数\n**math**\n**作用**：提供数学运算相关的方法\n**json库**\n**作用**：提供json相关操作\n**re**\n**作用**：提供正则表达式的操作\n**socket**\n**作用**：提供python的套接字编程\n**time**\n**作用**：提供和时间相关的操作\n**threading**\n**作用**：提供和线程相关的操作\n\n**b.自定义模块**：\n自己创建的py文件\n**分类**：\n1.自己写的模块\n2.别人写的模块：第三方库(需要先下载到解释器中，然后才能在代码中导入)\n\n**补充**：标准库和第三方库一般是通过模块提供变量、函数、类\n\n**2.怎么使用模块**\n**写法**：import 模块名（库名）\n**作用**：直接导入指定的模块，导入后可以使用模块中所有的全局变量\n（包含了变量、函数和类）\n**使用**：模块名.变量  -> 来使用模块中的内容\n\n**写法**：from 模块名 import 变量1，变量2\n**作用**：在程序中导入指定的模块，导入后只能使用import后面的变量\n**使用**：直接使用变量，无需加’模块名.‘\n\n**写法**：from 模块名 import *\n**使用**：直接使用变量，无需加’模块名.‘\n\n**导入模块的实质**：\na.不管是使用import还是from-import,导入模块的时候都会执行模块中所有的代码\nb.python中一个模块不会重复导入多次，因为导入时，系统会自动检查当前模块是否已经导入\n\n**4.怎么阻止模块中的内容被其他模块执行**\n\n如果不希望被其他模块执行的代码放在if语句中，\n如果希望被其他模块使用的代码就放在if语句外面\n（这里的if语句指的是：if \\_\\_name\\_\\_ == '\\_\\_main\\_\\_':）\n\n**原理**：每个模块都有一个__name__属性，代表模块名，默认情况下它的值是py文件的文件名，当当前模块正在被执行（直接执行）的时候，它的属性\\_\\_name\\_\\_的值就会变成\\_\\_main\\_\\_\n\n```\n# 1.系统模块\nimport random\nprint(random.randint(1, 199))\n\n# 自定义模块\nimport model1\nmodel1.a = 1000\nprint(model1.a)\nprint(model1.fun1())\n\n# 不用模块名.方法就能调用模块中的一些变量\nfrom model2 import aa, x  # 不能是强制使用\nprint('aa:', aa)\nprint(x)  # 9\n\n# 不用模块名.方法就能调用模块中所有变量\nfrom model2 import *  # *是通配符\nprint(aa)\nprint(x)\n```\n\n**5.重命名**\n**目的**：导入模块时，可以对**模块**或者**模块中的内容**重新命名\n**写法**：\n**a**.import 模块名 **as** 新模块名\n**b**.from 模块名 import 变量1 **as** 新变量1，变量2 as 新变量2\n**应用**：当模块名很长时，可以使用此方法\n```\n# 修改模块名\nimport model4 as newMode\nprint(model4.age)\n\n# 修改模块中的内容\nname = 100\nfrom model4 import name as new_name, age as new_age\nprint(name)\nprint(new_name)\nprint(new_age)\n```\n#三、迭代器\n\n\n**1.什么是迭代器（iter)**\n**定义**：python中提供的容器型数据类型\n**特点**：\na.从前往后一个一个的取\nb.取出后，迭代器中**不复存在**\n\n**2.迭代器的字面量**\na.迭代器没有指定格式的字面量\nb.迭代器元素的产生：\n1.通过其他序列转换，\n2.通过生成器产生\n**元素**：任意数据类型\n\n```\n# 将字符串转换成迭代器，元素就是字符串中的每个字符\niter1 = iter('hello')\nprint(iter1)\n\n# 将列表转换成迭代器，元素就是列表中的每个元素\niter2 = iter([100, 'dfd', (10, 39), [1, 2], {'a': 10, 'b': 20}, lambda x: x])\nprint(iter2)\n```\n\n**3.获取元素**\n**元素特点**：只支持**查**，不支持增删改\n**获取方式**：\n1.next函数\n**写法**：next（迭代器名）\n**目的**：获取迭代器中最新（最顶层）的数据\n2.for 变量 in 迭代器\n**作用**：遍历获取每一个元素\n```\n# next\niter3 = iter('hello')\nprint(next(iter3))\nprint(next(iter3))\nprint(next(iter3))\nprint(next(iter3))\nprint(next(iter3))\n# print(next(iter3))  # 报错 StopIteration 因为迭代器中的数据已经取完\n\n# 通过for - in 取迭代器中的元素和next效果一样，元素还是会被取出\niter3 = iter('123456')\nprint(next(iter3))\nfor x in iter3:\n    print('x': x)\n```\n**注意**：迭代器元素取完，迭代器不会消失\n\n#四、生成器\n\n**1.什么是生成器**\n生成器就是迭代器，迭代器不一定是生成器\n\n**2.生成器怎么产生元素**\n**如何产生**：调用一个带有yield的关键字的函数，就能得到一个生成器\n\n**不带yield函数**：调用时会执行函数体，并且获取返回值\n**带有yield函数**：调用时不会执行函数体，也不会获取返回值，而是产生一个生成器（函数调用表达式就是一个生成器）\n**这个生成器的元素就是yield关键字后面的值**\n\n```\ndef func1():\n    print('===')\n    return 100\n\nprint(func1())  # 100\n\ndef func2():\n    print('===')\n    return 100\n    yield\n\n\nprint(func2())  # <generator object func2 at 0x006F7ED0>\n```\n\n**3.获取生成器中的元素**\n**使用**：\n1.next()\n2.for 变量 in 生成器 \n\n###重点！！！\n**原理**：\n**第一步**：执行生成器对应的函数\n**第二步**：每次都是执行到yield语句为止，并且会将yield后面的值作为当次获取到的元素\n**第三步**：下次获取元素会接着上次结束的位置，接着执行，直到下一个yield为止\n**第四步**：以此类推，直到函数结束，如果执行函数结束没有遇到yield，那么就会报\"stopxxxx\"异常\n\n一个yield是获取一个元素\n几个yield就是获取几个元素\n\nlen（迭代器）无效，因为元素都是临时取用\n```\nprint('=================')\ndef func3():\n    print('~~~~~')\n    yield 100\n\n\ngen1 = func3()  # gen1就是一个生成器\n# next()\n\nprint(gen1)\nprint('打印', next(gen1))\n```\n```\n# 练习：给每个学生一个学号，并且不会重复\ndef creat_num():\n    num = 1\n    while True:\n        yield 'py1809%d' % num\n        num += 1\n\nnum_gen = creat_num()\nfor _ in range(10):\n    print(next(num_gen))\n\nprint('新来的学生')\nprint(next(num_gen))\n```\n####实现一个属于自己的迭代器方法\n```\ndef pu_iter(seq):\n    for x in seq:\n        yield x\n\niter1 = pu_iter('abc')\nprint(next(iter1))  # a\nprint(next(iter1))  # b\nprint(next(iter1))  # c\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["语言学习"],"categories":["python编程"]},{"title":"函数（二）","url":"/2019/02/24/python函数（二）/","content":"本文介绍了pyhton中的函数中的匿名函数、变量作用域和函数变量等知识\n<!-- more -->\n\n#一、匿名函数\n**1.什么是匿名函数？**\n**定义**：匿名函数还是函数，只是声明格式不同\n**适用**：函数功能比较简单的函数\n\n\n**2.匿名函数的声明**\n**a.语法**：\n变量名 = lambda 形参列表：返回值\n**b.说明**\n**变量名**：函数名\n**lambda**:声明匿名函数的关键字\n**形参列表**：和普通形参列表相同\n**：**：固定写法\n**返回值**：相当于普通函数中只有一条return语句的函数体\n\n**3.匿名函数的调用**：和普通函数一样\n\n**4.存在的目的**：对普通函数的一种简写方式\n\n**5.匿名函数特点**\n\n***a.匿名函数的参数也可以设置默认值***\n***b.匿名函数不能说明类型***\n```\nfunc1 = lambda x, y=0: x+y\nprint(func1(1, 34))\nprint(func1(y=11, x=22))\n```\n***c.匿名函数可以设置不定长参数***\n```\nfunc2 = lambda *nums: sum(nums)\nprint(func2(1, 2, 3))  # 6\n```\n#二、变量的作用域\n\n**1.什么是变量的作用域**\n**定义**：变量能够使用的范围\n\n**2.分类**\n**a.全局变量**\n**定义**：没有声明在函数或者类中的变量\n**作用域**：从声明开始，到文件结束\n\n\n**b.局部变量**\n**定义**：声明在函数或者类中的变量\n**作用域**：从声明开始，到函数结束\n\n\n**总结**：\n当我们调用函数时，系统会自动在栈区间专门开辟一块独立的内容空间，用来保存在函数中声明的变量（形参也是属于声明在函数的变量），函数调用结束后，函数对应的栈区间会自动销毁。\n**函数调用过程是一个压栈的过程**\n\n```\n# 全局变量\na = 11\ndef func1():\n    print('函数中', a)\nfunc1()  # 函数中 11\n\n# 2.全局变量\n# 这里的y也是全局变量\nfor y in range(2):\n    print(y)\nprint('外面', y)\n\ndef func2():\n    print('函数里面', y)\n```\n**3.局部变量**\n```\n# a.函数的形参相当于声明在函数中的变量，所以是局部变量\ndef func3(num1):\n    print(num1)\n    for x in range(3):\n        print(num1)\nfunc3(11)\n\n# print(num1)   # 局部变量不能在函数外面使用\n```\n\n####判断标准：看在函数里外\n\n**4.如果全局变量和局部变量同名，那么在局部变量的作用域中使用局部变量，外面使用全局变量**\n```\n# 全局变量\naa = 1121\n\n\ndef func3():\n    # 局部变量\n    aa = 299\n    print('函数里', aa)\n\n\nfunc3()  # 函数里 299\nprint('外面', aa)  # 外面 1121\n```\n**3.global**\n**作用**：在函数中声明一个全局变量(只能是在函数中使用)\n**语法**：\nglobal 变量名\n变量名 = 值\n\n```\ndd = 111\ndef func6():\n    global dd\n    dd = 222\n    print('函数里', dd)\n\n    global ad\n    ad = 1222\n    print(ad)   # 1222\n\n\nfunc6()  # 222\nprint('外面', dd)  # 222\nprint(ad)  # 1222\n```\n\n**4.nonlocal**\n**作用**：在局部的局部中**修改**局部变量的值，\n就使用nonlocal对变量进行说明\nnonlocal 局部变量\n局部变量 = 值\n```\ndef func11():\n    abc = 123\n    print('11', abc)\n\n    def func22():\n        abc = 333\n        print('22', abc)\n    func22()\n    print(abc)\n\nfunc11()\n```\n\n#三、函数变量\n**1.声明函数实质**：\n声明一个类型是function的变量，函数名就是变量名\n**2.区别**：\n\n**函数名** ：\n**说明**：类型是function的变量\n\n**函数名（）**\n**说明**：\n1.调用函数\n2.获取函数的返回值\n\n**3.函数变量的应用**\n\n**a.给其他变量赋值**\n```\n# 声明一个列表变量list1\nlist1 = [1, 2, 3]\n\n\n# 声明一个函数变量func1\ndef func1():\n    print('我是一个函数')\n    return 10\n\n# 使用列表给另一个变量赋值\nlist2 = list1\n\n# 赋值后就可以当做列表来用\nprint(list2[0])\n\n# 使用函数变量给另一变量赋值\nfunc2 = func1\n\n# 赋值后func2就可以当做函数来使用\nfunc2()\nprint(func2())\n```\n\n**b.变量作为容器类数据的元素**\n\n```\na = 10\nnums = [a, 100, 1000]\nprint(nums)\nprint(nums[0] - 10)\n\n\ndef func3():\n    print('abc')\n    return 10\n\n\n# 函数变量拿到的是地址\nlist2 = [func3, func3(), 10]\nprint(list2)\nprint(list2[0]())\n```\n**c.变量作为函数的实参**\n函数1作为函数2的实参 - 函数2就是一个高阶函数\n**高阶函数**：用一个函数给此函数传实参时，此函数就是高阶函数\n```\na = 10\ndef func4(n:int):\n    print(n+n-1)\n\nfunc4(a)\n\ndef func5(x):\n    print(x)\n\nfunc5(func4)\nfunc5(lambda x: x*2)\n\n```\n#####应用：sort函数\n列表.sort(key=None, reverse=False)\n**key**：\n**要求**：\n带**一个参数**，且返回值是比较的对象\n**说明**：\n**参数**：指向的是列表中的元素\n**对象**：确定按照什么进行排序\n\n**d.变量作为函数的返回值**\n\n```\ndef operation(char):\n    if char == '+':\n        def func1(*nums):\n            return sum(nums)\n        # 将函数作为函数的返回值\n        return func1\n    elif char == '-':\n        def func2(*nums):\n            if not nums:\n                return 0\n            sum1 = nums[0]\n            for index in range(1, len(nums)):\n                sum1 -= nums[index]\n            return sum1\n\n        return func2\n\n\nprint(operation('+'))\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["语言学习"],"categories":["python编程"]},{"title":"函数（一）","url":"/2019/02/24/python函数（一）/","content":"本文介绍了pyhton中的函数基础知识\n<!-- more -->\n\n# 一、认识函数\n\n**1.什么是函数？**\n**定义**：对实现某一特定功能的代码段的**封装**\n使用函数就是使用这个函数里面的**代码段**\n\n**2.函数的分类**\n**系统函数**：系统已经定义好的函数，我们直接调用函数使用函数的功能\n**自定义函数**：需要程序员自己定义的函数\n\n**3.函数的定义**   (好比是制造机器）\n**a.语法**\ndef 函数名（参数列表）：\n &emsp;&emsp;&emsp;函数体\n**b.说明**：\n**def**:声明函数的关键字\n**函数名**：标识符，不能是关键字\n            **pep8命名规范**，见名知义（看到函数名大概知道函数功能）\n**（）**：固定格式\n**参数列表**：参数1，参数2，参数3...；这里参数叫做**形参**,定义时形参就是变量\n **作用**：将函数**外面的数据**从外面**传递**到函数**里面**\n**：**：固定格式\n**完整函数体**：\n1.函数说明文档\n2.实现函数功能的代码段\n3.函数返回值\n\n**c.初学者申明函数的步骤**\n**第一步**：确定函数的功能\n**第二步**：根据功能确定函数名\n**第三步**：确定形参（确定参数是否需要和几个），实行函数的功能需不需要从外面传值进来，以及需要传几个\n**第四步**：实现函数的功能\n**第五步**：确定函数返回值\n\n**（重点!!!)注意**：函数声明时，并不会执行函数体!\n只有在调用的时候才会执行\n\n**4.函数的调用** (好比是使用机器）\n**a.语法**：\n函数名（实参列表）\n**b.说明**：\n**函数名** - 已经声明过的函数\n**（）**：固定写法\n**实参列表**：实参是来给形参赋值（用实参给形参赋值的过程加传参），实参和形参要一一对应\n**c.调用过程（重点！！！）**\n**第一步**：回到函数声明的位置\n**第二步**：用实参给形参赋值（传参）\n**第三步**：执行函数体\n**第四步**：执行完函数体，就确定并返回返回值\n**第五步**：回到函数调用的位置，接着执行后面的其他代码\n示例：\n```\n# 求两个数的和\ndef sum_two(num1, num2):\n    \"\"\"\n    求两个数的和（函数功能进行说明）\n    :param num1:（第一个数进行说明）\n    :param num2:（第二个数进行说明）\n    :return:无（返回值进行说明）\n    \"\"\"\n    print(num1 + num2)\n# 调用函数\nsum_two(10, 20)  # 30\n```\n猜数字游戏\n```\n# 练习3：声明一个函数，函数功能是猜数字游戏：随机产生一个0-100的数字，用户不断输入数字，\n#直到输入的数字和产生的数字一样游戏就结束,当猜错了，可以给出'大了/小了'这样的提示\n\n\n# 导入random模块\n\"\"\"\nrandint(m,n) - 产生一个m到n的随机整数\n\"\"\"\n# num = random.randint(0, 100)\n# print(num)\n\n\ndef guess_num():\n    import random\n    num = random.randint(0, 100)\n    count = 0\n    while True:\n        n = int(input('请输入数字：'))\n        count += 1\n        if n > num:\n            print('真遗憾，大了，在小一点')\n            continue\n        elif n < num:\n            print('真遗憾，小了，在大一点')\n            continue\n        else:\n            print('猜对了!!!')\n            if count > 10:\n                print('正常人')\n            # 结束游戏\n            break\n\n\nguess_num()\n```\n# 二、参数类型\n\n**1.位置参数和关键字参数（根据实参的传递方式分类）**\n**a.位置参数**：实参的位置和形参保持一致，按形参先后顺序一一赋值\n**b.关键字参数**：调用函数的时候以 形参=实参的方式来传参，\n这个时候顺序无所谓\n```\ndef func1(a, b, c):\n    print(a, b, c)\n\n\n# 通过位置参数给形参赋值\nfunc1(10, 20, 49)\n\n\n# 通过关键字参数给形参赋值\nfunc1(a=10, b=20, c=49)\n\n# 通过位置参数和关键字参数结合传参\n# （关键字参数必须在位置参数后面),不然会报错\nfunc1(10, 20, c=20)\n```\n**2.参数默认值**\n**说明**：\n声明函数时，可以给参数赋默认值。\n如果一个形参有默认值，调用函数时，可以不用传参\n\n**注意**：\na.如果有的形参有默认值，有的没有，那么有默认值的形参要放在没有默认值的形参的后面\nb.调用函数要保证每个参数都有值！\n```\n# 参数c有默认值，调用函数c可以不用传参\ndef func2(a, b, c=0):\n    print(a, b, c)\n\n\nfunc2(10, 20, 400)  # 10 20 400\nfunc2(100, 32)  # 100 32 0\n```\n**3.参数的类型**\n**说明**：类型说明只有提示功能，没有约束功能\n######a.给参数设置默认值，默认值的类型就是参数值的类型\n######b.形参后面加：类型名，来说明参数类型。这种方式调用必须传参\n######c.函数声明的时候在（）后面加 —>类型名，来说明函数返回值的类型\n**类型说明的好处**：\na.对实参的类型进行说明指导\nb.实现函数功能的时候，有类型相关的语法提示\n```\ndef list_item(list1: list, index=0)->int:  # int对返回值类型进行说明\n    print(list1[index])\n    return 10\n\n\nlist_item([2, 23])\n\n\ndef func4(a: list, b: str):\n    a.append(b)\n```\n\n**4.不定长参数**\n**说明**：函数参数个数不确定\na.声明函数的时候，在参数名前加 \\*，可以同时用来获取多个实参的值\n**实质**：将带\\*号的参数变成**元祖**，将多个实参的值作为元祖的元素\nb.在参数名前加两个*，必须是关键字传参，会将这个参数变成**一个字典**来获取关键字参数的值，其他关键字作为KEY，实参作为value\n\n**注意**：a.如果函数中既有不定长参数，又有普通参数，那么不定长参数必须放在普通参数后面\nb.两颗\\*的要放在一颗\\*的后边\n```\n# 写一个函数，计算多个数的和（位置参数，关键字参数皆可）\ndef sum_num(*args, **kwargs):\n    sum1 = 0\n    # 遍历元祖\n    for num in args:\n        sum1 += num\n    # 遍历字典\n    for num1 in kwargs:\n        sum1 += kwargs[num1]\n    print(sum1)\n\n\nsum_num(11, 23, a=111)\n```\n# 三、函数返回值\n**1.什么是返回值**：函数里面的数据传递到函数外面\n**定义**：函数调用表达式的值，就是return关键字后面的表达式的值\n**注意**：每个函数都有返回值，默认是None\n**函数调用表达式**：调用函数的语句\n**return**：关键字，只能写在函数体中\n**功能**：\n1.确定函数的返回值\n2.结束函数\n**注意**：执行函数时，如**遇到return**，函数直接结束，并且将**后面的值作为函数的返回值**\n\n```\ndef func1():\n    print('****')\n    return 100\n    print('=====')\n\n\nresult = func1()  # func1()就是函数调用表达式\nprint(result)\n```\n**2.多个返回值**\nreturn 值1， 值2， 值3... <==> （值1， 值2， 值3...)\n\n\n```\ndef func3():\n    return 1, 2, 3\n\n\nprint(func3())   # (1, 2, 3)\n\nx, y, z = func3()\nprint(x, y, z)  # 1 2 3\n```\n**3.怎么确定函数是否需要返回值**\n函数执行完后是否会产生**新的数据**，如果会产生新的数据，就需要返回值，并用return返回\n```\n# 声明一个函数，打印指定的n!\ndef factorial_1(n):\n    \"\"\"\n    求指定数的阶乘\n    :param n:\n    :return:\n    \"\"\"\n    num = 1\n    for x in range(1, n+1):\n        num *= x\n    return num\n\n\nfactorial_1(3)  # 6\n# 一个函数可以用多次\nfactorial_1(4)  # 24\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["语言学习"],"categories":["python编程"]},{"title":"元祖、字典和集合","url":"/2019/02/24/python元祖、字典和集合/","content":"本文介绍了python中的三种数据结构元祖、字典和集合\n<!-- more -->\n\n#一、元祖（tuple）\n\n**1.什么是元祖（tuple)**\n**定义**：python提供的容器型数据类型，（元祖就是不可变的列表）\n**不可变**：不支持增删改\n**有序**：可以通过下标来获取元素\n\n**2.字面量和元素**\n（元素1，元素2，元素3....）\n**说明**：\n**元素**：任何类型的数据，类型可互不相同，元素可重复\n```\npoint = (100, 30)\nprint(point, type(point))  # (100, 30) <class 'tuple'>\n```\n###### 注意：\n***情况1.空元祖***\n```\ntuple1 = ()\nprint(type(tuple1))  # <class 'tuple'>\n```\n***情况2.只有一个元素的元祖,在元素后面加逗号***\n```\ntuple2 = (100,)\nprint(tuple2, type(tuple2))   # (100,) <class 'tuple'>\n```\n***情况3.直接将多个元素用逗号隔开，不加括号表示也是一个元祖***\n```\ntuple3 = 1, 2, 3\nprint(tuple3, type(tuple3))   # (1, 2, 3) <class 'tuple'>\n```\n**3.元祖获取元素和列表一样**\n**输出**：一个元祖\n```\ntuple4 = ('成都', '达州', '绵阳', '南充', '广元')\n# 获取单个元素\nprint(tuple4[1], tuple4[-1])  # 达州 广元\n# 获取部分元素\nprint(tuple4[0:3])  # ('成都', '达州', '绵阳')\nprint(tuple4[::-1])  # ('广元', '南充', '绵阳', '达州', '成都')\n\n# 遍历 -> 拿到的是元素本身\nfor city in tuple4:\n    print(city)  \n```\n**补充：特殊的获取方式**\n**a.变量1， 变量2... = 元祖**\n**说明**：用前面的变量依次获取元素的值\n**要求**：变量个数和元祖元素个数一致,不然程序会报错\n```\npoint = (100, 200)\nx, y = point   # x, y = (100, 200)  <==> x, y = 100, 200\nprint(x, y)  # 100 200\n```\n**b.变量1， *变量2 = 元祖**\n**说明**：通过带*的变量获取元祖中剩余的部分\n**输出**：*号是一个列表\n**注意**：带\\*号的变量只能是一个，其他变量可以有多个\n```\nname, *scores = ('小张', 100, 200, 30, 3)\nprint(name, scores)  # 小张 [100, 200, 30, 3]\n\nname, num, *scores = ('小张', 100, 200, 30, 3)\nprint(name, num, scores)  # 小张 100 [200, 30, 3]\n\n*info, num = ('笑绽放', 100, 11, 333, 23)\nprint(info, num)  # ['笑绽放', 100, 11, 333] 23\n```\n####说明：*的用法\n**作用**：取元祖和列表中的数据\n```\nnums = (1, 2, 3)\nprint(*nums[::-1])  # 3 2 1\n```\n**4.相关运算**\n+，*\nin/not in \nlen(),max(),min(),sum(),tuple()\n\n```\ntuple1 = (1, 2, 4)\ntuple2 = ('sd', 'dffd')\nprint(tuple2 + tuple1)  # ('sd', 'dffd', 1, 2, 4)\nprint(tuple2*2)  # ('sd', 'dffd', 'sd', 'dffd')\n\nprint('dff' in tuple2)  # False\n```\n\n**5.排序**\nsorted(序列) \n**作用**：对序列中的元素排序（升序）-从小到大\n**输出**：新的列表(不管是什么序列，拍完后都是列表）\n\n\n**注意**：\n列表.sort（） 修改原列表中的元素的顺序\nsorted - 产生一个新的列表\n```\nnums = (1, 34, 34, 5656)\nprint(sorted(nums))  # [1, 34, 34, 5656]\nprint(sorted('dfdfd'))  # ['d', 'd', 'd', 'f', 'f']\n```\n**join函数**\n**字符串特殊**\n**字符串.join(序列）** \n**作用**：将序列中的元素取出，用指定的字符串连接在一起\n**要求**：序列中的元素必须是字符串\n**输入*：序列\n**输出**：字符串\n```\nnew_str = ''.join(['d', 's', 't'])\nprint(new_str, type(new_str))   # dst <class 'str'>\n\nlist1 = [1, 33, 334, 2]\nlist1.sort()   # None  sort不会产生新的列表\nprint(list1)  # [1, 2, 33, 334]\n```\n# 二、字典(dict）\n\n\n####1.什么是字典？\n**定义**：python提供的容器型数据类型（序列）\n**可变**：支持增删改\n**无序**：不支持下标操作，不能获取元素\n\n####2.字面量和元素\n**定义**:用大括号括起来，里面有多个键值对，每个键值对用逗号隔开，\n{key1:value, key2:value2, key3:value3...}\n键值对就是字典的元素\n**键值对**：键（key)：值(value)\n**键**：不可变的，唯一，不可重复，一般将字符串作为key\n**值**：可以是任意类型的数据\n**注意**：\n1.键值对必须成对出现，而且脱离字典单独出现没有意义\n2.字典存数据，实际是通过值来存储的(key是值对应的标签和获取值的方式)\n**补充**：列表和字典不可以作为key值\n```\n# 列表和字典不可作为key\ndict1 = {}  # 空字典\ndict1 = {'a': 134, 10: 11, (1, 2): 'abc'}\nprint(dict1)\n\n# dict2 = {[1, 2]: 120}\n# TypeError: unhashable type: 'list'\n# 类型错误：列表不能希哈化\n```\n####3.使用场景\n**什么时候用字典：**\n多个**没有相同意义**的数据（需要区分），可以通过key来区分多个数据的不同，\n例如：保存一个人的不同信息，一辆车的不同信息\n**什么时候用列表：**\n存储的数据是具有**相同意义**的数据（不需要区分）\n例如：储存一个班的学生信息，保存所有的价格\n\n```\n# 练习：申明一个变量，保存一个班的学生信息，每个学生需要保存姓名，电话，年龄\nall_student = []\nstudent1 = {'name': '小黄', 'tel': 111111, 'age': 18}  # 保存学生不同的信息\nstudent2 = {'name': '小才', 'tel': 111111, 'age': 18}\nstudent3 = {'name': '小四', 'tel': 111111, 'age': 18}\nstudent4 = {'name': '小五', 'tel': 111111, 'age': 18}\nall_student.append(student1)\nall_student.append(student2)\nall_student.append(student3)\nall_student.append(student4)   # 保存学生到列表中\nprint(all_student[::-1])\n```\n\n\n####4.字典元素的增删改查\n\n**a.查（获取值）**\n**注意**：字典中的键值对单独拿出来没有意义\n\n**1.字典[key]**\n**目的**：获取字典中key的值\n**注意**：当key值不存在时，会报错 keyError\n```\ncar = {'color': '黄色', 'type': '跑车', 'price': 500000}\nprint(car['color'])  # 黄色\n```\n**2.字典.get(key)**\n**目的**：获取字典中key的**值**\n**注意**：当key不存在时，不会报错，并且取到一个默认值None\n**应用**：可以判断key是否存在\n**字典.get(key, 值1）** \n**目的**：获取字典中key的值\n**注意**：当key不存在时，不会报错，并且取到指定的值1\n```\nprint(car.get('type'))  # 跑车\nprint(car.get('speed'))   # None\n\nprint(car.get('color', '红色'))  # 黄色\nprint(car.get('speed', 0))  # 0\n```\n**如何选择：**\n确定时，用1,不确定时，用2或者3\n\n**3.遍历**\n**注意**：直接通过for - in 遍历字典取到的是**key**，然后通过key来取值\n```\ndict1 = {'a': 100, 'b': 200, 'c': 300}\n# 遍历字典取到的是key（推荐使用）只需要遍历一次\nfor key in dict1:\n    print(key)\n    print(dict1[key])\n\n# 遍历字典的values()，获取所有的值\nfor value in dict1.values():\n    print(value)\n\n# 遍历字典的items（），直接获取key和value（不建议使用）\nfor key, value in dict1.items():\n    print(key, value)\n```\n\n**b.增（增加键值对）、改**\n**a.字典[key] = 值**\n**目的**：\n**key不存在**:添加键值对\n**key存在**：修改key的值\n\n```\nmovie = {'name':'xiaohua', 'type': '卡通', 'time': 120}\n\n# 添加\nmovie['score'] = 7.9\nprint(movie)  # {'name': 'xiaohua', 'type': '卡通', 'time': 120, 'score': 7.9}\n\n# 修改\nmovie['type'] = '相当搞笑'\nprint(movie)  # {'name': 'xiaohua', 'type': '相当搞笑', 'time': 120, 'score': 7.9}\n\n```\n**c.删（删除键值对）**\n**1.del 字典[key]**\n**目的**：删除指定的key对应的键值对\n\n**2.字典.pop(key)**\n**目的**：取出字典中key对应的值\n**注意**:可以赋值给变量拿来使用\n```\nmovie = {'name': 'xiaohua', 'type': '相当搞笑', 'time': 120, 'score': 7.9}\ndel movie['time']\nprint(movie)  # {'name': 'xiaohua', 'type': '相当搞笑', 'score': 7.9}\n\nname = movie.pop('name')  # xiaohua\nprint(movie, name)  #  {'type': '相当搞笑', 'score': 7.9} xiaohua\n```\n####应用实例\n```\n# 练习：用一个字典保存一个学生的信息:{'name': '张三', 'age': 30, 'score': 80}\n\nstudent = {'name': '张三', 'age': 30, 'score': 80}\nmessage = input('请输入要修改的信息：')\nif message == 'name':\n    new_name = input('请输入新的名字：')\n    student['name'] = new_name\n    print(student)\nelif message == 'age':\n    new_age = input('请输入新的年龄：')\n    student['age'] = new_age\n    print(student)\nelif message == 'score':\n    new_score = input('请输入新的分数：')\n    student['score'] = new_score\n    print(student)\nelse:\n    print('没有该信息')\n```\n###5.相关运算\n\n**1.比较运算**\n== !=\n**注意**：\n**判断两个字典是否相等**：只看键值对是否一样，不管顺序\n    字典是不支持<和>符号\n```\nprint({'a': 11, 'b': 22} == {'b': 22, 'a': 11})   # True\n```\n**2. in / not in**\nkey **in** 字典\n**目的**：判断字典中指定的key是否**存在**\nkey **not in** 字典 \n**目的**：判断字典中指定的key是否**不存在**\n```\ndict2 = {'a': 1, 'b': 2, 'c': 3}\nprint('a' in dict2)   # True\nprint(1 in dict2)\n```\n**3.len(),max(),min()**\n\n**dict(数据)**\n**要求**：\n1.序列 \n2.序列中的元素都是有两个元素的子序列\n```\n# 获取字典中键值对的个数\ndict2 = {'a': 1, 'b': 2, 'c': 3}\nprint(len(dict2))  # 3\n\n# 获取字典中key的最大值/最小值\ndict2 = {'a': 1, 'b': 2, 'c': 3}\nprint(max(dict2), min(dict2))    # c a\n\n# 将列表转化为字典\nprint(dict([(1, 3), ('a', 'b')]))   # {1: 3, 'a': 'b'}\n\n# 字典转列表/元祖/集合都是将字典中的key取出来作为列表/元祖/集合的元素\ndict2 = {'a': 1, 'b': 2, 'c': 3}\nprint(list(dict2))  # ['a', 'b', 'c']\n```\n####6.相关方法\n##### 1.字典.clear（）\n**目的**:清空字典(建议使用）\n**输入**：字典\n**输出**：空字典\n**建议**：清空容器推荐clear操作，而不是重新赋一个空的容器\n（会先删，在重新开辟空间）\n```\ndict2 = {'a': 1, 'b': 2, 'c': 3}\ndict2.clear()\nprint(dict2, id(dict2))  # {} 5263296\n\n# 只有本身不存在的时候，可以使用\ndict3 = {}\nprint(id(dict3))  # 8552240\n```\n##### 2.字典.copy（）\n**目的**：复制字典中的元素\n**输入**：字典\n**输出**：复制后的字典\n**注意**：拷贝赋值，会产生**新的地址**，赋值后相互不影响\n```\ndict2 = {'a': 1, 'b': 2, 'c': 3}\ndict3 = dict2.copy()\nprint(dict3)  # {'a': 1, 'b': 2, 'c': 3}\ndict2['a'] = 100\nprint(dict2)  # {'a': 100, 'b': 2, 'c': 3}\nprint(dict3)  # {'a': 1, 'b': 2, 'c': 3}\n\n# 赋值就是赋变量对应的地址\n# 直接赋值，修改其中一个的元素，会影响另外一个\n\ndict2 = {'a': 1, 'b': 2, 'c': 3}\ndict3 = dict2\nprint(dict3)  # {'a': 1, 'b': 2, 'c': 3}\ndict2['a'] = 100\nprint(dict2)  # {'a': 100, 'b': 2, 'c': 3}\nprint(dict3)  # {'a': 100, 'b': 2, 'c': 3}\n```\n##### 3.dict.fromkeys(序列，值）\n**目的**： 以序列中的所有元素作为key,指定的值作为value创建一个新的字典\n**即给多个key赋一样的值**\n**输出**：字典\n**输入**：值只能是一个\n```\nnew_dict = dict.fromkeys('abc', 100)\nprint(new_dict)  # {'a': 100, 'b': 100, 'c': 100}\n```\n##### 4.\n######4.1 字典.keys()\n**目的**：将字典所有的key取出来产生一个新的序列\n######4.2 字典.values()\n**目的**： 将字典所有的value取出来产生一个新的序列\n######4.3 字典.items()\n**目的**：将字典所有的key和value作为**一个元祖**取出产生一个新的序列\n```\ndict2 = {'a': 1, 'b': 2, 'c': 3}\nprint(dict2.keys())  # dict_keys(['a', 'b', 'c'])\nprint(dict2.values())  # dict_values([1, 2, 3])\nprint( dict2.items())  # dict_items([('a', 1), ('b', 2), ('c', 3)])\n```\n#####5.字典.setdefault(key, value = None)\n######5.1 字典.setdefault(key) \n**目的**：当key值不存在时，添加键值对key:None\n######5.2 字典.setdefault(key, value = None)\n**目的**：当key值不存在时，添加键值对key:value\n**注意**：这个操作当key存在的时候，不会修改\n```\ndict2 = {'a': 1, 'b': 2, 'c': 3}\ndict2.setdefault('name', '小胡')\ndict2.setdefault('sex')\nprint(dict2)   # {'a': 1, 'b': 2, 'c': 3, 'name': '小胡', 'sex': None}\n```\n#####6.字典1.update(字典2)\n**目的**：使用字典2中的键值对去**更新**字典1，\n**注意**：如果字典2中的key,字典1中本来就存在就是修改，不存在就是添加\n```\ndict2 = {'a': 1, 'b': 2, 'c': 3}\ndict2.update({'a': 22222, 'age': 18})\nprint(dict2)  # {'a': 22222, 'b': 2, 'c': 3, 'age': 18}\n```\n# 三、集合（set）\n**1.什么是集合？**\n**可变**：\n**无序**：\n**元素是唯一并且不可变的**\n\n**2.字面量**\n{元素1，元素2，元素3...}\n```\nset1 = {1, 32, 'abc'}\nprint(set1)  # {32, 1, 'abc'}\n\n# 表示空集合\nset2 = set()\nprint(type(set2))   # <class 'set'>\n\n# 自带去重功能\nset3 = {1, 2, 4, 3, 2, 1, 4}\nprint(set3)   # {1, 2, 3, 4}\n\n# 使列表元素唯一\nlist1 = [1, 2, 3, 4, 2, 1]\nlist1 = list(set(list1))\nprint(list1)  # {1, 2, 3, 4}\n```\n\n#####3.增删改查\n\n\n######a.查\n######集合不能单独的获取单个元素，只能是一个一个的遍历\n```\nset1 = {1, 3, 33}\nfor item in set1:\n    print(item)   \n```\n######b.增\n**1.集合.add（元素）** \n**目的**：在集合中添加指定的元素\n```\nset1 = {1,3,33}\nset1.add('哈哈'）\nprint（set1）  # {1, 3, '哈哈', 33}\n```\n**2.集合.update(序列）**\n**目的**： 将序列中的元素添加到集合中\n```\nset1 = {1, 3, '哈哈', 33}\nset1.update('abc') \nprint(set1)    # {1, 'a', 3, 33, 'b', 'c', '哈哈'}\n\nset1.update({'ddd': 22323})\nprint(set1)   # {1, 'a', 3, 33, 'b', 'c', 'ddd', '哈哈'}\n```\n######c. 删\n**集合.remove(元素）**\n**目的**：删除集合中指定的元素\n```\nset1 = {1, 3, 33}\nset1.remove(33)\nprint(set1)\n```\n#####4.数学集合运算\n######a.交集（&）\n**目的**：获取两个集合**公共**的部分，产生新的集合\n```\nset1 = {1, 2, 3, 4, 5, 6}\nset2 = {4, 5, 6, 7, 8}\nprint(set1 & set2)  # {4, 5, 6}\n```\n######b.并集(|)\n**目的**：将两个集合中的元素合并在一起（去重后）产生一个新的集合\n```\nset1 = {1, 2, 3, 4, 5, 6}\nset2 = {4, 5, 6, 7, 8}\nprint(set1 | set2)  # {1, 2, 3, 4, 5, 6, 7, 8}\n```\n######c.补集（-）\n**目的**：集合1 - 集合2 -> 去掉集合1中包含集合2的部分，剩下的产生一个新的集合\n```\nset1 = {1, 2, 3, 4, 5, 6}\nset2 = {4, 5, 6, 7, 8}\nprint(set1 - set2)  # {1, 2, 3}\n```\n######d.差集（^)\n**目的**：将两个集合合并在一起，**去掉公共部分**，剩下的部分产生一个新的集合\n```\nset1 = {1, 2, 3, 4, 5, 6}\nset2 = {4, 5, 6, 7, 8}\nprint(set1 ^ set2)  # {1, 2, 3, 7, 8}\n```\n######e.子集的判断：\n**集合1 > 集合2** \n**目的**： 判断集合1中是否包含集合2\n**集合1 < 集合2**\n**目的**：判断集合2中是否包含集合1\n**输出**：布尔值\n```\nset1 = {1, 2, 3, 4, 5, 6}\nset2 = {4, 5, 6, 7, 8}\n\nprint({1, 2, 3} > {1, 2})  # True\nprint({1, 2, 3} > {1, 2, 0})  # False\n\nprint({1, 2, 3} > {1, 2, 3})  # False\nprint({1, 2, 3} >= {1, 2, 3})  # True\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["语言学习"],"categories":["python编程"]},{"title":"进制与位运算","url":"/2019/02/24/python进制与位运算/","content":"本文介绍了计算机底层的进制和位运算等知识\n<!-- more -->\n\n# 一、进制\n\n###### 在计算机编程中，整数可以通过十进制、二进制、八进制、十六进制来表示\n\n**a.十进制**\n**基数**：0,1,2,3,4,5,6,7,8,9\n**进位**：逢十进一\n**位权**：10的n次方，每位数的代表的含义\n\n**b.二进制**\n**基数**：0,1\n**进位**：逢二进一\n**位权**：2的n次方，每位数代表的含义\n\n**c.八进制**\n**基数**：0,1,2,3,4,5,6,7\n**进位**：逢八进一\n**位权**:123(8) = 3+16+64 = 83\n8的n次方，每位数代表的含义\n\n**d.十六进制**\n**基数**：0~9，a~f（大小写均可），从小到大分别对应10,11,12,13,14,15\n**位权**：逢十六进一\n**位权**:16的n次方，每位数表示的含义\n\n\n#####1. 程序中怎么表示不同进制的数\n**在程序中直接写的数字都是10进制**\n```\nnum = 10  # 这是一个10进制数\nprint(num)    # 直接打印其他进制数就会显示他的十进制\n```\n**a.二进制**\n**写法**：**0b/0B** + 二进制数\n```\nnum = 0b1110  # 每位上必须是二进制数\nprint(num)\nprint(bin(800))  # 获取一个数对应的二进制表示方式\n# num2 = 0b23   # SyntaxError: invalid token\n```\n\n**b.八进制**\n**写法**：**0o/0O** + 八进制数\n```\nnum = 0o134  # 每位上必须是八进制数\nprint(num)\nprint(oct(800))\n# num = 0o78   # SyntaxError: invalid syntax\n```\n\n**c.十六进制**\n**写法**：**0x/0X**+十六进制数\n```\nnum = 0xaf2   # 每位上必须是十六进制数\nprint(num)\nprint(hex(19968))\nprint(hex(255))\n# num = 0xd23h  # SyntaxError: invalid syntax\n```\n**注意**：\n**输入**:一个数字（可以是任何进制数）\n**输出**:字符串\n\n#二、位运算\n\n#####计算机储存数据只能储存数字数据，而且是数字的补码，运算的是使用补码来进行运算\n\n**1.原码**\n符号位+真值\n**说明**：\n**符号位**：最高位是**0**，表示一个**正数**，**1**表示**负数**\n**真值**：**去掉**正负符号，数字对应的**二级制值**\n**2.反码**\n正数：就是原码（本身）\n**负数：符号位不变，其余的位数取反（0变1,1变0）**\n即对负数才有此要求\n\n**3.补码**\n正数：还是原码（本身）\n**负数：在反码的基础上+1**\n反码的存在是为了求补码\n\n**4.为什么计算机要存补码？**\n**原因**：计算机里只有加法器，没有减法器\n\n**5.位运算有哪些？**\n&（按位与），|（按位或），^（按位异或），~（按位取反），<<（左移），>>(右移）\n**a.&（按位与）**\n数字1 **&** 数字2 \n **说明**：每位上有0就是0，没0就是1\n**特点**：\n一个数与1与，保留这个数\n一个数与0与，置0\n\n#####应用：判断一个数的奇偶性（如果一个数的二进制的最低位是1就是奇数，否则就是偶数）\nnum & 1 == 0  -->num是偶数\nnum & 1 == 1  -->num是奇数\n```\nprint(2 & 1, 200 & 1, -100 & 1)   # 0 0 0\nprint(3 & 1, 5 & 1, 101 & 1)  # 1 1 1 \nprint(3 & 2)   # 0011 & 0010  = 0010(补）\n```\n**b.|（按位或）**\n数字1 | 数字2 \n**说明**：每位上有1就是1，没1就是0\n**特点**：与1或，就置1\n```\nprint(3 | 2)  # 3\nprint(-3 | 2)  # -1\n```\n**c.~（按位取反）**\n单目运算符\n**~数字**：将数字上的每一位**取反**\n~ 1 = 0\n~ 0 = 1\n**应用**：加密运算 \n**特点**：取反两次就是它本身\n```\nprint(~3)  # -4\nprint(~-4)  # ~~3 = 3 取反两次就是它本身\n```\n**d.^（按位异或）**\n数字1 ^ 数字2\n**说明**：相同为0，不同为1\n1 ^ 1 = 0\n1 ^ 0 = 1\n0 ^ 1 = 1\n0 ^ 0 = 0\n**应用**：1.加密\n2.两个数**是否相等**：\n**相等**：异或为0\n**不等**：异或为1\n```\nprint(3 ^ 2)  # 2是密码，3是明文\nprint(1 ^ 2)  # 1是密文，2是密码，得到明文\n```\n**e.<< (左移)**\n数字1 << n \n**说明**：数字1左移n位，相当于数字1 * 2\\*\\*n\n**f. >> (右移)**\n数字1 >> n\n**说明**：数字1右移n位，相当于数字1 // 2\\*\\*n\n**应用**：快速的进行除2的次方或者乘2的次方（底层运算，执行效率高）\n```\nprint(4 << 1)   # 8 == 4 * 2**1\nprint(-3 << 2)   # -12 == -3*2**2\nprint(5 >> 1)   # 2 == 5//2**1\nprint(5 >> 2)   # 1 == 5//2**2\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["语言学习"],"categories":["python编程"]},{"title":"列表","url":"/2019/02/24/python列表/","content":"本文介绍了python中列表的基础知识和相关用法\n<!-- more -->\n\n### 什么是列表（list）\n**定义**：python提供的容器型数据类型。\n**特点**：可变，有序\n**可变**：元素的值，列表长度，元素的顺序（支持增删改）\n**有序**：每个元素通过下标确定位置（切片和索引）\n\n**列表的字面量**：通过[]括起来，里面有多个元素，每个元素用**逗号**隔开\n**注意**：元素可以是**任意**数据类型，元素数据类型可以**互不相同**\n\n###### 任何类型的数据都可以作为列表的元素\n```\nlist1 = [339, 'dfdk', True, [1,2,3], {'a':10}, lambda x: 2*x]\nprint(len(list1))\n\nlist2 = [\n    90,\n    10.34,\n    'hello'\n]\n\nabc = [1, 10]\nlist3 = [abc, 20]\nprint(list3)\n```\n###一、获取列表元素（语法=字符串）\n**a.获取单个元素**\n**用法**：列表[下标]  - 获取列表中指定下标的元素\n**输出**：列表\n```\nlist1 = [23, 232, 22, 'dfj']\nprint(list1[0], list1[-1])\n```\n**b.获取部分元素（切片）** \n**用法**：列表[开始下标：结束下标：步长]\n**输出**：列表\n**注意**：切片切不到，结果是空列表[]\n\n######**遍历**:一个一个的取出元素\n**直接遍历元素**：通过for循环直接遍历列表拿到每个元素（操作元素与下标无关）\n**遍历下标拿到元素**：通过遍历列表元素中的下标来遍历列表元素（操作下标与下标有关）\n```\nlist1 = [23, 232, 22, 'dfj']\n# 直接遍历\nfor item in list1:\n    print(item)\n\n# 通过下标遍历\nfor index in range(len(list1)):\n    print('下标', index)\n    print(list1[index])\n```\n\n\"\"\"\n###二、 增删改\n**1.增（添加列表元素）**\n**a.append**:\n**作用**：**在最后**添加指定的元素\n**用法**：列表.append(元素）\n**注意**：这个操作不会产生新列表\n```\nanime = ['海贼王', '火影忍者', '一人之下', '秦时明月']\nanime.append('一圈超人')\nprint(anime)    # ['海贼王', '火影忍者', '一人之下', '秦时明月'，'一圈超人']\n```\n**b.insert**:\n**作用**：指定下标前插入元素\n**用法**：\n列表.insert(下标， 元素） - 指定下标前插入元素\n```\nanime = ['海贼王', '火影忍者', '一人之下', '秦时明月']\nanime.insert(2, '犬夜叉')\nprint(anime)  #  ['海贼王', '火影忍者', '犬夜叉'，'一人之下', '秦时明月']\nanime.insert(0, '进阶的巨人')\nprint(anime)  # [ '进阶的巨人'，'海贼王', '火影忍者', '犬夜叉'，'一人之下', '秦时明月']\n```\n**2.删（删除元素）**\n**a.del**\n**作用**： 删除指定**下标**对应的元素\n**用法**：del 列表[下标]\n**说明**：\n##### del:关键字 - 可以删除任何数据\n\n\n**注意**：不会产生新的列表，**下标会重新分配**\n**下标不能越界**，否则会报错\n```\nanime = ['海贼王', '火影忍者', '一人之下', '秦时明月']\ndel anime[-2]\nprint(anime)   #　 ['海贼王', '火影忍者',  '秦时明月']\n# del anime[100]\n# IndexError: list assignment index out of range\n# 下标错误：列表元素下标超过范围\n```\n**b.remove**:\n**用法**：\n列表.remove(元素） - 删除第一个指定元素\n**注意**：元素重复，只删第一个，而且删除的元素必须存在，否则报错\n```\nanime = ['海贼王', '火影忍者', '一人之下', '秦时明月']\nanime.remove('海贼王')\nprint(anime)   #  ['火影忍者', '一人之下', '秦时明月']\n```\n**c.pop**:\n**用法**：\n列表.pop() - 将列表中最后一个元素**取出**\n列表.pop(下标） - 将列表中指定下标对应的元素**取出**\n**返回值**：元素\n```\nanime = ['海贼王', '火影忍者', '一人之下', '秦时明月']\ndel_item = anime.pop()    # 默认最后的元素\nprint(anime)    #  ['海贼王', '火影忍者', '一人之下']\nprint(del_item)   # 秦时明月\ndel_item = anime.pop(0)   # 指定下标的元素\nprint(anime)   #  ['火影忍者', '一人之下']\nprint(del_item)   # 海贼王\n```\n\n\n## 坑1：直接遍历元素：\n删除序列部分元素，删不去，直接删元素会改变序列的长度\n\n**解决办法:**\n遍历序列的**切片**(产生新的列表）\n\n## 坑2 ：通过下标取元素：\n下标越界和元素不全\n\n**解决办法：**\nwhile循环来做\n当元素要删除，下标值不动\n不需删除，下标加1\n\n## 前提：当列表需要删除时，才考虑坑\n```\n# 简写方式：列表[：]（切片）＝＝　浅拷贝\nfor x in age[:]:\n    if int(x) < 18:\n        age.remove(x)\nprint(age)\n# 遍历下标\nages = [12, 13, 43, 45, 10]\nnew_ages = []\nindex = 0\nwhile index < len(ages):\n    age = ages[index]\n    #　判断下标是否加１\n    if age < 18:\n        del_item = ages.pop(index)\n        new_ages.append(del_item)\n    else:\n        index += 1  # 不需要删除下标增加\nprint(ages, new_ages)\n```\n**3.改（修改元素的值）**\n**用法**：\n列表[下标] = 新值  - 修改指定下标对应的值\n```\nlist1 = [1, 2, 2, 4]\nlist1[0] = 'dadf'\nprint(list1)　＃ ['dadf', 2, 2, 4]\n```\n\n###三、列表相关运算\n**1. 相关运算**：+， *\n+：\n列表1 + 列表2  - 将两个列表的元素进行拼接，产生一个新的列表\n*：\n列表＊n - 将列表中的元素重复n次，产生一个新的列表\n\nb.支持比较运算\n和字符串的原理类似\n**每对元素的类型要一样***\n\n**2 in / not in   （强调！！！！）**\n元素 **in** 列表   -  判断列表中是否存在指定的**元素**\n和字符串不同，元素\n元素 **not in** 列表  - 判断列表中是否存在指定的**元素**\n**应用**：判断一个列表的元素是否存在于另一个列表中\n```\nprint([1, 2] in [1, 2, 3])  # False\nprint([1, 2] in [[1, 2], 30, 'abc'])    # True\nprint([1, 2] not in [1, 2, 3])    # True\n```\n\n**3 list**\n**list(数据)** - 将其他类型的数据转换成列表；\n数据是否能转？ - **只有序列**才能转换成列表\n怎么转？ - 使用list(数据）\n**原理**：将序列中所有的**元素**转换成列表的元素\n**注意**：不能用类型名来作为变量名，否则会有隐患\n```\nlist1 = list('hello')   \nprint(list1)　　　＃　['h', 'e', 'l', 'l', 'o']\nstr1 = str(list1)  # 字符串只是单纯的在外面加‘’\nprint(str1)\n```\n**4 序列其他方法**\n**max(序列)** - 获取序列中**最大**的元素\n**min(序列)** - 获取序列中**最小**的元素\n**sum(序列)** - 求序列中所有元素的**和**\n**要求**：序列中的元素类型必须一致，并且类型支持比较运算和\n加法运算，一般是（数字序列）\n```\nprint(max([12, 244, 431, 343]))   # 431\nprint(min([12, 244, 431, 343]))   # 12\nprint(sum([12, 244, 431, 343]))   # 1030\nprint(sum(range(101)))    # 5050\n```\n###四、列表内置函数\n######通过- > 列表.函数名（）  来调用\n| 序号   | 函数名                                     | 作用                          |\n| ---- | --------------------------------------- | --------------------------- |\n| 1    | count(obj)                              | 统计某元素在列表中出现的**次数**          |\n| 2    | extend(seq)                             | 在列表**末尾**一次**追加**另一个列表中的多个值 |\n| 3    | index(obj)                              | 获取元素在列表中第一个匹配的下标值           |\n| 4    | reverse()                               | 将列表元素反向                     |\n| 5    | sort(cmp=None, key=None, reverse=False) | 将列表元素进行**排序**               |\n| 6    | clear()                                 | 将列表**清空**                   |\n| 7    | copy                                    | **复制**列表(顶层)                |\n**1.count(obj)**\n**作用**：统计某元素在列表中出现的**次数**\n**输入**：列表中的**元素**\n**输出**：数字  \n```\nlist1 = [12, 32, 4, 23, 44, 12, 45, 8, 23]\nprint(list1.count(12))   # 2\n```\n**2.extend(seq)**\n**作用**：在列表末尾**追加**另一个**序列**的所有元素\n**输入**：序列\n**输出**：None\n##注意：该方法没有返回值，只会直接在列表末添加元素\n```\nlist1 = [12, 34, 48, 23, 45]\nlist2 = ['abc', '这谁好帅']\nprint(list1.extend(list2))  # None\nprint(list1)  # [12, 34, 48, 23, 45, 'abc', '这谁好帅']\n```\n**3.index(obj)**\n**作用**：获取元素在列表中第一个匹配的下标值\n**输入**：元素\n**输出**：数字\n```\nlist1 = ['这是谁', '好帅', '低调', '好的', '好烦', '帅了一生']\nprint(list1.index('好帅'))   # 1\n```\n**4.reverse()**\n**作用**：将列表元素反向\n**输出**：None\n##注意：该方法没有返回值，只会将原列表反向\n```\nlist1 = ['这是谁', '好帅', '低调点', '好的', '好烦', '帅了一生']\nprint(list1.reverse())   # None\nprint(list1)  #　['帅了一生', '好烦', '好的', '低调点', '好帅', '这是谁']\n```\n**5.sort(cmp=None, key=None, reverse=False)**\n**作用**：对列表元素进行排序\n**说明**：\n**reverse**:反向\n**输出**：None\n##注意：该方法没有返回值，只会将原列表进行修改\n```\nlist1 = [12, 32, 4, 3, 44, 222, 45, 8, 13]\nprint(list1.sort())   # None\nprint(list1)   # [3, 4, 8, 12, 13, 32, 44, 45, 222]\nprint(list1.sort(reverse=True))  # None\nprint(list1)   # [222, 45, 44, 32, 13, 12, 8, 4, 3]\n```\n**6.clear()**\n**作用**： 清空列表\n**输出**：None\n##注意：该方法没有返回值，只会将原列表进行修改\n```\nlist1 = [12, 32, 4, 3, 44, 222, 45, 8, 13]\nprint(list1.clear())  # \nprint(list1)   # []\n```\n**7.copy**\n**作用**： 复制列表\n**输出**：一个新的列表\n```\nlist1 = [12, 32, 4, 3, 44, 222, 45, 8, 13]\nprint(list1.copy())  \n# [12, 32, 4, 3, 44, 222, 45, 8, 13]\n```","tags":["语言学习"],"categories":["python编程"]},{"title":"分支和循环","url":"/2019/02/24/python分支和循环/","content":"本文介绍了python中循环和分支相关的知识\n<!-- more -->\n\n#一、分支\n**python中的分支结构只有if语句，没有switch**\n\n###1.什么时候需要使用if语句？\n**定义**：做某件事情，需要满足某个条件\n\n###2.如何使用if语句？\n**语法**：\n**a.语法1**：\nif 条件语句：\n    代码段1\n**说明**：\n**if**:关键字  -> 如果的意思\n**条件语句**：任意一个有结果的语句（最终会转换成布尔值再判断）\n**：**：固定写法（冒号后面第一行必须有缩进，冒号缩进组合形成代码段）\n**代码段1**：和if保持**一个**缩进的**一行或者多行**语句\n\n**执行过程**：\n**第一步**：判断条件语句是否为True\n**第二步**：为True:执行后面的代码段1和其他语句；\n为False:不执行代码段1，直接执行if**外边**的其他语句\n```\nage = 16\nif age >= 18:\n   print('你可以玩耍了')\n # 和if保持一个缩进，均满足条件，都会执行\n   print('你可以去上海迪士尼玩了')\n print('=====')     # 没有和if保持一个缩进，程序都会执行\n```\n**总结**：需要满足某个条件才执行的语句就写在if里面，不管条件是否满足都执行的语句，写在if的外面\n\n**b.语法：**\nif 条件语句：\n    代码段1\nelse：\n    代码段2\n（其他语句）\n**说明**：\n\n**else**：关键字  -> 否则的意思(不满足if条件的其他情况）\n**执行过程**：\n**第一步**：判断条件语句是否为True\n**第二步**：为True:执行后面的代码段1；为False:执行代码段2，然后执行else**外边**的其他语句\n\n```\nnum = int(input('输入一个数字：'))\nif num % 2 == 0:\n    print('%d是偶数' % num)  # 满足条件执行\nelse:\n    print('%d是奇数' % num)   # 不满足条件执行\n\nprint('=========')  # 无论与否，都会执行\n```\n**c.语法**：\n**应用**：当情况不止两种时，采用\nif 条件语句1：\n    代码段1\nelif 条件语句2:\n    代码段2\nelif 条件语句3：\n    代码段3\n...\n**else：**\n    代码段n\n（其他语句）\n**说明**：\n**elif**:关键字  -> 前面条件不满足，则开始判断其他条件是否满足\n\n**执行过程**：\n**第一步**：判断条件语句1是否为True\n**第二步**：为True:执行后面的代码段1；执行其他语句\n**第三步**：为False:判断条件语句2是否为True\n**第四步**：重复二、三步骤\n**第n步**;前面都不成立，执行else后面的语句，然后执行其他语句\n**注意**：后面的语句判断的前提是前面的条件语句不成立\n```\nsalary = 20000\nif salary <= 5000:\n    print('水中游')\nelif salary <= 10000:\n    print('同城游')\nelif salary <= 15000:\n    print('国内游')\nelse:\n    print('国外游')\nprint('----------------')\n```\n\n\n**补充**：a. python中可以使用3个双引号或者3个单引号，来表示一个字符串\n    b. else不是一定要写，根据情况后面的else结构可以没有！\n###扩展\n**1.if的嵌套**\n**定义**：if结果里还可以写if结构\n\n```\n# 输入一个数，如果是偶数，打印“xx是偶数”，同时判断是否能被4整除\n# 如果可以打印“xx还是4的倍数”，如果不是只打印“xx是奇数”\nnum = int(input('请输入一个数字：'))\nif num % 2 == 0:  # if嵌套if语句\n    print('%d是偶数' % num)\n    if num % 4 == 0:   # num是偶数才判断\n        print('%d还是4的倍数' % num)\n    else:\n        print('是偶数但是不是4的倍数！')\nelse:  # else嵌套if语句\n    print('%d是奇数' % num)\n    if num % 5 == 0:\n        print('这个奇数是5的倍数')\n```\n\n **2.三目运算符**\nc语言/java/js语言中：表达式？值1：值2  -> 判断表达式的值是否为True,\n为True整个表达式的结果是值1，否则是值2\n\npython中：**值1 if 表达式 else 值2**  -> 判断表达式的值是否为True,\n为True整个表达式的结果是值1，否则是值2\n\n**注意**：当只有两种情况时使用\n```\n# 练习：输入年份，判断是否是闰年。是，输出‘闰年’，\n# 否则输出‘不是闰年’,闰年条件：被4整除，不能被100整除，\n# 或者被400整除\nyear = int(input('请输入一个年份：'))\nprint('闰年') if (year % 4 == 0 and year % 100 != 0) \\\n               or year % 400 == 0 else print('不是闰年')\n```\n\n#二、循环\n**1.为什么使用循环**\n**for**循环和**while**循环\n**目的**：实现某个功能的时候需重复操作，则考虑循环\n\n###2. for 循环\n**a.语法**：\nfor 变量 in 序列：\n    循环体\n**说明**：\n**for**：关键字\n**变量**：一个变量名（赋值与否均可），一般是新的变量\n**in**:关键字（固定写法）\n**序列**：属于序列的数据；包括（字符串，列表，字典，集合，元祖，生成器，迭代器，range)\n**注意**：序列的**个数**决定循环体执行的**次数**\n**:**:固定写法\n**循环体**：需要重复执行的代码；和for保持一个缩进\n\n**执行过程（重要）**：\n**第一步**：让变量去序列中取值，一个一个取\n**第二步**：取一个值，执行一次循环体\n```\nfor char in 'a':   # 遍历序列\n    print('====')\n    print(char)\nprint('aaaaaaa')\n\n# 练习：给一个字符串'hosee 23jh!hs89_=sssAsK',统计数字出现的个数\ncount = 0  # 保存数字的个数，默认是0个\nfor item in 'hosee 23jh!hs89_=sssAsK':\n    if '0' <= item <= '9':\n        count += 1\nprint(count)\n```\n**range函数**\n**range(N)** -> 产生数字序列（0~N-1）（N必须是整数,n > 0）\n**range(m,n)** -> 产生数字序列 m~ n-1 (m,n必须是整数，n > m)\n**range(m,n,step)** -> 产生从m开始，每次值加step产生\n下一个数字，直到n前一个为止。\n（m,n必须是整数， step > 0,n>m  step <0 n<m)\n\n\n取奇数\nfor item in range(1, 100, 2):\n```\n# 计算1+2+3...+100\nsum1 = 0\nfor num in range(1, 101):\n    sum1 += num\nprint(sum1)\n\n# 练习：求100以内所有能被13或者7整除的数的和\nsum2 = 0\nfor item in range(100):\n    if item % 13 == 0 or item % 7 == 0:\n        sum2 += item\nprint(sum2)\n```\n\n**通过遍历字符串下标遍历字符串**\n\n```\nstr1 = 'hello world:'\n# index是字符串对应的下标，从前往后取\nfor index in range(len(str1)):\n    print(str1[index])\n# index是字符串对应的下标，从后往前取\nfor index in range(-1, -len(str1)-1, -1):\n    print(str1[index], end=' ')\n```\n###3.while循环\n\"\"\"\n**a.语法**：\nwhile 条件语句：\n    循环体\n**说明**：\n**while**:关键字；当...的时候\n**条件语句**：和if后面的条件一致（赋值语句除外）\n**：**：固定写法\n**循环体**：需要重复执行的语句写在循环体中；\n和while保持一个缩进\n\n**执行过程**：\n**第一步**：判断条件语句是否为1\n**第二步**：执行循环体\n**第三步**：重复一、二步\n**第四步**：直到条件语句为0，结束循环，执行后面的语句\n\n##for和while的选择\n**for能做的事情，while都可以做到，while能做的事情，\nfor循环不一定能做到**\n**for场景**:1.遍历序列 2.循环次数确定\n**while场景**：1.死循环 2.循环次数不确定\n\n```\n# 控制while循环次数\nnum = 0\nwhile num < 4:\n    num += 1\n\n# 用while循环遍历字符串\nstr1 = 'how are you'\nindex = 0\nwhile index < len(str1):\n    print(str1[index])\n    index += 1\n```\n#三、continue、break和else\n\n**1.continue**\ncontinue是python关键字，\n**要求**：只能用在循环体中\n\n**功能**：\n**while**:执行到此，结束当次循环，直接进入下次循环的判断\n**for**:让变量去取下一个值\n**while**:直接去判断while后面的条件是否为1\n\n**2.break**\nbreak是python关键字，\n**要求**：只能用在循环体中\n**功能**：执行到此，循环直接结束，直接执行其他语句\n```\n# 找到大于111的数字当中第一个能够被17整除的数\nnum = 111\nwhile True:\n    if num % 17 == 0:\n        print(num)\n        break\n    num += 1\n```\n**3.else**\nfor 变量 in 序列：\n    循环体\n**else**：\n    代码段\nwhile 条件语句：\n    循环体 \n**else**:\n    代码段\n\n**执行过程**：循环过程不变，else后面的代码段，循环自然死亡就会执行，但遇到break结束，就不会执行    \n**for循环**\n```\nfor x in range(5):\n    print(x)\nelse:\n    print('for循环自然死亡')  # 提示循环结束\nprint('==========')   # 不管如何，都会执行\n```\n**while循环**\n```\nindex = 0\nwhile index < 5:\n    if index == 3:\n        break\n    index += 1\nelse:\n    print('while自然死亡')\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","tags":["语言学习"],"categories":["python编程"]},{"title":"字符串","url":"/2019/02/24/python字符串/","content":"本文介绍了字符串的相关用法\n<!-- more -->\n\n#一、获取字符\n##1.单个字符\n**原理**：字符串中的每一个**字符**都会对应一个**唯**一的**下标**（索引）\n**下标**：用来表示**字符**在字符串中的**位置**\n**下标方式**：\n**1**.0开始依次增加 ， 0 对应的第一个字符（**0~字符串长度-1**）\n**2**.-1开始依次减少 ， -1 对应的是最后一个字符（**-1~ - 字符串长度**）\n**a.语法**：\n字符串[下标]  - 获取字符串中**指定下标**的对应的**字符**\n**b 说明**：\n**字符串** - 字面量（只要结果是字符串的表达式都可以）字符串变量\n**[]**- 固定写法\n**下标** - 需要获取的**字符**对应的**下标**\n**注意**:这里的下标**不能越界**,否则会报错\n示例：\n```\nresult = 'how are you'[4]    \n# 获取字符串下标是4的字符，并且赋给变量reault\nprint(result)    # a\nresult = 'how are you'[12]\n# IndexError: string index out of range  \n# 下标错误：字符串下标超过范围\nstr1 = 'good good study! day day up!' \n# str 类型名 会覆盖原来的类型功能，不报错，但是不建议作为变量名\nprint(str1[10])\n```\n##2.部分字符（字符串切片）\n###方法1：\n**a. 语法**：\n字符串[开始下标:结束下标：步长]  - 从开始下标开始获取到结束下标**前**为止(**顾头不顾尾**)\n每次下标止**加上**步长去**获取下一个**元素\n**b. 说明**：\n**字符串** - **有结果的表达式**\n[]  -  固定写法\n开始下标、结束下标 - 下标值(**下标可以越界**）\n**步长** - **整数**（正数和负数都可以）\n**正数**：从开始下标**从前往后**获取\n  **负数**：从开始下标**从后往前**获取\n\n**c. 注意**：\n步长为**正**:\n**要求**：**开始下标**对应的字符的位置必须在**结束下标**对应的字符的位置的 **前面**，**否则**结果是**空串**\n步长为**负**:\n**要求**：**开始下标**对应的字符的位置必须在**结束下标**对应的字符的位置的**后面**，**否则**结果是**空串**\n示例：\n```\nstr1 = 'hello python'\nprint(str1[0:4:-2])    # 切片的时候，倒过来取不到就是空串\nprint(str1[0:-1:2])    # 下标数值与大小无关\n\nprint('结果3', str1[-1:-100:-1])    # 结束下标越界\nprint('结果4', str1[100:-100:1])    # 下标越界\n\n# 练习：获取一个字符串中所有下标奇数的字符（从前往后）\nstr2 = '1234567'\nprint(str2[1:100:2])   # 2 4 6\n```\n###方法2：\n字符串[开始下标：结束下标] - 省略步长\n省略步长：默认步长为1\n**过程**：从开始下标开始到结束下标**前**为止，一个个取\n\n###方法3：字符串[:结束下标：步长]（省略开始下标和结束下标）\n**a. 省略开始下标** \n步长为**正**：从**第一个字符**开始取到结束下标**前**为止\n步长为**负**：从字符串的**最后一个**字符开始取到结束下标**前**为止\n\n**b. 省略结束下标**\n字符串[开始下标：：步长] \n步长为**正**：从开始下标**开始**取**到最后**一个字符为止；\n步长为**负**：从开始下标**开始**取到**第一个**字符为止 \n示例：\n```\nstr4 = 'when i was yuong!'\nprint(str4[:6], str4[:6:-1])   # when i !gnouy saw\nprint(str4[2:], str4[2::-1])   # en i was yuong! ehw\nprint(str4[:])   # 从前到后\nprint(str4[::-1])  # 从后往前\n```\n**注**:**不会改变**字符串的的**结果**，只是**获取内容**\n\n\n#二、字符串运算符\n**1. 数学运算符**：+ *\n**2. 比较运算符**：>, <, ==, !=, >=, <=\n支持所有的比较运算符\n###1.数学运算符\n**a. +**: 字符串1 + 字符串2\n**作用**：将两个字符串**拼接**在一起**产生**一个**新的字符串**\n**注意**：字符串只能是同类型的数据进行运算！\n**b. \\***: 字符串 * n - n是正整数\n**作用**：字符串**重复**n次产生一个**新的字符串**\n```\nstr1 = 'abc' + '123'\nprint(str1)\n\n# print('abc' + 123)  # TypeError: must be str, not int\n# 类型错误：必须是字符串，不能是整型\n\nnew_str = 'abc'*3   # abcabcabc\nprint(new_str)\n\nprint('sdf' + 'dfd'*2)   # sdfdfddfd\n```\n\n###2. 比较运算符\n**a.比较是否相等**\n==， ！=  可以判断两个字符串是否相等或者不相等\n\n**b.比较大小**\n**第一步**：两个字符串字符一一对应\n**第二步**：找不同\n**第三步**：判断不同字符的编码值\n**第四步**：比较编码值的大小\n**应用**：\n1 判断是否是**小写**字母：'a'<= char <= 'z'\n2 判断是否是**大写**字母：'A'<= char <= 'Z'\n3 判断是否是**中文**：'\\u4e00' <= char <= '\\u9fa5'\n**注意**：这里字母必须加单引号\n```\nprint('abc' == 'abc')    # True\n\nprint('abdcb' > 'abcde')    # True\n\n# 判断一个字符串中第三个字符是否是字母?\nstr3 = 'sdd34.erer'\nchar = str3[2]   # 取出第三个字符\nprint('是否是字母', 'a' <= char <= 'z' or 'A' <= char <= 'Z')\nprint('是否是中文：', '\\u4e00' <= char <= '\\u9fa5')\n```\n###3.in 和 not in 操作\n**a.**字符串1 **in** 字符串2   -> 判断字符串2中是否包含字符串1\n（判断字符串**1是否是**字符串**2**的**子串**）\n\n**b.**字符串1 **not in** 字符串2   -> 判断字符串2中是否不包含字符串1\n（判断字符串**1是否不是**字符串**2**的**子串**）\n```\n# in\nprint('zhi' in 'hzhi isd')   # True\nprint('dfj' in 'ddddddd')    # False\n\n# not in\nprint('zhi' not in 'hzhi isd')   # False\nprint('dfj' not in 'ddddddd')    # True\n```\n###4. len函数\n**用法**：len(序列）\n**目的**：获取序列的**长度**即获取序列中元素的**个数**\n**输入**：序列\n**输出**：数字（包括0）\n\n**注意**：\n一个转义字符：长度为1\n一个编码字符：长度为1\n一个空格：长度为1\n一个tab键：长度为4 \n一个\\t表示的tab键：长度为1\n示例：\n```\nprint(len('sdfd'))   # 4\n\nstr1 = input('请输入：')     # 123456\nprint(str1[len(str1)-1])     # 6\n\nstr2 = '    abc'\nprint(len(str2))   # 7\n```\n\n#三、格式化字符串\n###1. 什么是格式字符串？\n**定义**：字符串中通过**格式占位符**来代替字符串中**变化的部分**，然后在后面通过**数据或者变量**确定变化\n\n###语法：\n包含占位符的字符串 % （每个占位符对应的变量）\n包含占位符的字符串 % （值1， 值2， 值3....）\n常见占位符： \n**%s** （字符串）\n**%d** （数字）\n**%f** （小数）  (%.**n**f 保留小数点后**n位小数**）\n**%c** （字符）   （可以将编码值转换成字符）\n**%** - 固定写法\n（） - 固定写法\n**注**：字符串中只有**一个**占位符的时候，这个（）可以**省略**\n**值** - 个数和类型和位置一一对应，即值和占位符要一一对应\n```\nname = input('姓名：')\nage = 18\nsex = '男'\nmassage = '我叫%s,今年%d岁，性别：%s'\nprint(massage % (name, age, sex))\n\nmessage = '我叫%s,今年%d, 性别：%s, \\\n月薪%f万' % (name, age, sex, 3.5)\n\nprint(message)      \n```\n\n**注**：可以直接在print函数里面写，不用先保存在变量中\n\n\n#四、类型转换\n###1.基本语法\n语法：\n类型名（数据）   - 将指定的**数据**转换成指定**类型**\n\n**说明**：\n**类型名** - 任何python支持的，或者是自定的类型都可以\n**数据** - 需要转换的对象（类型不同要求可能不同）\n\n###2. 转换实例\nint(数据)  - 将其他数据转换成整型\nfloat(数据） - 将其他数据转换成浮点型\nbool(数据） - 将其他类型转换成布尔\nstr(数据） - 将其他数据转换成字符串\n\n\n**a.整型**\n```\nprint(int(12.8)) # 浮点数可以转换成整数，直接保留整数部分\nb = int(True) # 1 布尔可以转换成整数，True->1, False->0\nprint(b)\nc = int('120')  # 只有去掉字符串的引号后本身就是\n# 一个整数的字符串才能转换成整型\nc = int('avd')   # 报错\n# ValueError: invalid literal for int() with base 10: 'avd'\n# 值错误：以10为基数的int()的文本无效:'avd'\n```\n**b. 浮点型**\n```\na = float(100) # 所有整数都可以转换成浮点数，在后面加.0\nb = float(True) # 布尔转换成浮点数,True->1.0,False->0.0\nc = float('12.5')    \n# 去掉引号后本身就是一个数字的字符串，能转换成浮点型\nprint(a, b, c)\n```\n**c. 布尔类型**\n*python中所有的数据都可以转换成布尔*\n**注**：所有为空为0的值会转换成False,其他都是True\n```\na = bool(100)\nb = bool(0.0)\nc = bool('')\nd = bool([])\nf = bool(None)\nprint(a, b, c, d, f)   # True False False False False\n```\n**d. 字符串类型**\n*所有的数据都可以转换成字符串，而且转化的时候就只是单纯的在外面加两个单引号*\n**应用**：字符串的拼接   字符串的运算\n```\na = str(100)\nprint(type(100))    #  <class 'str'>\n```\n#五、内置函数\n\n###使用方法：字符串.方法名（）\n\n####1 capitalize()\n**目的**：将字符串的第一个字母变成大写,其他字母变小写\n**返回值**：首字母大写，**其他字母小写**的新字符串\n**注意**：首字符如果是**非字母**，首字母不会转换成大写，会转换成小写\n```\n# 注意：只有第一个字符是字母的时候才有效\nstr1 = 'ddfff'\nprint(str1.capitalize())    # Ddfff\nstr=\"123 hello PYTHON\"\nstr.capitalize()   # 123 hello python\n```\n####2 字符串对齐方式\n**说明**：\n **width**:字符串长度(整数），下同\n**fillchar**：填充符号（字符），只能是单个字符，下同\n- **center(width, fillchar)**\n   **目的**:居中 \n- **ljust(width, fillchar)**\n   **目的**：左对齐\n\n- **rjust(width, fillchar)**\n   **目的**：右对齐\n   示例：\n```\nstr1 = 'abc'\nprint(str1.center(7, '0'))    # 00abc00\nprint(str1.ljust(7, '*'))     # abc****\nprint(str1.rjust(7, '='))     # ====abc\n```\n**注意**：当fillchar长度**小于**字符串长度时，会直接返回字符串\nfillchar默认是**空格**\n####3 count(str)\n**用法**：字符串1.count(字符串2）\n**目的**： 在字符串1中统计字符串2出现的**次数**\n**输入**：两个字符串（可以传参开始和结束下标）\n**输出**：数字\n```\nprint('ddfjdkfdfkd'.count('d'))   # 5\n```\n####4 isalpha()\n**目的**： 判断字符串中是否**全是字母**\n**注意**：**非ASCII码**表中的字符检测不出来\n```\nprint('dfdfdj'.isalpha())   # True\nprint('dfdfw1j'.isalpha())   # False\n```\n####5 join(seq)\n**用法**：字符串1.join(字符串2）\n**目的**：将字符串1插入到字符串2中\n**输入**：两个字符串\n**输出**：一个新的字符串\n**注意**：每个字符之间，**最前后**不会插入\n\n```\nnew_str = '*'.join('dffkd')\nprint(new_str)    # d*f*f*k*d\n```\n####6 split\n**用法**：字符串1.split(字符串2）\n**目的**：以字符串2去**切割**字符串1\n**输入**：两个字符串\n**输出**：列表\n**应用**：通过url获取图片的名字\n```\nprint('12,34,34'.split(','))   # ['12', '34', '34']\nurl = \"http://www.baidu.com/python/image/123456.jpg\"\npath =url.split(\"/\")[-1]\nprint(path)    # 123456.jpg\n```\n####7 zfill(width)\n**目的**：长度为 width ，原字符串**右对齐**，前面**填充0**\n**补充**：zfill(width)效果等同于rjust(width, '0')\n```\nnum = input('进班顺序(1~50)：')    # 12\nid2 = 'py1809' + num.zfill(4)\nprint(id2)    # py18090012\n```\n####8 isdecimal()\n**目的**：检查字符串是否**只**包含十进制字符 \n**输出**：布尔值\n```\nstr1 = '123hnfd'\nprint('123errer'.isdecimal())   # False\nprint('12323'.isdecimal())   # True\n```\n####9 upper()\n**目的**：转换字符串中所有小写字母为大写\n**输出**：新的字符串\n```\nprint('djkdfd'.upper())  # DJKDFD\n```\n####10 title()\n**目的**：将多个单词的首字母转换成大写\n**输出**：新的字符串\n**注意**：非字母后的第一个字母转换成大写字母\n```\nprint('mynameis'.title())    # Mynameis\nprint('my_name_is'.title())    # My_Name_Is\n\ntxt = \"b2b2b2 3g3g3g\"\nx = txt.title()\nprint(x)    #　B2B2B2 3G3G3G\n```\n####11 swapcase()\n**目的**：将字母大写转小写 and 小写转大写\n**输出**：新的字符串\n**说明**：就是将字母取反\n```\nprint('dfDFfdf'.swapcase())    # DFdfFDF  \n```\n####12 max(str)\n**目的**：获取字符串 str 中**最大**的字母\n**输出**：字符\n**注意**：有大小写的字符串中返回的是小写字母的最大值\n```\nprint(max('zheshi'))   # z\nprint(max('Zheshi'))  #ｓ\n```\n####13 min(str)\n**目的**：获取字符串 str 中**最小**的字母\n**输出**：字符\n**注意**：有大小写的字符串中返回的是小写字母的最小值\n```\nprint(min('znxjdsyeiw'))    # d\nprint(min('Znxjdsyeiw'))　　#ｚ\n```\n####14 lower()\n**目的**：转换字符串中**所有**大写为小写\n**输出**：新的字符串\n```\nprint('DFDFDKDFDdd'.lower())   # dfdfdkdfddd\n```\n####15 istitle()\n**目的**：如果字符串采用PEp8方式，但是单词首字母都是大写，返回 True，否则返回 False\n**输出**：布尔值\n```\nprint('dfjd_dfdjf'.istitle())   # False\nprint('My_Name'.istitle())   # True\n```\n####16 isdigit()\n**目的**：判断字符串是否只包含数字\n**输出**：布尔值\n```\nprint('dfdf343434'.isdigit())   # False\nprint('14343545454'.isdigit())    # True\n```\n####17 isalnum()\n**目的**：判断字符串至少有一个字符并且所有字符是否都是字母或数字\n**输出**：布尔值\n```\nprint(''.isalnum())    # False\nprint('ddffdff'.isalnum())   # True\nprint('123354'.isalnum())    # True\nprint('dfdf2434'.isalnum())    # True\n```\n####18 isnumeric()\n**目的**：判断字符串中是否只包含数字字符（中文数字也可以）\n**输出**：布尔值\n```\nprint('434838'.isnumeric())    # True\nprint('434fdfg'.isnumeric())    # False\n```\n####19 isspace()\n**目的**：判断字符串中是否为空白符(不是空串）\n**输出**：布尔值\n**空白符**：空格、制表符(\\t)、换行(\\n)、回车等(\\r）\n```\nprint(' '.isspace())    # True\nprint(''.isspace())    # False\nprint('dfdf'.isspace())    # False\n```\n####20 lstrip([chars])\n**目的**：截掉字符串左边的空格或指定字符。\n**输出**：新的字符串\n```\nprint(' dffdfd'.lstrip())    # dffdfd\n```\n####21 islower()\n**目的**：如果字符串中包含至少一个区分大小写的字符，判断所有这些(区分大小写的)字符是否都是小写\n**输出**：布尔值\n```\nprint('fdddfdfA'.islower())    # False\nprint('fdddfsdsf'.islower())    # True\n```\n####22 isupper()\n**目的**：如果字符串中包含至少一个区分大小写的字符，判断所有这些(区分大小写的)字符是否都是大写\n**输出**：布尔值\n```\nprint('fdddfsdsf'.isupper())    # False\nprint('DSDSDDSD'.isupper())    # True\n```\n####23 rstrip([chars])\n**目的**：删除字符串末尾的指定字符（默认为空格）\n**输出**：新的字符串\n```\ndemo = '我是一个例子:::'\ndemo_1 = '    真巧，我也是例子     '\nprint(demo.rstrip(':'))   #　我是一个例子\nprint(demo_1.rstrip())    #     真巧，我也是例子\n```\n####24 strip([chars])\n**目的**：移除字符串头尾指定的字符（默认为空格）或字符序列\n**输出**：新的字符串\n**注意**：只会删除两头，不会删中间\n删除多个字符时：只要头尾有对应其中的某个字符即删除，不考虑顺序\n```\nstr = \"*****我是**一个**例子!!!*****\"\nprint (str.strip('*'))   # 我是**一个**例子!!!\n# 字符序列\nstr = \"12我也是一个例子21\"\nprint (str.strip('12'))  # 我也是一个例子\n```\n####25 endswith(suffix[, start[, end]])\n**目的**：判断字符串是否以指定后缀结尾\n**说明**：\n**suffix**: 字符串或者是一个元素。\n**start**: 开始下标\n**end**:  结束下标\n**输出**：布尔值\n**注意**：\nstart 参数以 0 为第一个字符索引值。\nend 参数以 1 为第一个字符索引值。\n```\nStr = '哇塞，这是一个例子!!!'  \nsuffix = '!!'\nprint(Str.endswith(suffix))  # True\nprint(Str.endswith(suffix, 9))   # True\nsuffix = 'run'\nprint(Str.endswith(suffix))   # False\nprint(Str.endswith(suffix, 0, 19))  # False\n```\n####26 replace(old, new[, max])\n**目的**：将旧字符串替换成新的字符串\n**说明**：\n**old** ：将被替换的子字符串。\n**new** ： 新字符串，用于替换old子字符串。\n**max**：可选字符串, 替换不超过 max 次\n**输出**：新的字符串\n```\ndemo = '哇塞，这是一个例子!!!'\nprint(demo)   # 哇塞，这是一个例子!!!\nprint(demo.replace('哇塞', '是的'))  # 是的，这是一个例子!!!\n```\n\n\n\n\n\n\n\n\n","tags":["语言学习"],"categories":["python编程"]},{"title":"运算符","url":"/2019/02/24/python运算符/","content":"本文介绍了python中的运算符和字符串相关的概念\n<!-- more -->\n\n\n#一、python运算符\n###python支持哪些运算符？\n**数学运算符、比较运算符、逻辑运算符、赋值运算符（位运算符）**\n\n**1.数学运算符**：+(加号), -(减号), *(乘号), /(除号), //(整除), %(取余), **(幂运算)\n**a.** *+、-、 \\*、/和数学中的加减乘除一样*\n示例：\n```\nprint(10 + 20)  # 30\nprint(12.6 + 5)  # 17.6\nprint(100 - 110)  # -10\nprint(2 * 3)  # 6\nprint(5 / 2)  # 2.5\n```\n**b.** //（整除）,  数字1 // 数字2  -->  让数字1除以数字2，**结果只取整数部分**\n示例：\n```\nprint(7 // 2)     # 3\nprint(6.5 // 3)   # 2.0\nprint(-5 // 2)    # -3\n```\n**c.** %(取余) ， **求余**\n示例：\n```\nprint(5 % 2)     # 2\nprint(10 % 4)   # 2\n```\n**% 应用一**： 获取一个数的个位数\n示例：\n```\nprint(234 % 10)    # 商23余4 -> 4\n```\n**% 应用二**： 判断一个数的**奇偶性**, 让这个**对2取余**，然后看结果是**0(偶数)**还是**1(奇数)**\n示例：\n```\nprint(20 % 2)  # 0 -> 偶数\nprint(3 % 2)  # 1 -> 奇数\n```\n**补充**：生活中常用于**有规律重复**的事件\n**d.** **(幂运算), x ** y  --> 求x的y次方\n示例：\n```\nprint(2 ** 3)   # 8\nprint(10 ** 4)   # 10000\nprint(16 ** 0.5)    # x ** 0.5 == x ** (1/2) == x开平方\nprint(8 ** (1/3))   # 8开立方\n\nage = 18\nprint(age + 10)     #28   \n```\n**注意**：运算符的运算对象不一定非的是数据，也可以是存数据的变量\n\n**2.比较运算符**：>(大于),  <(小于),  ==(等于), !=(不等于)  , >= , <=\n**输出**：所有的比较运算符的**结果都是布尔值**\n示例：\n```\nprint(10 > 20)     # False\nprint(10 < 20)     # True\nprint(10 == 20)     # False\nprint(10 == 10)    # True\nprint(10 != 20)    # True\nprint(10 != 10)    # False\nprint(10 >= 20)    # False\nprint(20 >= 20)    # True\n```\n**补充**：is的使用\n**变量三要素**，分别是：**类型**(变量中存储的数据的类型)、**值**(给变量赋值的数据)、**地址**(变量真正存储的内容，数据的地址)\n**类型** - type(变量)\n**值** - 直接使用变量，就是使用值\n**地址** - id(变量)\n**== 和 is的区别**\n**==**：判断的是**值**是否相等\n**is**: 判断的是**地址**是否相等\n示例：\n```\nlist1 = [1, 2]\nlist2 = [1, 2]\n# 用一个变量给另一个变量赋值的时候，是将变量中\n# 存储的数据的地址赋给另外一个变量\nlist3 = list1 \nprint(list1, list2)\nprint(id(list1), id(list2))\nprint(list1 == list2, list1 is list2)    # True False\nprint(list1 == list3, list1 is list3)    # True True\n```\n**赋值**：用一个变量给另一个变量赋值的时候，是将变量中存储的数据的地址赋给另外一个变量\n\n**3.逻辑运算符**: **and**(逻辑与), **or**(逻辑或), **not**(逻辑非)\n**输出**：逻辑运算符的**运算对象和运算结果都是布尔值**\n**a.** 值1 **and** 值2  --> 如果**两个都为True**结果就是**True**, **否则**结果是False; 相当于生活逻辑中的'并且'\n```\nTrue and True  -> True\nFalse and True  -> False\nTrue and  False -> False\nFalse and False -> False\n```\n\n**and 应用**：要求多个条件同时满足的时候，就使用逻辑与运算\n**短路操作**：如果第一个条件是False, 就不会再去判断第二个条件，直接让整个与运算的结果是False\n示例：\n```\n练习：能拿奖学金的条件是成绩必须90分以上并且测评分不能低于95\ngrade = 91\nscore = 95\nprint('是否能拿奖学金：', grade > 90 and score >= 95)   # True\n```\n**b.** 值1 **or** 值2   --> 如果**两个都为False**结果才是**False**， **否则**结果是True； 相当于生活逻辑中的'或者'\n```\nTrue or True  -> True\nFalse or True  -> True\nTrue or  False -> True\nFalse or False -> False\n```\n**or应用**： 要求多个条件只要有一个条件满足，就是使用逻辑或运算\n**短路操作**：如果第一个条件是True, 就不会再去判断第二个条件，直接让整个或运算的结果是True\n示例：\n```\n练习： 如果考试成绩低于60分，或者上课不听讲就是降班\ngrade = 54\nis_not_in_class = True    # True代表不在班级，False代表在班级\nprint('是否降班:', grade < 60 or is_not_in_class)\n```\n**c. not** 值1    --> 对值1进行**否定/取反**  (不是、否定)\n```\nnot True   ->  False\nnot False  ->  True\n```\n**not应用**： 否定某个条件\n```\n年龄不小10岁\nage = 20\nprint(not age < 10)\n```\n\n**4.赋值运算符**: =, +=,  -=,  *=,  /=,  //=, %= , **=\n**要求**:赋值符号的左边必须是变量; 右边是有结果的(是值)\n**a**.变量 = 结果   --> 将结果赋给变量\n```\nnum = 100\nnum2 = num     # 变量给变量赋值，赋的是变量的地址\n```\n**b**. +=,  -=,  *=,  /=,  //=, %= , **=\n**要求**:赋值符号的左边除了是变量以外，还要求这个变量已经被赋过值\n示例：\n```\n# 变量 += 数字   --> 变量 = 变量 + 数字 (将变量原来的值加上指定的数字以后的新值再重新赋给变量)\nnum3 = 2\nnum3 += 10    # num3 = num3 + 10  = 2 + 10\nprint(num3)   # 12\n\nnum3 -= 3     # num3 = num3 - 3 = 12 - 3\nprint(num3)   # 9\n```\n\n**5.运算符的优先级**\n数学运算符 > 比较运算符  > 逻辑运算符  > 赋值运算符\n数学运算符中: **   >   *,/,%,//    >    +,-\n优先级高的先算，优先级低的后算。如果有()，先算()里面\n示例：\n```\nTrue == 1, False == 0\nprint(19 + 20 > 6**2+4 or 10 + 3 < 3 * 3)   # False\n19 + 20 > 36 + 4 or  10 + 3 < 9\n39 > 40 or 13 < 9\nFalse or False False\nprint(True + 10, False + 10)\nprint(19 + 20 > (6**2+4 > 10 or 10 + 3 < 3 * 3))\n```\n#二、字符串\n**定义**：通过**单引号**或者**双引号**括起来的**字符集**(文本)就是字符串\n示例：\n```\nstr1 = 'abc'\nstr2 = \"abc123\"\n```\n**1.类型(str)**\nstr是python自己提供的一种**容器型**数据类型, 一个字符串中可以存储多个字符\n\n\n**什么是字符**\n\n**说明**：python中只有字符的概念没有字符类型;如果在python中要**表示一个字符**，用一个**长度是1**的**字符串**来表示\n​          \n**字符串特点**：不可变，有序\n**说明**：\n**不可变**：字符的**值**和字符串的**长度**不可变\n**有序**：每个字符在字符串中的**位置**是确定的\n\n**2.字符串中的字符**\n**a.普通字符**：包括一般的字母、数字、符号、其他文字， 例如：'a', 'G', '1', '0', '+', '^','?', '好'\n**b.转义字符**：通过在一些**特定的字符前**加**\\\\**,来表示**特殊功能**或者**意义**, 这样的字符就是转义字符。\n**\\n**   -    换行\n**\\t**   -    表示一个tab键\n**\\\\'**  -    表示一个单引号\n**\\\\\"**   -    表示一个双引号\n**\\\\**  -    表示一个反斜杠\n\n**注意**：**1.**没有阻止转义的时候，一个转义字符的长度是1  \n     **2.**可以在字符串的**最前面加r/R**,来**阻止转义**。（阻止字符串中所有的转义字符转义） \n\n**c.编码字符**：在字符串中以'**\\u**1234', 这儿的1234表示**四位十六进制**编码值\n\n普通字符和转义字符\n```\nstr3 = 'agh231好'   #普通字符\nstr4 = 'abc\\n123'    #abc 换行打印 123\nstr5 = '\\thello\\'A'     # tab键 hello'A\nstr6 = \"he\\\"llo'A\"\nstr7 = '\\\\ahello\\\\npython'\n```\n阻止转义\n```\nstr8 = R'\\t姓名:小白\\n\\t年龄:18'\nprint(str8)     #\\t姓名:小白\\n\\t年龄:18\n```\n\n**3.字符编码** \n**说明**：计算机在**存储**数据的时候只能**数字数据**，而且是数字的**二进制的补码**\n\n**目的**：为了将字符存储到计算中，给每个**字符**对应的**一个**固定的**数字**。这个**数字**就是这个字符的**编码**\n\n**编码方式**：\n**ASCII**：采用**一个字节**对字符进行**编码**(总共有128个字符)\n**Unicode**：**包含ASCII码**，采用**两个字节**对字符进行**编码**,包含了世界上**所有**的语言和符号，又称万国码\n\n**小写字母**的编码范围(a-z): 97 - 122\n**大写字母**的编码范围(A-Z): 65 - 90\n**中文**编码范围: 0x4e00 ~ 0x9fa5\n\n**相关函数**:\n\n**chr函数**  \n**目的**： 获取编码对应的字符\n**用法**：chr(编码值)\n**输入**： 十六进制编码值\n**输出**：字符\n```\nprint(chr(0x4e00))    # 一\n```\n**ord函数** ：\n**目的**：获取字符的编码值（以**十进制**的形式返回）\n**用法**：ord(字符)\n**输入**：单个字符\n**输出**：十六进制编码值\n```\nprint(ord('金'), ord('彪'))\nprint(hex(ord('金')))\n\nfor x in range(0x4e00, 0x9fa5+1):\n    print(chr(x), end=',')   #获取所有的汉字\n```\n`","tags":["语言学习"],"categories":["python编程"]},{"title":"vim编辑器之神","url":"/2019/02/21/vim编辑器之神/","content":"本文介绍了vim编辑器的基本配置和操作\n<!-- more -->\n\n# vim编辑器之神\n### 配置vimrc配置\n在shell中可以通过 `vim ~/.vimrc` 或者 `vim /etc/vimrc` 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）：\n\n![](../img/vim1.png) \n\n\n### 常用操作\n#### 1.模式切换\n我们可以将vim分为命令模式、编辑模式和末行模式三种  \n**命令模式：**进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区  (最末什么都没有)\n\n**末行模式：**在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作  (最后有一个冒号)\n\n**编辑模式：**在命令模式下按'i'进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 --INSERT-- 或者 --插入--)  \n\n####2.保存和退出\n在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面  \n**w** -- 只保存(类似快捷键ctr+s)     \n**q** -- 退出（在编辑区的内容全部都保存的情况下才有效）   \n**wq** -- 保存并退出  \n**q!**  -- 强制退出（不保存修改信息）    \n\n####3.光标操作  \n以下光标操作都是在命令模式下输入的  \n**^(shift+6)**  -- 移动到行首  \n**$(shift+4)**  -- 移动到行尾  \n**G(shift+g)**\t-- 移动到文件末尾\n**行号G**\t\t\t-- 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行\n**gg**\t\t\t\t-- 移动到文件开头  \n\n####4.文本操作  \n以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入  \n**dd**\t\t\t-- 删除光标所在的行    \n**数字dd**\t\t-- 从光标所在行开始往后面开始删，删除指定数量行内容    \n**:%d**\t\t-- 删除所有     \n\n**yy** \t\t-- 复制光标所在的行  \n**数字yy**\t\t-- 从光标所在行开始复制指定行数的内容   \n**p**\t\t\t-- 将复制的内容粘贴到光标所在的位置  \n**u**\t\t\t-- 撤销      \n**ctr+r**    -- 反撤销    \n\n**:%!sort**  -- 对内容排序  \n\n**:/查找对象[/gice]**\t-- 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找  \n\n\n**:1,$s/被替换对象/替换内容[/gice*]*    -- 将正则表达式匹配到的内容替换成指定内容   \n\n\t-\tg: 全局匹配  \n\t- \ti: 忽略大小写 \n\t-   c: 替换时需要提示  \n\t-   e: 忽略错误  \n\n\n\n\n\n\n\n\n\n\n\n","tags":["软件学习"],"categories":["python编程"]},{"title":"Nginx服务器","url":"/2019/02/21/Nginx服务器安装/","content":"本文介绍了Nginx服务器如何通过git bash安装在linux系统\n<!-- more -->\n\n# Nginx服务器\n### 1.阿里云添加80端口\n阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口\n\n![打开安全组设置](../img/aliyun0.png)  \n![](../img/aliyun2.png)\n![](../img/aliyun3.png)\n![](../img/aliyun4.png)\n\n\n\n### 2. 安装nginx\n\na) 添加nginx存储库  \n\n```python\n\tyum install epel-release\n```\n\nb) 安装nginx\n\n```python\n\tyum install nginx\n```\nc) 运行nginx  \nNginx不会自行启动。要运行Nginx  \n\n```\n\tsystemctl start nginx\n```\n\nnginx的运行命令:  \n\n```\n\tsystemctl status nginx 查看nginx的状态  \n\tsystemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动  \n```\n\nd) 系统启动时启动Nginx  \n\n```\n\tsystemctl enable nginx\n```\n\ne）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：   \n\n```\n\tsudo firewall-cmd --permanent --zone=public --add-service=http \n\n\tsudo firewall-cmd --permanent --zone=public --add-service=https\n\n\tsudo firewall-cmd --reload\n```\n\n\n### 3.nginx目录共享配置  \na) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting  \nb) 打开 etc/nginx/nginx.conf 文件，设置server\n\n```\n\t#共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表\n\troot /home/yuting;\n\tlocation / {\n\t       autoindex on;\n\t       autoindex_exact_size on;\n\t       autoindex_localtime on;\n\t}  \n```\n\n除了可以共享文件，还可以自定义页面\n\n```\n\t#自定义服务器页面\n\tlocation / {\n\t\t\troot /home/yuting;\n\t\t\tindex index.html index.htm;\n\t}\n```\n\n注意： 如果出现权限问题，可以修改目录的权限  \n\n# ssh密钥认证  \n1.在主机和从机上执行：`ssh-keygen`\n\n2.在从机上执行:  `scp  id_rsa.pub  root@主机地址:~/.ssh/master.pub`\n(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’)\n\n3.在主机中的.ssh文件夹中创建authorized_keys文件： `touch authorized_keys` \n\n4.修改文件authorized_keys的权限: `chmod 600  authorized_keys`  \n\n5.将master.pub放进authorized_keys文件中:  `cat master.pub >>  authorized_keys`\n\n6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中\n\n\n\n\n\n\n","tags":["软件安装"],"categories":["python编程"]},{"title":"MySQL配置","url":"/2019/02/21/MySQL配置/","content":"本文介绍了MySQL如何安装在linux系统上\n<!-- more -->\n\nMySQL配置  \n\n1. 下载MySQL源安装包: `wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm`  \n\n2. 安装MySQL源: `yum localinstall mysql57-community-release-el7-8.noarch.rpm`\n\n3. 安装MySQL:  `yum install mysql-community-server`  \n\n4. 设置开启启动MySQL服务: `systemctl enable mysqld`  \n5. 启动/重启MySQL服务：systemctl restart mysqld  \n6. 查看MySQL初始密码：grep 'A temporary password' /var/log/mysqld.log  \n7. 更改MySQL密码：mysqladmin -u root -p'旧密码' password '新密码'  \n   这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法：\n\n　　　　方法一：把密码设置复杂点（这是最直接的方法）\n\n　　　　方法二：关闭mysql密码强度验证(validate_password)\n\n　　　　　　　　编辑配置文件：`vim /etc/my.cnf`， 增加这么一行validate_password=off\n\n　　　　　　　　编辑后重启mysql服务：`systemctl restart mysqld`  \n　　　　　　　　  \n　　　　　　　　  \n8. 设置mysql能够远程访问:  \n   a. 登录进MySQL:  `mysql -uroot -p密码`  \n    b. 增加一个用户给予访问权限: `grant all privileges on *.* to 'root'@'ip地址' identified by '密码' with grant option;`  \n    c. 刷新权限：`flush privileges;­`  \n","tags":["软件安装"],"categories":["python编程"]},{"title":"Hexo博客搭建","url":"/2019/02/21/Hexo博客搭建/","content":"本文介绍了如何通过Hexo搭建和部署博客\n<!-- more -->\n\nHexo博客搭建   \n\n###1. 搭建博客   \n使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js   \n\n1. 首先在自己的电脑上创建一个空的文件夹'Hexo'  \n2. 在gitbash中终端中通过`cd`指令进入到刚才创建的文件夹中   \n3. 输入指令 `npm install -g hexo` 安装Hexo  \n4. 输入指令 `hexo init` 进行初始化  \n5. 依次输入指令`npm install` `hexo server` 启动服务器  \n   博客内容发生改变后可以通过`hexo clean` `hexo generate` `hexo deploy ` `hexo server`刷新后重新启动    \n\n###2. 部署博客  \n\n1. 在github上创建一个空的仓库，仓库名： ``用户名.github.io``  \n2. 修改博客本地仓库中的配置文件（Hexo目录下的_config.yml文件）,在文件末尾添加一下选中内容\n   ![](/Users/yuting/Desktop/Hexo/image1.png)  \n\n3. 使用git部署, 输入指令`npm install hexo-deployer-git --save`  \n4. 输入指令`hexo clean` `hexo generate` `hexo deploy ` 对博客进行提交\n","tags":["软件安装"],"categories":["兴趣爱好"]},{"title":"git常用指令","url":"/2019/02/21/git常用指令/","content":"本文介绍了git的常用指令和基本操作\n<!-- more -->\n\n# git常用指令  \n## 1.基本指令\n`git init ` &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  新建git仓库      \n`git add 文件/文件夹` &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  将文件添加到缓存区中  \n`git add -A` &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --- 添加所有内容到缓存区中\n`git stutas` &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;———    查看git状态  \n`git commit -m  ‘提交信息’`  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  将缓存区中的内容全部提交到git本地仓库中  \n\n\n`git log`   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——-    查看提交日志  \n\n`git reset  - - hard   HEAD`  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——   让工作目录中的内容和仓库中的内容保持一致  \n`git reset  --hard HEAD^`   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到上一个版本  \n`git  reset  - - hard 版本号`  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;——  回到指定的版本  \n`git checkout  - -  文件名`  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ——  从暂存区中恢复工作目录中的内容(让工作区中的指定文件，回到上次提交的时候的状态)  \n\n`git clone <url> ` - 将服务器上的项目(仓库)克隆 (使用https地址需要输入密码，使用ssh地址需要添加公钥)  \n\n`git remote add origin 地址`  \t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----- 关联远程仓库(只需要关联一次)\n\n``git push [-u] origin master``  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----- 提交(-u在第一次提交分之的时候才用)  \n\n## 2.分之管理  \n创建仓库会默认给我们创建一个master分之,这个分之一般作为提交和发布分之;开发一般会自己创建一个develop分之，用来开发和测试;多人协作的时候还可能根据不同的人或者(不同的功能)创建不同的分之，用来独立开发  \n\n常见分之： master(主要是合并develop), develop(主要合并下面的其他分支), 功能/人员分之(开发)  \n\n`git branch [-a]`   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t\t- 查看分之   \n`git branch 分之名`\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 创建分之   \n`git checkout   分支名`\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-   切换分之      \n`git checkout -b 分之名`\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\t- 切换并创建新的分之   \n`git diff\t分之1  分之2`\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 查看两个分之之间的差异  \n`git merge 分之名\t`\t\t\t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;- 让当前分之和指定分之进行合并     \n\n注意: 切换分之、push、pull，这些操作前要保证工作区是clean  \n\n怎么避免冲突：  不要发生多个分之对同一个文件在同一个版本下进行修改(和同伴确认和商量)\n\n\n\n","tags":["软件学习"],"categories":["python编程"]},{"title":"认识python","url":"/2019/02/20/认识python/","content":"本文介绍了pyhton的基础语法\n<!-- more -->\n#一、python常用快捷键\n- ctrl + s    保存\n- ctrl + /    添加或取消单行注释\n- Ctrl + c      复制/拷贝\n- Ctrl + v      粘贴\n- Ctrl + x      剪切\n- Ctrl + z      撤销\n- Ctrl + shift + z      反撤销\n- Ctrl + a      全选\n- Ctrl + f      查找\n- Ctrl + r      替换\n- Ctrl + shift + f10   执行\n- 按住 option(alt)不放，可以让编辑区同时出现多个光标\n  **注**：*快捷键不止是适用于python*\n\n#二、python基础语法\n###1.注释\n**定义**：程序中的说明文字，不会被执行\n***情况1：单行注释***\n格式：\\# + 说明文字\n```\n#这是声明一个变量\nname = '小黄'\nnum = '18'  #这是一个变量，用来保存数字\n```\n**注**：代码上面注释无需空行，代码后面注释需要空2个空格\n***情况2：多行注释***\n格式：\"\"\"说明文字\"\"\" 或者'''说明文字'''\n说明：前后双引号或者单引号各占一行\n###2.标识符\n**定义**：程序中用来给变量、函数或者类命名使用\n**要求**：（python2.x）由字母、数字和下划线组成，并且数字不能开头.\n示例：\n```\nabc = 100\nabc12 = 101\n12_abd = 232  #SyntaxError: invalid syntax  语法错误：无效语法\nadf*fd = 333  #SyntaxError: invalid syntax  语法错误：无效语法\n```\n**注**：（python3.x）中标识符除了ASCII码表还包含其他字符（可以包含中文），但为了让代码更加简单明了，所以还是按照2.x的要求来命名\n###3.关键字（保留字）\n**含义**：python中自带的用来表示特殊功能或者特殊含义的一些标识符\n*python关键字*\n```\n'False', 'None', 'True', 'and', 'as', 'assert', 'break', \n'class', 'continue', 'def', 'del', 'elif', 'else', 'except', \n'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', \n'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', \n'while', 'with', 'yield'\n```\n***如何查询***：\n```\nimport keyword  \n# import - 关键字，自带导入模块功能\n# keyword - python中自带的标准库\nprint(keyword.kwlist)  #通过点方法去调用，打印python中的关键字\nin = 100  # 不能使用关键字命名\n```\n###4.缩进\n**定义**：同一代码块前的缩进需要保持一致，否则会报错\n示例：\n```\nprint('hello python')   #  IndentationError: unexpected indent  缩进错误：意想不到的缩进\nnum = 1\nif num == 1:\nprint('缺少一个缩进')   #IndentationError: expected an indented block 缩进错误：缺少一个缩进块\n```\n###5.一行显示多条语句\n在多条语句之间加**分号！！！**\n示例：\n```\nprint('第一句'）；print('第二句')\n```\n###三、数据类型和字面量\npython中常用的数据类型：数字类型，字符串\n**数字类型**：\n| 类型           | 定义      | 示例             |\n| ------------ | ------- | -------------- |\n| 整型（int）      | 所有整数    | 100， 99，-20    |\n| 浮点型（float）   | 所有小数    | 100.2， 12.5    |\n| 复数型（complex） | 所有虚数    | 10+10j, 12+12j |\n| 布尔型（bool）    | 两种结果的数据 | True, False    |\n**字符串**：\n**定义**：程序中的文本数据，值是通过单或者双引号括起来\n**type函数**:\n**定义**：获取数据的类型\n**用法**：type(数据) \n**输入**：数据\n**输出**：相应的类型名\n**注**：不会在控制台打印，需要通过print函数去打印\n\n#四、变量\n**定义**：python中用来保存数据的容器（如果数据储存就会丢失）\n***如何声明变量***\n**基础语法**：变量名 = 值\n**说明**：变量名 - 程序员自己命名的\n要求：必须是**标识符**，不能是关键字\n规范：\na.遵循**pep8**命名规范，所有字母小写，多个单词组成在单词之间加下划线(_)隔开\nb.**见名知义**（即看见变量名就知道这个变量中存的是什么数据）\n**=** - 赋值符号，将=右边的值赋给左边的变量\n**值** - 所有有结果的表达式都可以作为值\n*情况1:单独声明一个变量*\n示例：\n```\ndog_name = '旺财'\nprint(dog_name)\nage = 18\nnum = 100\n# in = 123  #错误！in是关键字\n```\n*情况2：a.同时声明多个变量，赋一样的值*\n示例：\n```\nnum1 = num2 = num3 = 15\nprint(num1, num2, num3)\n# 输出结果：\n15 15 15\n```\n*b.同时声明多个变量，赋不同的值*\n```\nname, age, sex = '小明'， 20，'男'\nprint(name, age, sex)\n#输出结果：\n小明 20 男\n```\n**注意事项**：\n**a**.变量必须先赋值再使用，不然程序会报错\n示例：\n```\nprint(age)  # NameError: name 'score' is not defined  名字错误：变量名未被定义\n```\n**b**.重复给同一个变量赋值，后面赋的值会覆盖前面赋的值\n示例：\n```\nabc = 1\nabc = 10\nprint(abc)\n# 输出结果：\n10\n```\n**c**.同一个变量可以赋不同类型的值（python是动态语言）\n示例：\n```\nnum = 10\nprint(type(num）)  #输出结果：<class 'int'>\nnum = 'abc'\nprint(type(num))  #输出结果：<class 'str'>\n```\n**补充：声明变量和给变量赋值的原理**\n\n**原理**：首先会在内存堆中开辟一个空间来储存值，然后给这个空间一个地址，再用栈中的变量来储存这个值对应的地址，不存在溢出，而c语言是根据声明变量的类型来决定变量的大小，所以会存在溢出现象\n#五、print和input函数\n#####print函数\n**定义**：在控制台打印它后面括号里的内容\n**用法**：\n**输入**：任意数据类型\n**输出**：不定\n用法1：print(任意数据)，print(变量）\n示例：\n```\nprint(100)  #100\nprint('hello world')  #hello world\nprint(True)  #True\nnum = 1\nprint(num)  #1\n```\n用法2：print(数据1， 数据2， 数据3...) \n说明：一行打印多个数据，多个数据之间用逗号隔开\n示例：\n```\nprint(100, 12.3, 'afd')  #输出结果：100 12.3 afd\n```\n用法3：自定义结尾（默认是换行）和多个内容之间的间隔（默认是空格）\n示例：\n```\nprint('第一行内容'， end='$')  \n# end ->取消换行，并以$符号连接第二行内容\nprint('第二行内容')\nprint(100, 12.3, 'afd', sep='%')  #输出结果：100%12.3%afd\n# sep ->在多个数据间采用某一指定符号连接\n# 本句是采用%连接几个数据\n```\n#####input函数\n**定义**：获取从控制台输入的内容，输入完回车\n**用法**：input（提示信息）\n**输入**：任意数据类型\n**输出**：字符串\n示例：\n```\ncontent = input('请输入：')\nprint(content, type(content)  # 输入的数据 <class 'str'>\n```\n**注**：当程序执行到此时，如果用户不输入内容，会阻塞线程","tags":["语言学习"],"categories":["python编程"]},{"title":"MarkDown基础语法","url":"/2019/02/20/MarkDown基础语法/","content":"本文介绍了一种文本标记语言MarkDown的基础语法\n<!-- more -->\n\n#####Markdown是什么？\n它是一种纯文本格式标记语言。\n#####目的\n通过markdown可以使普通文本具有一定的格式，便于阅读。\n#####输入的是什么？\n1.普通文本\n2.语法符号\n#####优点：\n1.纯文本，只要支持markdown就可以获得一样的格式效果\n2.操纵简单。\n#####缺点：\n1.需要记忆一些语法\n2.有些平台不支持Markdown编辑模式\n```\n简书开启markdown方式：设置->默认编辑器->Markdown编辑器\n\n```\n#一、标题\n语法：#*n(1~6）+ title\n**\\#** - 语法符号\n**title** - 标题内容\n注：最长支持6级标题\n示例:\n```\n#这是一级标题\n##这是二级标题\n###这是三级标题\n####这是四级标题\n#####这是五级标题\n######这是六级标题\n```\n效果：\n\n#这是一级标题\n##这是二级标题\n###这是三级标题\n####这是四级标题\n#####这是五级标题\n######这是六级标题\n\n#二、字体\n- *斜体*\n  语法：\\*要倾斜内容\\* - 内容前后加1个*号\n- **加粗**\n  语法：\\*\\*要加粗内容\\*\\* - 内容前后加2个*号\n- ***斜体加粗***\n  语法：\\*\\*\\*要斜体加粗内容\\*\\*\\* - 前后加3个*号\n- ~~删除线~~\n  语法：\\~\\~删除线内容\\~\\~ - 前后加2个~号\n  示例：\n```\n**这是加粗的内容**\n*这是倾斜的内容*\n***这是倾斜加粗的内容***\n~~这是删除线内容~~\n```\n效果：\n**这是加粗的内容**\n*这是倾斜的内容*\n***这是倾斜加粗的内容***\n~~这是删除线内容~~\n\n#三、引用\n语法：\\>*n(1~n)\n\\> - 语法符号\nn - \\>的个数，理论上1到正无穷\n\n示例：\n```\n>这是引用的内容\n>>这也是引用的内容\n>>>>>这还是引用的内容\n```\n效果：\n>这是引用的内容\n>>这也是引用的内容\n>>>>>这还是引用的内容\n#四、分割线\n语法：3个或3个以上-或*\n示例：\n```\n---\n-----\n***\n*****\n```\n效果：\n显示一样\n---\n----\n***\n****\n#五、图片\n语法：\n\\!\\[图片alt](图片地址\"图片title\")\n图片alt - 显示在图片下方的文字\n图片title - 就是图片的标题，移到图片上显示，title可有可无\n示例：\n```\n![这是一张图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545661304001&di=f1a05707063235a7cd554a8bffa50e4e&imgtype=0&src=http%3A%2F%2Fww2.sinaimg.cn%2Flarge%2F6eff8279jw1f4qfjr7kvaj21hc0u0h23.jpg '海贼王')\n```\n效果：\n![这是一张图片](https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1545661304001&di=f1a05707063235a7cd554a8bffa50e4e&imgtype=0&src=http%3A%2F%2Fww2.sinaimg.cn%2Flarge%2F6eff8279jw1f4qfjr7kvaj21hc0u0h23.jpg\n'海贼王' )\n\n#六、超链接\n语法：\n\\[超链接名](超链接地址\"超链接title\")title可有可无\n示例：\n```\n[简书](https://www.jianshu.com)\n[百度](https://www.baidu.com)\n```\n效果:\n[简书](https://www.jianshu.com)\n[百度](https://www.baidu.com)\n\n注明：Markdown语法不支持链接在新界面中打开，故想在新页面中打开可以使用html语言中的a标签代替\n```\n<a href=\"超链接地址\" target=\"_blank\">超链接名字</a>\n示例：\n<a href=\"https://www.baidu.com\" target=\"_blank\">百度一下</a>\n```\n#七、列表\n-  **无序列表**\n   语法：\n   \\- \\+ \\* 任选其一均可\n\n```\n- 列表内容\n+ 列表内容\n* 列表内容\n```\n效果：显示一样\n- 列表内容\n+ 列表内容\n* 列表内容\n\n**注明**：语法符号与内容间用1个空格隔开\n- **有序列表**\n  语法：数字大小表示顺序然后加点(n.) \n  示例：\n```\n1. 列表内容\n2. 列表内容\n3. 列表内容\n```\n效果：没有什么不同\n1 . 列表内容\n2 . 列表内容\n3 . 列表内容\n- **列表嵌套**\n  语法：上级列表和下级列表间敲3个空格\n  示例：\n```\n- 一级无序内容\n   - 二级无序内容\n   - 二级无序内容\n- 一级无序内容\n\n  1.二级有序内容\n  2.二级有序内容\n1. 一级有序内容\n    - 二级无序内容 \n    - 二级无序内容\n2. 一级有序内容\n  1.二级有序内容\n    2.二级有序内容\n```\n\n效果：\n- 一级无序内容\n   - 二级无序内容\n   - 二级无序内容\n- 一级无序内容\n\n  1.二级有序内容\n  2.二级有序内容\n1. 一级有序内容\n    - 二级无序内容 \n    - 二级无序内容\n2. 一级有序内容\n  1.二级有序内容\n    2.二级有序内容\n#八、表格\n语法：\n```\n表头|表头|表头\n---|：--：|---：\n内容|内容|内容\n内容|内容|内容\n-  一个即可，多加目的：对齐\n： 哪边加，文字往哪边靠，\n   两边都加就居中\n注：原生态语法两边用|包起来\n```\n示例：\n```\n菜单|价格|名气\n---| --- |---\n鱼香肉丝|18|排名第一\n土豆肉丝|12|排名第五\n青椒肉丝|15|排名第三\n```\n效果：\n| 菜单   | 价格   | 名气   |\n| ---- | ---- | ---- |\n| 鱼香肉丝 | 18   | 排名第一 |\n| 土豆肉丝 | 12   | 排名第五 |\n| 青椒肉丝 | 15   | 排名第三 |\n#九、代码\n语法：\n单行：\\`代码内容\\` - 内容前后用`连接（是~下面的符号）\n```\n`代码内容`\n```\n代码块：\\```代码内容``` - 内容前后用3个`连接，且语法符号各占一行\n```\n(```）\n代码1\n代码2\n代码3\n（```）\n```\n注：括号只是用来防止转义\n示例：\n单行代码\n```\n`hello world`\n```\n效果：\n`hello world`\n代码块\n```\n(```)\nprint('厉害了我的歌') \n(```)\n```\n效果:\n```\nprint('厉害了我的歌') \n```","tags":["语言学习"],"categories":["python编程"]},{"title":"Hello World","url":"/2019/02/20/hello-world/","content":"欢迎\n<!-- more -->\n\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","tags":["杂文"]}]