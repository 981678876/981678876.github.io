<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>往事如烟随风飘</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-02-24T09:10:48.643Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>子墨</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多线程技术</title>
    <link href="http://yoursite.com/2019/02/24/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2019/02/24/python多线程技术/</id>
    <published>2019-02-24T09:10:48.448Z</published>
    <updated>2019-02-24T09:10:48.643Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pyhton中的多线程技术<br><a id="more"></a></p><p><strong>进程</strong>：一个正在运行的应用程序<br><strong>主线程</strong>：在默认情况下，一个进程有且只有一个线程<br>一个进程中允许有多个线程同时对不同任务进行处理<br><strong>应用场景</strong>：耗时操作</p><p>python内置标准库：threading<br>Thread：threading中的线程类<br><strong>如何提供一个子线程</strong><br>直接创建一个线程对象<br>(需要一个子线程就创建一个Thread类的对象)</p><p>###方法一、通过Thread类直接创建子线程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from datetime import datetime</span><br><span class="line"># python多线程技术对应的模块</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line">def download(file):</span><br><span class="line">    print(&apos;%s开始下载&apos; % file, datetime.now())</span><br><span class="line">    # sleep(时间)  - 程序执行到这个位置等待指定的时候再接着往后面执行</span><br><span class="line">    time.sleep(10)</span><br><span class="line">    print(&apos;%s下载结束&apos; % file, datetime.now())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print(&apos;程序开始&apos;)</span><br><span class="line">    # print(datetime.now())</span><br><span class="line">    # 1.在主线程中下载三个电影 (总耗时30s)</span><br><span class="line">    # download(&apos;枪王之王.mp4&apos;)</span><br><span class="line">    # download(&apos;开国大典&apos;)</span><br><span class="line">    # download(&apos;黄金国.mp4&apos;)</span><br><span class="line"></span><br><span class="line">    # 2.在三个子线程中同时下载三个电影</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Thread(target,args)   -  创建子线程对象</span><br><span class="line">    说明:</span><br><span class="line">    target - Function，需要传一个函数(这个函数中的内容会在子线程中执行)</span><br><span class="line">    args - 元祖,target对应的函数的参数</span><br><span class="line">    当通过创建好的子线程对象调用start方法的时候，会自动在子线程中调用target对应的函数, 并且将args中值作为实参</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 创建线程对象</span><br><span class="line">    t1 = threading.Thread(target=download, args=(&apos;枪王之王.mp4&apos;,))</span><br><span class="line">    t2 = threading.Thread(target=download, args=(&apos;开国大典.mp4&apos;,))</span><br><span class="line">    t3 = threading.Thread(target=download, args=(&apos;黄金国.mp4&apos;,))</span><br><span class="line"></span><br><span class="line">    # 开始执行t1对应的子线程中的任务(实质就是在子线程中调用target对应的函数)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t3.start()</span><br><span class="line"></span><br><span class="line">    print(&apos;=============&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>###方法二、创建一个子类继承Thread线程类，从而实现自己的线程类<br><strong>创建子类的步骤</strong>：<br>1.声明类继承Thread<br>2.重写run方法。<br><strong>目的</strong>：任务就是需要在子线程中执行的任务<br>3.需要线程对象的时候，创建当前声明的类的对象<br>4.通过线程对象.start方法在子线程中去执行run方法中的任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time as time1</span><br><span class="line">from datetime import time</span><br><span class="line"></span><br><span class="line">class DownloadThread(threading.Thread):</span><br><span class="line">    &quot;&quot;&quot;下载类&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, file):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.file = file</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;开始下载:&apos;+self.file)</span><br><span class="line">        print(&apos;run:&apos;, threading.current_thread())</span><br><span class="line">        time1.sleep(10)</span><br><span class="line">        print(&apos;%s下载结束&apos; % self.file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 获取当前线程</span><br><span class="line">    print(threading.current_thread())</span><br><span class="line"></span><br><span class="line">    t1 = DownloadThread(&apos;沉默的羔羊.mp4&apos;)</span><br><span class="line">    t2 = DownloadThread(&apos;恐怖游轮.mp4&apos;)</span><br><span class="line">    # 调用start的时候会自动在子线程中调用run方法</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    # 注意：如果直接用对象调用run方法，run方法中的任务会在主线程执行</span><br><span class="line">    # t1.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DownloadThread2(Thread):</span><br><span class="line">    &quot;&quot;&quot;下载类&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, file, time):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.file = file</span><br><span class="line">        self.time = time</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;开始下载:&apos;+self.file)</span><br><span class="line">        # t = randint(5, 10)</span><br><span class="line">        time.sleep(self.time)</span><br><span class="line">        print(&apos;%s下载结束, 总共耗时:%ds&apos; % (self.file, self.time))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DownloadImageThread(Thread):</span><br><span class="line">    def __init__(self, url):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.url = url</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        # 开始下载</span><br><span class="line">        file_name = re.split(r&apos;/&apos;, self.url)[-1]</span><br><span class="line">        print(file_name)</span><br><span class="line">        print(&apos;%s开始下载&apos; % file_name)</span><br><span class="line">        response = requests.get(self.url)</span><br><span class="line">        content = response.content</span><br><span class="line"></span><br><span class="line">        with open(&apos;images/&apos;+file_name, &apos;bw&apos;) as f:</span><br><span class="line">            f.write(content)</span><br><span class="line"></span><br><span class="line">        print(&apos;%s下载结束&apos; % file_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def creat_thread():</span><br><span class="line">    t1 = DownloadThread2(&apos;电影1&apos;, 6)</span><br><span class="line">    t2 = DownloadThread2(&apos;电影2&apos;, 4)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    # 线程对象调用join方法，会导致join后的代码会在线程中的任务结束后才执行</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    print(&apos;电影下载结束!&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # t1 = DownloadImageThread(&apos;https://image.haha.mx/2015/12/04/middle/2082175_c5c3cc05eb73e4023149e663475d3ab4_1449192201.gif&apos;)</span><br><span class="line">    # t1.start()</span><br><span class="line">    #</span><br><span class="line">    # t2 = DownloadImageThread(&apos;http://img4.imgtn.bdimg.com/it/u=534897622,845095650&amp;fm=26&amp;gp=0.jpg&apos;)</span><br><span class="line">    # t2.start()</span><br><span class="line"></span><br><span class="line">    t0 = Thread(target=creat_thread)</span><br><span class="line">    t0.start()</span><br><span class="line"></span><br><span class="line">    print(&apos;========&apos;)</span><br><span class="line">    for x in range(100):</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        print(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pyhton中的多线程技术&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>pygame</title>
    <link href="http://yoursite.com/2019/02/24/pygame/"/>
    <id>http://yoursite.com/2019/02/24/pygame/</id>
    <published>2019-02-24T09:09:02.351Z</published>
    <updated>2019-02-24T09:09:02.585Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pyhton中第三方游戏库pygame的用法<br><a id="more"></a></p><p>####1.游戏基本框架<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 1.初始化pygame, 做准备工作</span><br><span class="line">  pygame.init()</span><br><span class="line"></span><br><span class="line">  # 2.创建游戏窗口</span><br><span class="line">  &quot;&quot;&quot;</span><br><span class="line">  set_mode(窗口大小)  ==   set_mode((宽, 高))  - 会返回一个surface类型的对象</span><br><span class="line">  窗口大小对应的值是一个元祖</span><br><span class="line">  &quot;&quot;&quot;</span><br><span class="line">  window = pygame.display.set_mode((400, 600))</span><br><span class="line">  # 设置窗口标题</span><br><span class="line">  pygame.display.set_caption(&apos;游戏&apos;)</span><br><span class="line"></span><br><span class="line">  # 设置窗口背景颜色</span><br><span class="line">  &quot;&quot;&quot;</span><br><span class="line">  fill(颜色)  </span><br><span class="line">  颜色是一个元祖，元祖有三个int类型的元素，返回是0~255；分别代表R,G,B</span><br><span class="line">  </span><br><span class="line">  计算机三原色: 红、绿、蓝</span><br><span class="line">  红色 (255, 0, 0)</span><br><span class="line">  绿色 (0, 255, 0)</span><br><span class="line">  蓝色 (0, 0, 255)</span><br><span class="line">  白色 (255, 255, 255)</span><br><span class="line">  黑色 (0, 0, 0)</span><br><span class="line">  &quot;&quot;&quot;</span><br><span class="line">  window.fill((255, 255, 255))</span><br><span class="line"></span><br><span class="line">  # 想要对窗口内容进行的修改有效，必须执行以下操作</span><br><span class="line">  pygame.display.flip()</span><br><span class="line"></span><br><span class="line">  # 3.让游戏保持运行状态(游戏循环)</span><br><span class="line">  while True:</span><br><span class="line">      # 4.不断检测游戏过程中是否有事件的产生</span><br><span class="line">      for event in pygame.event.get():</span><br><span class="line">          # 只有当事件产生后才会进入for循环</span><br><span class="line">          # print(&apos;======&apos;)</span><br><span class="line">          if event.type == pygame.QUIT:</span><br><span class="line">              # return</span><br><span class="line">              # 退出!</span><br><span class="line">              exit()</span><br></pre></td></tr></table></figure></p><p>####2.添加图片<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">pygame.init()</span><br><span class="line"> window = pygame.display.set_mode((400, 600))</span><br><span class="line"> pygame.display.set_caption(&apos;图片&apos;)</span><br><span class="line"> window.fill((255, 255, 255))</span><br><span class="line"></span><br><span class="line"> # 3.添加固定显示内容</span><br><span class="line"> &quot;&quot;&quot;</span><br><span class="line"> 显示图片</span><br><span class="line"> 1.加载图片</span><br><span class="line"> image.load(图片地址)  -&gt; 返回图片对象(surface)</span><br><span class="line"> </span><br><span class="line"> 2.将图片添加(渲染)到窗口上</span><br><span class="line"> blit(渲染对象, 坐标)  </span><br><span class="line"> 坐标： 一个元祖，两个元素，分别是x坐标和y坐标</span><br><span class="line"> &quot;&quot;&quot;</span><br><span class="line"> image = pygame.image.load(&apos;images/luffyy.png&apos;)</span><br><span class="line"> window.blit(image, (0, 0))</span><br><span class="line"></span><br><span class="line"> # 4.操作图片</span><br><span class="line"> &quot;&quot;&quot;</span><br><span class="line"> 1.获取图片对象大小</span><br><span class="line"> surface类型有个对象方法: get_size()  - 返回的是元祖</span><br><span class="line"> &quot;&quot;&quot;</span><br><span class="line"> # 获取窗口大小</span><br><span class="line"> print(window.get_size())</span><br><span class="line"> # 获取图片大小</span><br><span class="line"> print(image.get_size())</span><br><span class="line"> width, height = image.get_size()</span><br><span class="line"> # window.blit(image, (400-width, 600-height))</span><br><span class="line"></span><br><span class="line"> &quot;&quot;&quot;</span><br><span class="line"> 2.图片缩放和旋转(形变)</span><br><span class="line"> transform.scale(缩放对象, 目标大小)  -&gt; 返回缩放后的新对象</span><br><span class="line"> transform.rotozoom(缩放对象, 旋转角度, 缩放比例)</span><br><span class="line"> &quot;&quot;&quot;</span><br><span class="line"> new_image = pygame.transform.scale(image, (50, 50))</span><br><span class="line"> new_image = pygame.transform.rotozoom(image, 45, 0.8)</span><br><span class="line"></span><br><span class="line"> window.blit(new_image, (10, 250))</span><br><span class="line"></span><br><span class="line"> pygame.display.flip()</span><br><span class="line"></span><br><span class="line"> while True:</span><br><span class="line"></span><br><span class="line">     for event in pygame.event.get():</span><br><span class="line">         if event.type == pygame.QUIT:</span><br><span class="line">             exit()</span><br></pre></td></tr></table></figure></p><p>####3.显示文字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">window = pygame.display.set_mode((400, 600))</span><br><span class="line">pygame.display.set_caption(&apos;游戏&apos;)</span><br><span class="line">window.fill((255, 255, 255))</span><br><span class="line"></span><br><span class="line"># ============显示文字===========</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">1.创建字体对象</span><br><span class="line">a.系统字体</span><br><span class="line">font.SysFont(字体名, 字体大小)  - 返回一个字体对象</span><br><span class="line">b.自定义字体</span><br><span class="line">font.Font(字体文件路径, 字体大小)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># font = pygame.font.SysFont(&apos;Times&apos;, 40)</span><br><span class="line">font = pygame.font.Font(&apos;images/font2.ttf&apos;, 40)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">2.根据字体创建文字对象</span><br><span class="line">render(文字, True, 文字颜色)  - 返回一个文字对象(Surface)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">text = font.render(&apos;hello世界!&apos;, True, (255, 0, 0))</span><br><span class="line">w, h = text.get_size()</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">3.显示文字</span><br><span class="line">blit(渲染对象, 坐标)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">window.blit(text, (400-w, 600-h))</span><br><span class="line"></span><br><span class="line">pygame.display.flip()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    for event in pygame.event.get():</span><br><span class="line">        if event.type == pygame.QUIT:</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure></p><p>####4.图形<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">pygame.init()</span><br><span class="line">window = pygame.display.set_mode((400, 600))</span><br><span class="line">pygame.display.set_caption(&apos;游戏&apos;)</span><br><span class="line">window.fill((255, 255, 255))</span><br><span class="line"></span><br><span class="line"># ============画图形=============</span><br><span class="line"># 1.画线</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">line(画在哪个地方, 线的颜色, 起点, 终点, 线宽=1)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pygame.draw.line(window, (0, 255, 0), (10, 10), (100, 100), 4)</span><br><span class="line"></span><br><span class="line"># 2.画线</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">lines(画在哪个地方, 线的颜色, 是否关闭, 点列表, 线宽=1)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">point_list = [(200, 200), (250, 10), (300, 200), (150, 100), (350, 100)]</span><br><span class="line"># pygame.draw.lines(window, (255, 0, 0), True, point_list)</span><br><span class="line"></span><br><span class="line"># 3.画圆</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">circle(画在哪个地方, 线的颜色,圆心,半径, 线宽=0)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pygame.draw.circle(window, (0, 0, 0), (200, 300), 100, 0)</span><br><span class="line">pygame.draw.circle(window, (255, 0, 0), (200, 300), 90, 0)</span><br><span class="line"></span><br><span class="line"># 4.画多边形</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">polygon(画在哪个地方,线的颜色, 点列表,线宽)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pygame.draw.polygon(window, (255, 0, 0), point_list, 0)</span><br><span class="line"></span><br><span class="line"># 5.画弧线</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">arc(画在哪个地方,线的颜色, 矩形, 起始弧度, 终止弧度, 线宽)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pygame.draw.arc(window, (0, 255, 255), (10, 470, 150, 200), math.pi/4, math.pi/4*3, 5)</span><br><span class="line"></span><br><span class="line"># 6.画矩形</span><br><span class="line">pygame.draw.rect(window, (100, 20, 50), (200, 470, 100, 50), 2)</span><br><span class="line">window.fill((255, 255, 255))</span><br><span class="line"></span><br><span class="line">pygame.display.flip()</span><br></pre></td></tr></table></figure></p><p>####5游戏事件<br><strong>1.鼠标事件</strong>:<br><strong>MOUSEBUTTONDOWN</strong> - 鼠标按下<br><strong>MOUSEBUTTONUP</strong> - 鼠标弹起<br><strong>MOUSEMOTION</strong> - 鼠标移动</p><p><strong>重点</strong>：事件发生的位置: event.pos<br><strong>方法</strong>：event.pos<br><strong>含义</strong>：鼠标的坐标<br><strong>返回值</strong>：元祖（坐标x, y）</p><p>2.键盘事件<br><strong>KEYDOWN</strong> - 键盘按下<br><strong>KEYUP</strong> - 键盘弹起 </p><p><strong>重点</strong>：按了哪个键<br><strong>方法</strong>：event.key<br><strong>返回值</strong>：按键对应的字符的编码值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 模块的导入</span><br><span class="line">import pygame</span><br><span class="line">from color import Color</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">window = pygame.display.set_mode((400, 600))</span><br><span class="line">pygame.display.set_caption(&apos;事件&apos;)</span><br><span class="line">window.fill(Color.white)</span><br><span class="line"></span><br><span class="line">pygame.display.flip()</span><br><span class="line">is_move = False</span><br><span class="line">while True:</span><br><span class="line"></span><br><span class="line">    # 不断检测是否有事件产生，如果有事件产生才会进入for循环</span><br><span class="line">    for event in pygame.event.get():</span><br><span class="line">        # 这儿的event是事件对象，我们可以通过事件对象的type值来判断事件的类型</span><br><span class="line">        #==================鼠标事件===================</span><br><span class="line">        if event.type == pygame.QUIT:</span><br><span class="line">            exit()</span><br><span class="line">        elif event.type == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">            # 鼠标按下要做什么，就将代码写这个if语句中</span><br><span class="line">            print(&apos;鼠标按下&apos;, event.pos)</span><br><span class="line">            # pygame.draw.circle(window, Color.random_color(), event.pos, randint(10, 20))</span><br><span class="line">            # pygame.display.update()</span><br><span class="line">            is_move = True</span><br><span class="line">        elif event.type == pygame.MOUSEBUTTONUP:</span><br><span class="line">            # 鼠标弹起要做什么，就将代码写这个if语句中</span><br><span class="line">            print(&apos;鼠标弹起&apos;)</span><br><span class="line">            is_move = False</span><br><span class="line">        elif event.type == pygame.MOUSEMOTION:</span><br><span class="line">            # 鼠标移动要做什么, 就将代码写这个if语句中</span><br><span class="line">            if is_move:</span><br><span class="line">                pygame.draw.circle(window, Color.random_color(), event.pos, 20)</span><br><span class="line">                pygame.display.update()</span><br><span class="line">                print(&apos;鼠标移动&apos;)</span><br><span class="line"></span><br><span class="line">        # ================键盘事件=================</span><br><span class="line">        if event.type == pygame.KEYDOWN:</span><br><span class="line">            print(&apos;按键被按下&apos;)</span><br><span class="line">            print(event.key, chr(event.key))</span><br><span class="line">        elif event.type == pygame.KEYUP:</span><br><span class="line">            print(&apos;按键弹起!&apos;)</span><br></pre></td></tr></table></figure><p>颜色脚本：color模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Color:</span><br><span class="line">    white = (255, 255, 255)</span><br><span class="line">    black = (0, 0, 0)</span><br><span class="line">    red = (255, 0, 0)</span><br><span class="line">    green = (0, 255, 255)</span><br><span class="line">    blue = (0, 0, 255)</span><br><span class="line">    yellow = (255, 255, 0)</span><br><span class="line">    gray = (155, 155, 155)</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def random_color():</span><br><span class="line">        return randint(0, 255), randint(0, 255), randint(0, 255)</span><br></pre></td></tr></table></figure></p><p>按钮：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">import pygame</span><br><span class="line">from color import Color</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Button:</span><br><span class="line">    &quot;&quot;&quot;声明一个按钮类&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, x, y, width, height, text=&apos;&apos;, background_color=Color.red, text_color=Color.white):</span><br><span class="line">        # 按钮的x坐标</span><br><span class="line">        self.x = x</span><br><span class="line">        # 按钮的y坐标</span><br><span class="line">        self.y = y</span><br><span class="line">        # 按钮的宽度</span><br><span class="line">        self.width = width</span><br><span class="line">        # 按钮的长度</span><br><span class="line">        self.height = height</span><br><span class="line">        # 按钮的显示内容</span><br><span class="line">        self.text = text</span><br><span class="line">        # 按钮的背景颜色</span><br><span class="line">        self.background_color = background_color</span><br><span class="line">        # 显示内容的颜色</span><br><span class="line">        self.text_color = text_color</span><br><span class="line">        # 按钮的字体大小</span><br><span class="line">        self.font_size = 30</span><br><span class="line"></span><br><span class="line">    def show(self, window):</span><br><span class="line">        &quot;&quot;&quot;将按钮显示在屏幕上&quot;&quot;&quot;</span><br><span class="line">        # 画一个矩形，然后显示在屏幕上</span><br><span class="line">        pygame.draw.rect(window, self.background_color, (self.x, self.y, self.width, self.height))</span><br><span class="line">        # 创建一个字体对象</span><br><span class="line">        font = pygame.font.SysFont(&apos;Times&apos;, self.font_size)</span><br><span class="line">        # 根据字体创建一个文字对象</span><br><span class="line">        text = font.render(self.text, True, self.text_color)</span><br><span class="line">        # 获取文字对象的大小</span><br><span class="line">        w, h = text.get_size()</span><br><span class="line">        # 获取显示在屏幕上的x坐标</span><br><span class="line">        x = self.width / 2 - w / 2 + self.x</span><br><span class="line">        # 获取显示在屏幕上的y坐标</span><br><span class="line">        y = self.height / 2 - h / 2 + self.y</span><br><span class="line">        # 将文字显示在屏幕上</span><br><span class="line">        window.blit(text, (x, y))</span><br><span class="line"></span><br><span class="line">    def is_cliecked(self, pos):</span><br><span class="line">        &quot;&quot;&quot;根据传入的坐标判断是否在范围内&quot;&quot;&quot;</span><br><span class="line">        # 获取传入坐标的x,y值</span><br><span class="line">        x, y = pos</span><br><span class="line">        # 返回点击鼠标的位置，是否反应</span><br><span class="line">        return (self.x &lt;= x &lt;= self.x + self.width) and (self.y &lt;= y &lt;= self.y + self.height)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 初始化窗口</span><br><span class="line">    pygame.init()</span><br><span class="line">    # 创建一个窗口</span><br><span class="line">    window = pygame.display.set_mode((400, 600))</span><br><span class="line">    # 设置窗口标题</span><br><span class="line">    pygame.display.set_caption(&apos;事件&apos;)</span><br><span class="line">    # 设置窗口的背景颜色</span><br><span class="line">    window.fill(Color.white)</span><br><span class="line"></span><br><span class="line">    # add_btn(window)</span><br><span class="line">    # 创建一个按钮对象</span><br><span class="line">    add_btn = Button(100, 100, 100, 50, &apos;del&apos;)</span><br><span class="line">    # 将对象显示在屏幕上</span><br><span class="line">    add_btn.show(window)</span><br><span class="line">    # 创建第二个按钮对象</span><br><span class="line">    btn2 = Button(100, 250, 100, 60, &apos;Score&apos;, background_color=Color.yellow, text_color=Color.black)</span><br><span class="line">    # 将第二个对象显示在屏幕上</span><br><span class="line">    btn2.show(window)</span><br><span class="line">    # 将修改过的内容有效显示</span><br><span class="line">    pygame.display.flip()</span><br><span class="line">    is_move = False</span><br><span class="line">    while True:</span><br><span class="line">        # 不断检测事件的发生，有事件就进入for循环</span><br><span class="line">        for event in pygame.event.get():</span><br><span class="line">            # 将窗口关闭</span><br><span class="line">            if event.type == pygame.QUIT:</span><br><span class="line">                exit()</span><br><span class="line">            # 鼠标按下要做的事情</span><br><span class="line">            elif event.type == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">                # 鼠标点击的坐标</span><br><span class="line">                mx, my = event.pos</span><br><span class="line">                # 如果点击的坐标在按钮范围内，要发生的事情</span><br><span class="line">                if add_btn.is_cliecked(event.pos):</span><br><span class="line">                    print(&apos;删除!&apos;)</span><br><span class="line">                    # 继续下一次事件的判断</span><br><span class="line">                    continue</span><br><span class="line">                # 如果点击的坐标在第二个按钮的范围内，要发生的事情</span><br><span class="line">                if btn2.is_cliecked(event.pos):</span><br><span class="line">                    # print(&apos;hello&apos;)</span><br><span class="line">                    # 更改按钮要显示的内容</span><br><span class="line">                    btn2.text = str(randint(0, 100))</span><br><span class="line">                    # 重新展示在屏幕上</span><br><span class="line">                    btn2.show(window)</span><br><span class="line">                    # 在屏幕上更新修改的内容</span><br><span class="line">                    pygame.display.update()</span><br><span class="line">                    # 继续下一次事件的判断</span><br><span class="line">                    continue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>小球的移动控制：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import pygame</span><br><span class="line">from color import Color</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line">window_width = 400</span><br><span class="line">window_height = 600</span><br><span class="line"></span><br><span class="line">class Direction:</span><br><span class="line">    &quot;&quot;&quot;方向类&quot;&quot;&quot;</span><br><span class="line">    UP = 273</span><br><span class="line">    DOWN = 274</span><br><span class="line">    RIGHT = 275</span><br><span class="line">    LEFT = 276</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Ball:</span><br><span class="line">    def __init__(self, center_x, center_y, radius, bg_color=Color.random_color()):</span><br><span class="line">        self.center_x = center_x</span><br><span class="line">        self.center_y = center_y</span><br><span class="line">        self.radius = radius</span><br><span class="line">        self.bg_color = bg_color</span><br><span class="line">        self.is_move = True   # 是否移动</span><br><span class="line">        self.move_direction = Direction.DOWN</span><br><span class="line">        self.speed = 5</span><br><span class="line"></span><br><span class="line">    def disappear(self, window):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        球从指定界面消失</span><br><span class="line">        :param window:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        pygame.draw.circle(window, Color.white, (self.center_x, self.center_y), self.radius)</span><br><span class="line"></span><br><span class="line">    def show(self, window):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        小球显示</span><br><span class="line">        :param window:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        pygame.draw.circle(window, self.bg_color, (self.center_x, self.center_y), self.radius)</span><br><span class="line"></span><br><span class="line">    def move(self, window):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        小球移动</span><br><span class="line">        :param window:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 让移动前的球消失</span><br><span class="line">        self.disappear(window)</span><br><span class="line">        if self.move_direction == Direction.DOWN:</span><br><span class="line">            self.center_y += self.speed</span><br><span class="line">        elif self.move_direction == Direction.UP:</span><br><span class="line">            self.center_y -= self.speed</span><br><span class="line">        elif self.move_direction == Direction.LEFT:</span><br><span class="line">            self.center_x -= self.speed</span><br><span class="line">        else:</span><br><span class="line">            self.center_x += self.speed</span><br><span class="line"></span><br><span class="line">        # 移动后重新显示球</span><br><span class="line">        self.show(window)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def creat_enemy_ball(cls):</span><br><span class="line">        r = randint(10, 25)</span><br><span class="line">        x = randint(r, int(window_width - r))</span><br><span class="line">        y = randint(r, int(window_height - r))</span><br><span class="line">        enemy = cls(x, y, r, Color.random_color())</span><br><span class="line">        enemy.is_move = False</span><br><span class="line">        return enemy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    pygame.init()</span><br><span class="line">    window = pygame.display.set_mode((window_width, window_height))</span><br><span class="line">    pygame.display.set_caption(&apos;事件&apos;)</span><br><span class="line">    window.fill(Color.white)</span><br><span class="line"></span><br><span class="line">    # 先显示一个的球</span><br><span class="line">    ball = Ball(100, 100, 30)</span><br><span class="line">    ball.show(window)</span><br><span class="line"></span><br><span class="line">    pygame.display.flip()</span><br><span class="line">    # 计时</span><br><span class="line">    time = 0</span><br><span class="line">    # 所有被吃的球</span><br><span class="line">    all_enemy = []</span><br><span class="line">    while True:</span><br><span class="line">        time += 1</span><br><span class="line"></span><br><span class="line">        # 每隔100个运行单位移动一次</span><br><span class="line">        if time % 100 == 0:</span><br><span class="line">            if ball.is_move:</span><br><span class="line">                # 让球动起来</span><br><span class="line">                ball.move(window)</span><br><span class="line">                pygame.display.update()</span><br><span class="line"></span><br><span class="line">        if time == 10000:</span><br><span class="line">            time = 0</span><br><span class="line">            enemy = Ball.creat_enemy_ball()</span><br><span class="line">            all_enemy.append(enemy)</span><br><span class="line">            enemy.show(window)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for event in pygame.event.get():</span><br><span class="line">            if event.type == pygame.QUIT:</span><br><span class="line">                exit()</span><br><span class="line">            elif event.type == pygame.KEYDOWN:</span><br><span class="line">                if event.key == Direction.DOWN or event.key == Direction.UP or event.key == Direction.LEFT or event.key == Direction.RIGHT:</span><br><span class="line">                    # ball.is_move = True</span><br><span class="line">                    ball.move_direction = event.key</span><br><span class="line">            elif event.type == pygame.KEYUP:</span><br><span class="line">                if event.key == Direction.DOWN or event.key == Direction.UP or event.key == Direction.LEFT or event.key == Direction.RIGHT:</span><br><span class="line">                    # ball.is_move = False</span><br><span class="line">                    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>小球游戏：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">import pygame</span><br><span class="line">from color import Color</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line">window_height = 600</span><br><span class="line">window_width = 400</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Ball:</span><br><span class="line">    def __init__(self, center_x, center_y, radius, bg_color=Color.random_color()):</span><br><span class="line">        self.center_x = center_x</span><br><span class="line">        self.center_y = center_y</span><br><span class="line">        self.radius = radius</span><br><span class="line">        self.bg_color = bg_color</span><br><span class="line">        self.is_move = True</span><br><span class="line">        self.y_speed = 6</span><br><span class="line"></span><br><span class="line">    def move(self, window):</span><br><span class="line">        self.disapper(window)</span><br><span class="line">        new_y = self.center_y + self.y_speed</span><br><span class="line">        if new_y &gt;= window_height - self.radius:</span><br><span class="line">            new_y = window_height - self.radius</span><br><span class="line">            self.y_speed *= -1</span><br><span class="line"></span><br><span class="line">        if new_y &lt;= self.radius:</span><br><span class="line">            new_y = self.radius</span><br><span class="line">            self.y_speed *= -1</span><br><span class="line"></span><br><span class="line">        self.center_y = new_y</span><br><span class="line"></span><br><span class="line">        self.show(window)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def disapper(self, window):</span><br><span class="line">        pygame.draw.circle(window, Color.white, (self.center_x, self.center_y), self.radius)</span><br><span class="line"></span><br><span class="line">    def show(self, window):</span><br><span class="line">        pygame.draw.circle(window, self.bg_color, (self.center_x, self.center_y), self.radius)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line"></span><br><span class="line">    pygame.init()</span><br><span class="line">    window = pygame.display.set_mode((window_width, window_height))</span><br><span class="line">    pygame.display.set_caption(&apos;事件&apos;)</span><br><span class="line">    window.fill(Color.white)</span><br><span class="line"></span><br><span class="line">    ball = Ball(100, 100, 20)</span><br><span class="line">    ball.show(window)</span><br><span class="line">    pygame.display.flip()</span><br><span class="line">    time = 0</span><br><span class="line">    while True:</span><br><span class="line">        time += 1</span><br><span class="line">        if time % 1000 ==0:</span><br><span class="line">            if ball.is_move:</span><br><span class="line">                ball.move(window)</span><br><span class="line">                pygame.display.update()</span><br><span class="line"></span><br><span class="line">        for event in pygame.event.get():</span><br><span class="line">            if event.type == pygame.QUIT:</span><br><span class="line">                exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pyhton中第三方游戏库pygame的用法&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2019/02/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/02/24/正则表达式/</id>
    <published>2019-02-24T09:03:25.631Z</published>
    <updated>2019-02-24T09:04:23.005Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了计算机语言中通用的正则表达式的相关用法<br><a id="more"></a></p><h1 id="一、匹配字符"><a href="#一、匹配字符" class="headerlink" title="一、匹配字符"></a>一、匹配字符</h1><p><strong>1.什么是正则表达式（语法通用）</strong><br><strong>定义</strong>：一种用来做字符串匹配的工具，通过不同的符号匹配不同的字符</p><p><strong>2.python对正则表达式的支持</strong><br>re模块</p><p><strong>re模块方法</strong>：<br>fullmatch(正则表达式，字符串）<br><strong>功能</strong>：正则表达式和指定字符串进行匹配<br><strong>输出</strong>：成功返回匹配对象，失败返回None</p><p><strong>注意</strong>：python中的正则表达式是写在字符串中的，但是一般情况下不会在最前面加R/r<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from re import fullmatch, search</span><br></pre></td></tr></table></figure></p><p> ###普通字符（代表字符本身）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#匹配一个字符串，只有三个字符，每个字符分别是a,b,c</span><br><span class="line">re_str = r&apos;abc&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;abc&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###1 .(匹配任意字符）<br><strong>注意</strong>：<br>a.一个.代表一个字符<br>b.不能匹配\n<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串，只有三个字符，第一个字符是a,第二个字符是任意字符，第三个字符是c</span><br><span class="line">re_str = r&apos;a.c&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;acc&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###2 \w(匹配字母数字下划线)<br><strong>注意</strong>：<br> a.也可以匹配中文<br> b.一个\w只能匹配一个字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串，第一个是任意字符，第二三是字母数字下划线，最后三个是abc</span><br><span class="line">re_str = r&apos;.\w\wabc&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;d33abc&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###3 \s(匹配空白字符）<br>空白字符：所有能产生空白的字符，包括空格，制表符，换行等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串，前面两个是字母数字下划线或中文，第三个是空白，最后是任意字符</span><br><span class="line">re_str = r&apos;\w\w\s.&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;a2\td&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###4 \d(匹配数字字符)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串，每个字符都是数字字符</span><br><span class="line">re_str = r&apos;\d\d\d&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;343&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###5 \b(检测单词边界)<br>a.检测正则表达式中\b所在的位置，是否是单词边界<br>b.单词边界：所有可以将两个单词区分开的符号都是单词边界，<br>例如：空格, 缩进，标点符号等<br><strong>注意</strong>：<br>\b检测时不看，先匹配，匹配好在加上看<br>\b不是匹配符号，不会匹配出一个字符，只是检测所在的位置是否满足要求。<br>​<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串的内容是&apos;how are&apos;,并且字符&apos;a&apos;的前面是单词边界</span><br><span class="line">re_str = r&apos;how \bare&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;how are&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###6 ^(检测是否以指定的字符串开头)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串是三个数字字符，并且第一个字符所在的位置是字符串开头</span><br><span class="line">re_str = r&apos;^\d\d\d&apos;</span><br><span class="line">result = search(re_str, &apos;333dfd333dffeee444d&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###7 $ (检测是否以指定的字符串结尾）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串是三个数字字符，并且最后一个字符的后面是字符串结尾</span><br><span class="line">re_str = r&apos;\d\d\d$&apos;</span><br><span class="line">result = search(re_str, &apos;333fdf33332&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###8 \B(检测非单词边界）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">re_str = r&apos;dff\B33&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;dff33&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###9 \W(匹配非数字字母下划线)</p><p>###10 \S(非空白字符）</p><p>###11 \D(匹配非数字字符）</p><p>###12 [字符集]（匹配字符集中的任意一个字符）</p><p><strong>注意</strong>：一个[]代表一个字符<br>    a.普通用法<br>    [字符集] - 匹配字符集中的任意一个字符<br>    b.表示范围<br>    [字符1-字符2] - 表示匹配字符1到字符2中所有的字符，要求字符1的编码值要小于字符2的编码值<br>    [1-9] - 数字1-9<br>    [A-Z] - 大写字母<br>    [a-z] - 小写字母<br>    [a-zA-Z] - 所有字母<br>    [a-zA-Z\d_] - 数字字母下划线<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串有4个字符，第一个是a或者b或者c.后边是123</span><br><span class="line">re_str = r&apos;[abc]123&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;b123&apos;)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"># 匹配一个字符串有4个字符，第一个是数字1-9中的任意一个，最后一个</span><br><span class="line"># 是任意小写字母，中间两个是任意数字</span><br><span class="line">re_str = r&apos;[1-9]\d\d[a-z]&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;323d&apos;)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">re_str = r&apos;[a-zA-Z\d_]&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;a&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###13 [^字符集]（匹配没有在字符集中的其他任意字符）<br><strong>注意</strong>：<br>^放在[]的最前面，才表示匹配不在字符集中的其他任意字符<br> ^不放在[]最前面，就表示字符本身<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串，第一个字符只要不是abc中的一个，其他都可以，后面是123</span><br><span class="line">re_str = r&apos;[^abc]123&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;h123&apos;)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"># 第一个字符是1-9中的一个或者^</span><br><span class="line">re_str = r&apos;[1-9^]123&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;^123&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###14 转义符号<br>正则中可以通过在特殊符号前加\来对符号进行转义<br>\\<br>\.<br>\\^<br>b.除了在中括号中有特殊意义的符号，其他符号放在[]中也是表示符号本身<br>- 想要表示本身，就不要放在两个字符之间<br>^ 想要表示本身，就不要放在字符集开头<br>[] 表示中括号本身，加\<br><strong>注意</strong>：<br>转义字符是字符串中的概念<br>转义符号是正则表达式的概念<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">re_str = r&apos;\d\d\.\d\d\\b&apos;</span><br><span class="line">print(fullmatch(re_str, &apos;34.23\\b&apos;))</span><br><span class="line">print(fullmatch(r&apos;[-19.\]*^]&apos;, &apos;*&apos;))</span><br></pre></td></tr></table></figure></p><h1 id="二、匹配次数"><a href="#二、匹配次数" class="headerlink" title="二、匹配次数"></a>二、匹配次数</h1><p>###1 *(匹配0次或多次）</p><p>字符<em> - 指定的字符出现0次或者多次（字符可以是正则符号，也可以是普通字符）<br>a</em> - a出现0次或者多次<br>\d<em> - 任意数字出现0次或者多次<br>[a-z]</em> - 任意小写字母出现0次或者多次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 123前有0个或者多个字符，并且每个是a</span><br><span class="line">re_str = r&apos;[a-z]*123&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;123&apos;))</span><br><span class="line">print(re.fullmatch(re_str, &apos;a123&apos;))</span><br><span class="line"></span><br><span class="line"># 123前有0个或者多个字符，并且每个是数字字符</span><br><span class="line">re_str = r&apos;\d*123&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;123&apos;))</span><br><span class="line">print(re.fullmatch(re_str, &apos;1123&apos;))</span><br></pre></td></tr></table></figure></p><p>###2 +(一次或者多次）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">re_str = r&apos;[a-z]+123&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;aaa123&apos;))</span><br><span class="line">print(re.fullmatch(re_str, &apos;a123&apos;))</span><br></pre></td></tr></table></figure></p><p>###3 ?(0次或1次）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">re_str = r&apos;\+?abc&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;abc&apos;))</span><br><span class="line">print(re.fullmatch(re_str, &apos;+abc&apos;))</span><br><span class="line"></span><br><span class="line"># 练习：写一个正则表达式能够匹配所有的整数字符串</span><br><span class="line">re_str = r&apos;[+-]?[1-9]\d*|0&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;0&apos;))</span><br></pre></td></tr></table></figure></p><p>###4 {}(匹配次数）</p><ul><li>{m,n} - 匹配m到n次（最少m次，最多n次）</li><li>{m,} - 至少m次</li><li>{，n} - 最多n次</li><li>{n} - n次<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(re.fullmatch(r&apos;a&#123;2,5&#125;&apos;, &apos;aaa&apos;))</span><br><span class="line"># 密码：6-16，只能是数字字母</span><br><span class="line">print(re.fullmatch(r&apos;[a-zA-Z\d]&#123;6,16&#125;&apos;, &apos;222222&apos;))</span><br></pre></td></tr></table></figure></li></ul><h1 id="三、分支和分组"><a href="#三、分支和分组" class="headerlink" title="三、分支和分组"></a>三、分支和分组</h1><p>###1 |(分支）</p><p>表达式1|表达式2|表达式3<br>先用表达式1进行匹配，匹配成功就成功，不成功就使用表达式2区匹配，如果表达式2<br>也不成功，就使用表达式3去匹配（三个表达式只要有一个能够匹配成功就成功，否则就失败）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">re_str = r&apos;[a-z]&#123;3&#125;|\d&#123;3&#125;&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;384&apos;))</span><br></pre></td></tr></table></figure></p><p>###2 （）（分组）<br><strong>a.分组</strong><br>将括号里的内容看做一个整体</p><p><strong>b.分组重复</strong><br>在有分组的正则表达式中，可以在分组的后面通过   <strong>\数字</strong>   来重复前面第几<br>个分组匹配到的结果<br><strong>注意</strong>：如果前面没有括号，程序会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">re_str = r&apos;abc([a-z]&#123;3&#125;|\d&#123;3&#125;)&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;abc384&apos;))</span><br><span class="line"></span><br><span class="line">re_str = r&apos;(abc)&#123;2&#125;&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;abcabc&apos;))</span><br><span class="line"></span><br><span class="line">re_str = r&apos;(\d&#123;2&#125;)a(\d&#123;3&#125;)bc\2&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;34a909bc909&apos;))</span><br></pre></td></tr></table></figure></p><p><strong>c.捕获</strong><br><strong>步骤</strong>：<br><strong>第一步</strong>：先用整个正则表达式去匹配字符串，匹配成功<br><strong>第二步</strong>：再获取部分数据（括号里的数据）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">re_str = r&apos;(\d\d)\.[a-z]&#123;2,3&#125;&apos;</span><br><span class="line">result = re.findall(re_str, &apos;s56fjh22.huk--=334.ko&quot;;sss;ss94.al////&apos;)</span><br><span class="line">print(result)  # [&apos;22&apos;, &apos;34&apos;, &apos;94&apos;]</span><br></pre></td></tr></table></figure></p><h1 id="四、非贪婪"><a href="#四、非贪婪" class="headerlink" title="四、非贪婪"></a>四、非贪婪</h1><p><strong>定义</strong>：在正则中控制匹配<strong>不确定次数</strong>的符号后边可以加?,来表示尽可能少的匹配<br><strong>注意</strong>：尽可能少是在<strong>能够匹配到</strong>的前提下尽可能少<br><strong>贪婪</strong>：尽可能匹配多的次数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(re.search(r&apos;\d+&apos;, &apos;abchs3482==sdd&apos;))  # &lt;_sre.SRE_Match object; span=(5, 9), match=&apos;3482&apos;&gt;</span><br><span class="line">print(re.search(r&apos;\d+?&apos;, &apos;abchs3482==sdd&apos;))  # &lt;_sre.SRE_Match object; span=(5, 6), match=&apos;3&apos;&gt;</span><br></pre></td></tr></table></figure></p><h1 id="五、re模块相关方法"><a href="#五、re模块相关方法" class="headerlink" title="五、re模块相关方法"></a>五、re模块相关方法</h1><h3 id="1-compile-正则表达式"><a href="#1-compile-正则表达式" class="headerlink" title="1. compile(正则表达式)"></a>1. compile(正则表达式)</h3><p><strong>目的</strong>：将正则表达式转换成正则对象<br><strong>特点</strong>：编译后可以直接通过对象调用相关的对象方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re_object = re.compile(r&apos;\d&#123;3&#125;&apos;)</span><br><span class="line">re_object.fullmatch(&apos;432&apos;)</span><br></pre></td></tr></table></figure></p><h3 id="2-fullmatch-正则表达式-字符串"><a href="#2-fullmatch-正则表达式-字符串" class="headerlink" title="2. fullmatch(正则表达式, 字符串)"></a>2. fullmatch(正则表达式, 字符串)</h3><p><strong>目的</strong>：让字符串和正则表达式完全匹配，匹配成功返回匹配对象，匹配失败返回None</p><p>####应用：检测字符串内容是否符合要求,例如：检测账号、密码、判断手机号、身份证号等是否合法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = re.fullmatch(r&apos;(\d&#123;3&#125;)=([a-z]+)&apos;, &apos;342=sjaks&apos;)</span><br><span class="line">print(result)  # &lt;_sre.SRE_Match object; span=(0, 9), match=&apos;342=sjaks&apos;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="匹配对象"><a href="#匹配对象" class="headerlink" title="匹配对象"></a>匹配对象</h3><p>####a.span()<br><strong>功能</strong>：匹配到的字符串在原字符串中的下标范围(结果是元素)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">result = re.fullmatch(r&apos;(\d&#123;3&#125;)=([a-z]+)&apos;, &apos;342=sjaks&apos;)</span><br><span class="line">print(result.span())   # 获取整个正则表达式匹配到的内容的范围</span><br><span class="line"># start, end = result.span()</span><br><span class="line"># print(start, end)</span><br><span class="line"></span><br><span class="line">print(result.span(1))  # 获取正则表达式中第一个分组匹配到的内容的范围</span><br><span class="line">print(result.span(2))  # 获取正则表达式中第二个分组匹配到的内容的范围</span><br></pre></td></tr></table></figure></p><p>####b. start()和end()<br><strong>目的</strong>：匹配到的字符串在原字符串中的<strong>开始下标</strong>和<strong>结束下标</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;====start名，end====&apos;)</span><br><span class="line">print(result.start(), result.end())</span><br><span class="line">print(result.start(1), result.start(2))</span><br></pre></td></tr></table></figure></p><p>####c. group()<br><strong>目的</strong>：获取匹配到的字符串(结果是字符串)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(result.group())   # 获取整个正则匹配到的字符串</span><br><span class="line">print(result.group(1))  # 获取第一个分组匹配到的字符串</span><br><span class="line">print(result.group(2))  # 获取第二个分组匹配到的字符串</span><br><span class="line">print(result.groups())  # 同时获取所有分组匹配到的字符串(结果是元祖)</span><br></pre></td></tr></table></figure></p><p>####d. string<br><strong>目的</strong>：获取原字符串<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(result.string)</span><br></pre></td></tr></table></figure></p><p>###3.match(正则表达式,字符串)<br><strong>目的</strong>：让字符串的开头和正则表达式进行匹配，匹配成功结果是匹配对象，否则是None<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(re.match(r&apos;\D\d&apos;, &apos;s3skjkjks&apos;))</span><br></pre></td></tr></table></figure></p><p>###4.search(正则表达式,字符串)<br><strong>目的</strong>：在字符串中去匹配出第一个符合正则表达式的子串, 匹配成功结果是匹配对象,否则是None<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(re.search(r&apos;[\u4e00-\u9fa5]&#123;3&#125;&apos;, &apos;hsj后视ss023你好吗,skss上的30s&apos;))</span><br></pre></td></tr></table></figure></p><p>###5.split(正则表达式,字符串)<br><strong>目的</strong>：将字符串按照满足正则要求的子串进行切割(返回值是列表)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(re.split(r&apos;\d+&apos;, &apos;asj38jkas0093kjsj78kajs89==asdfj3jkkss&apos;))</span><br></pre></td></tr></table></figure></p><p>###6.sub(正则表达式,字符串1, 字符串2)<br><strong>目的</strong>：将字符串2中能够和正则表达式匹配的子串替换成字符串1，产生一个新的字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(re.sub(r&apos;\d+&apos;, &apos;*&apos;, &apos;jsj93jksj93j5a45s3s是看得见&apos;))</span><br><span class="line">print(re.sub(r&apos;傻逼|[傻艹草操]&apos;, &apos;*&apos;, &apos;你是傻逼吗？艹!&apos;))</span><br></pre></td></tr></table></figure></p><p>###7.findall(正则表达式, 字符串)<br><strong>目的</strong>：在字符串中获取满足正则表达式的所有的子串(结果是列表)<br><strong>注意</strong>: 如果正则表达式中有分组，直接获取到的是分组中匹配到的内容; 如果有多个分组列表中的元素是元祖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(re.findall(r&apos;\d+[a-z]&apos;, &apos;sjh83bkss93ksjhf9922&apos;))</span><br><span class="line">print(re.findall(r&apos;(\d+)[a-z]&apos;, &apos;sjh83bkss93=sjhf9922&apos;))</span><br><span class="line">print(re.findall(r&apos;abc(\d&#123;2&#125;|[A-Z]&#123;2&#125;)&apos;, &apos;=-aaabc73kkjabcKJL=3&apos;))</span><br></pre></td></tr></table></figure></p><p>###8.finditer(正则表达式, 字符串)<br><strong>目的</strong>：在字符串中获取满足正则表达式的所有的子串(结果是迭代器,元素是匹配对象)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = re.finditer(r&apos;(\d+)[a-z]&apos;, &apos;sj8khk83jks数据310sj=sd&apos;)</span><br><span class="line">print(result)</span><br><span class="line">print(next(result).group())</span><br></pre></td></tr></table></figure></p><p>###9.re.I<br><strong>功能</strong>：忽略大小写<br><strong>注意</strong>：匹配的约束条件是放在函数的flags参数中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(re.fullmatch(r&apos;[a-z]&#123;2&#125;&apos;, &apos;SA&apos;, re.I))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了计算机语言中通用的正则表达式的相关用法&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>类和对象（提升）</title>
    <link href="http://yoursite.com/2019/02/24/python%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%EF%BC%88%E6%8F%90%E5%8D%87%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/24/python类和对象（提升）/</id>
    <published>2019-02-24T09:00:35.558Z</published>
    <updated>2019-02-24T09:12:47.547Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pyhton中如何进行面向对象编程中的提升知识部分<br><a id="more"></a></p><h1 id="一、私有化"><a href="#一、私有化" class="headerlink" title="一、私有化"></a>一、私有化</h1><p><strong>1.属性和方法访问权限</strong><br><strong>私有的</strong>：在类的外部不可以使用，也不可以继承<br><strong>保护的</strong>：在类的外部不可以使用，可以继承<br><strong>公开的</strong>：类的外部可以使用，可以被继承</p><p><strong>2.python中属性和方法的访问权限</strong><br>只有公开，但是提供了另一种私有化的方式</p><p><strong>2.如何私有化</strong><br><strong>定义</strong>：在属性或者方法前加__,属性或者方法就会变为私有化<br><strong>特点</strong>：私有的属性和方法只能在类的内部使用，不能在类的外面使用<br><strong>注意</strong>：<br>输入时，只能在前面加__，不能在后面加__</p><p>类的字段：可以在内部用，不能在外部用<br>对象属性：可以在内部用，不能在外部用<br>对象方法：可以在内部用，不能在外部用<br>类方法：可以在内部用，不能在外部用<br>静态方法：可以在内部用，不能在外部用</p><p><strong>3.python私有化原理</strong><br>在私有化的属性和方法前再加”_类名”去保存属性和方法<br>外部想调用可以通过”_类名__（属性或者方法）”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    num = 61</span><br><span class="line">    __num2 = 62</span><br><span class="line"></span><br><span class="line">    def __init__(self, name=&apos;张三&apos;, age=0):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.__sex = &apos;男&apos;</span><br><span class="line"></span><br><span class="line">    def eat(self, food):</span><br><span class="line">        print(self.__sex)</span><br><span class="line">        print(self.name, food)</span><br><span class="line">        self.__run()</span><br><span class="line"></span><br><span class="line">    def __run(self):</span><br><span class="line">        print(&apos;%s在跑步&apos; % self.name)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def show_num(cls):</span><br><span class="line">        print(&apos;人类的数量:%d, %d&apos; % (cls.num, cls.__num2))</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def func1():</span><br><span class="line">        print(&apos;人类要保护大自然!&apos;)</span><br><span class="line">p1 = Person()</span><br><span class="line">print(Person.num)  # 61</span><br><span class="line"># print(Person.__num2)  # AttributeError: type object &apos;Person&apos; has no attribute &apos;__num2&apos;</span><br><span class="line">print(p1.name)  # 61</span><br><span class="line"># print(p1.__sex)  # AttributeError: &apos;Person&apos; object has no attribute &apos;__sex&apos;</span><br><span class="line">print(p1._Person__sex)  # 男</span><br><span class="line">p1.eat(&apos;面条&apos;)  # 张三 面条</span><br><span class="line"># p1.run()  # AttributeError: &apos;Person&apos; object has no attribute &apos;run&apos;</span><br><span class="line">Person.show_num()  # 人类的数量:61, 62</span><br><span class="line">Person.func1()  # 人类要保护大自然!</span><br><span class="line">print(p1.__dict__)  # &#123;&apos;name&apos;: &apos;张三&apos;, &apos;age&apos;: 0, &apos;_Person__sex&apos;: &apos;男&apos;&#125;</span><br></pre></td></tr></table></figure></p><h1 id="二、getter和setter"><a href="#二、getter和setter" class="headerlink" title="二、getter和setter"></a>二、getter和setter</h1><p><strong>1.应用场景</strong><br><strong>getter</strong>：<strong>获取对象属性的值</strong>(调用时)之前想要做点别的事情,就给这个属性添加getter<br><strong>setter</strong>：<strong>给对象属性赋值</strong>（传参时）之前想要做点别的事情，就给这个属性添加setter</p><p><strong>2.getter</strong><br><strong>第一步</strong>：声明属性的时候，在属性名前加_<br><strong>第二步</strong>：声明一个函数,函数名前加@property<br><strong>要求</strong>：只有self参数，必须要有函数返回值<br><strong>返回值</strong>：获取属性拿到的值<br>@property<br>def 去掉<em>的属性名（self):<br>    &emsp;做点别的事情<br>    &emsp;（重点）返回属性的值<br><strong>第三步</strong>：在类的外部通过对象.去掉</em>的属性去获取相关的属性</p><p><strong>3.setter</strong><br><strong>要求</strong>：想要添加setter，必须添加getter为前提<br><strong>第一步</strong>：声明属性的时候，在属性名前加_<br><strong>第二步</strong>：声明函数<br><strong>要求</strong>：函数除了self以外还需要一个参数，没有返回值，<strong>参数代表给属性赋的值</strong><br>@去掉<em>的属性名.setter<br>def 去掉</em>的属性名(self, 参数）：<br>   &emsp;  做点别的事情<br>    &emsp; 给属性赋值<br><strong>第三步</strong>：在类的外部通过<strong>对象.去掉_的属性</strong>去给相关属性赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name=&apos;&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self._age = 0</span><br><span class="line">        self._week = 7    # 属性名前有_，使用属性的时候不要直接用</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def age(self):</span><br><span class="line">        return self._age</span><br><span class="line"></span><br><span class="line">    # 给age添加setter</span><br><span class="line">    @age.setter</span><br><span class="line">    def age(self, value):</span><br><span class="line">        if not isinstance(value, int):</span><br><span class="line">            raise ValueError</span><br><span class="line">        if not (0 &lt;= value &lt;= 150):</span><br><span class="line">            raise ValueError</span><br><span class="line">        self._age = value</span><br><span class="line"></span><br><span class="line">    # 给week添加getter</span><br><span class="line">    @property</span><br><span class="line">    def week(self):</span><br><span class="line">        if self._week &lt; 7:</span><br><span class="line">            return &apos;星期%d&apos; % self._week</span><br><span class="line">        else:</span><br><span class="line">            return &apos;星期天&apos;</span><br><span class="line"></span><br><span class="line">    @week.setter</span><br><span class="line">    def week(self, value):</span><br><span class="line">        self._week = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    p1 = Person(&apos;小明&apos;)</span><br><span class="line"></span><br><span class="line">    # 通过不带_的属性给属性赋值实质是在调用setter对应的函数</span><br><span class="line">    p1.age = 45</span><br><span class="line">    p1.age = 3</span><br><span class="line"></span><br><span class="line">    # 这个操作实质是在调用week函数</span><br><span class="line">    # 通过不带_的属性来获取属性的值实质是在调用getter对应的函数</span><br><span class="line">    print(p1.week)</span><br><span class="line">    p1.week = 4</span><br></pre></td></tr></table></figure></p><h1 id="三、继承"><a href="#三、继承" class="headerlink" title="三、继承"></a>三、继承</h1><p><strong>1.什么是继承</strong><br><strong>定义</strong>：一个类继承另外一个类，其中会产生继承者和被继承者，这里的继承者叫子类，被继承者叫父类/超类</p><p><strong>2.怎么继承</strong><br>class 类名（父类列表）：<br>    &emsp;类的内容</p><p><strong>说明</strong>：<br><strong>a.</strong>python中所有的类都是<strong>直接或者间接</strong>继承基类object<br>class 类名：   ==&gt; class 类名（object):<br><strong>b.</strong>python中的继承支持<strong>多继承</strong>， 父类列表中可以有多个类，多个类之间用逗号隔开</p><p><strong>3.继承哪些东西</strong>:<br>所有的属性和方法<br><strong>注意</strong>：<strong>a.</strong>__slots__的值继承后没有约束效果<br><strong>b.</strong>在类中给__slots__赋值后，当前类的对象不能使用__dict__，但是子类可以使用，只是__dict__中没有从父类继承下来的对象属性，只有子类中添加的对象属性<br><strong>c.</strong>如果父类没有给__slots__赋值，直接给子类的__slots__，无效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    num = 61</span><br><span class="line">    # __slots__ = (&apos;name&apos;, &apos;age&apos;, &apos;sex&apos;, &apos;__face&apos;)</span><br><span class="line"></span><br><span class="line">    def __init__(self,name=&apos;zhangsan&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.__face = 60</span><br><span class="line"></span><br><span class="line">    def eat(self, food):</span><br><span class="line">        print(&apos;%s在吃%s&apos; % (self.name, food))</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def show_num(cls):</span><br><span class="line">        print(&apos;人类的数量:%d&apos; % cls.num)</span><br><span class="line"></span><br><span class="line">print(Student.num)  # 61</span><br><span class="line">stu = Student()</span><br><span class="line">print(stu.name)  # zhangsan</span><br><span class="line"># print(stu.__dict__)</span><br><span class="line"># print(stu.__face)</span><br><span class="line">stu.eat(&apos;海底捞&apos;)  # zhangsan</span><br><span class="line">Student.show_num()  # 人类的数量:61</span><br><span class="line">p1 = Person()</span><br><span class="line"># print(p1.__dict__)</span><br><span class="line"># p1.score = 100</span><br><span class="line">stu.score = 100</span><br><span class="line">print(stu.score)  # 100</span><br><span class="line">print(stu.__dict__)  # &#123;&apos;name&apos;: &apos;zhangsan&apos;, &apos;age&apos;: 0, &apos;sex&apos;: &apos;男&apos;, &apos;_Person__face&apos;: 60, &apos;score&apos;: 100&#125;</span><br></pre></td></tr></table></figure></p><h1 id="四、添加方法"><a href="#四、添加方法" class="headerlink" title="四、添加方法"></a>四、添加方法</h1><p><strong>1.添加新的方法</strong><br><strong>怎么声明</strong>：直接在子类中声明新的方法</p><p><strong>2.重写方法</strong><br><strong>完全重写</strong>：在子类中重新声明实现父类的方法<br><strong>部分重写</strong>:保留父类的功能，在子类中添加新的功能<br><strong>如何操作</strong>：在子类方法中通过”<strong>super().</strong>“的方式调用父类方法</p><p><strong>3.类中函数的调用过程</strong><br>回到函数声明的位置：先看当前类中是否有方法，如果有，就直接调用当前类中的方法，没有就去看父类中是否有方法，如果父类也没有，就去找父类的父类，直到找到object类，如果还没有，就报错</p><ul><li>会一直往上找，不会往下找<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    num = 61</span><br><span class="line"></span><br><span class="line">    def __init__(self,name=&apos;zhangsan&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.__face = 60</span><br><span class="line"></span><br><span class="line">    def eat(self, food):</span><br><span class="line">        print(&apos;%s在吃%s&apos; % (self.name, food))</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def show_num(cls):</span><br><span class="line">        print(&apos;人类的数量:%d&apos; % cls.num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Student(Person):</span><br><span class="line">    num2 = 100</span><br><span class="line"></span><br><span class="line">    # 添加方法</span><br><span class="line">    def study(self):</span><br><span class="line">        print(&apos;%s在写代码&apos; % self.name)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def func1(cls):</span><br><span class="line">        print(&apos;我是学生类的类方法&apos;)</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def func2():</span><br><span class="line">        print(&apos;我是学生类的静态方法&apos;)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def show_num(cls):</span><br><span class="line">        print(&apos;学生数量:%d&apos; % cls.num)</span><br><span class="line"></span><br><span class="line">    def eat(self, food):</span><br><span class="line">        super().eat(food)</span><br><span class="line">        print(&apos;吃饱了&apos;)</span><br><span class="line"></span><br><span class="line">p1 = Person(&apos;张三&apos;)</span><br><span class="line">stu1 = Student(&apos;李四&apos;)</span><br><span class="line">stu1.study()  # 李四在写代码</span><br><span class="line">Student.func1()  # 我是学生类的类方法</span><br><span class="line"># 子类可以使用父类的属性和方法，但是父类不能使用子类中添加的属性和方法</span><br><span class="line"># Person.func2()</span><br><span class="line">Person.show_num()  # 61</span><br><span class="line">Student.show_num()  # 61</span><br><span class="line">stu1.eat(&apos;包子&apos;)  # 李四在吃包子 吃饱了</span><br><span class="line">print(Student.num2)  # 100</span><br></pre></td></tr></table></figure></li></ul><h1 id="五、添加属性"><a href="#五、添加属性" class="headerlink" title="五、添加属性"></a>五、添加属性</h1><p><strong>1.添加类的字段</strong><br><strong>如何声明</strong>：直接在子类中声明新的字段<br><strong>2.添加对象属性</strong><br><strong>本质</strong>：对象属性是通过继承init方法继承下来的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Animal:</span><br><span class="line">    def __init__(self, age):</span><br><span class="line">        self.age = age</span><br><span class="line">        self.color = &apos;灰色&apos;</span><br><span class="line"></span><br><span class="line">class Dog(Animal):</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        # 调用父类的init方法来继承父类的对象属性</span><br><span class="line">        # 父类的init方法需要传参的话，需要在init加参数</span><br><span class="line">        super().__init__(age)</span><br><span class="line">        self.name = name</span><br><span class="line"># 情景1：直接继承不添加</span><br><span class="line"># dog1 = Dog()</span><br><span class="line"># print(dog1.age)</span><br><span class="line">dog2 = Dog(&apos;才次&apos;, 18)</span><br><span class="line">print(dog2.name)  # 才次</span><br><span class="line"># print(dog2.age)  # AttributeError: &apos;Dog&apos; object has no attribute &apos;age&apos;</span><br><span class="line">p1 = Student(23)</span><br><span class="line">print(p1.sex)  # 男</span><br></pre></td></tr></table></figure></p><p>###补充：多继承<br>多继承:<br>class 类名(父类1, 父类2,….):<br>    &emsp;类的内容<br><strong>特点</strong>：<br>1.方法：多个父类都可以继承<br>2.属性：类的字段都可以继承，对象属性只能继承第一个父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Animal:</span><br><span class="line">    def __init__(self, name=&apos;&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = 0</span><br><span class="line">        self.color = &apos;黑色&apos;</span><br><span class="line"></span><br><span class="line">    def fun1(self):</span><br><span class="line">        print(&apos;动物中的对象方法&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Fly:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.height = 1000</span><br><span class="line"></span><br><span class="line">    def func2(self):</span><br><span class="line">        print(&apos;飞行类的对象方法&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Bird(Animal, Fly):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    b1 = Bird()</span><br><span class="line">    b1.fun1()  # 动物中的对象方法</span><br><span class="line">    b1.func2()  # 动物中的对象方法</span><br><span class="line">    print(b1.name, b1.age)</span><br><span class="line">    # print(b1.height)  # &apos;Bird&apos; object has no attribute &apos;height&apos;</span><br></pre></td></tr></table></figure></p><h1 id="六、运算符重载"><a href="#六、运算符重载" class="headerlink" title="六、运算符重载"></a>六、运算符重载</h1><p><strong>1.什么是运算符重载</strong><br><strong>目的</strong>：通过实现类中相应的<strong>魔法方法</strong>来让当前类的对象支持相应的运算符</p><p><strong>注意</strong>：python中所有的数据类型都是类，所有的数据都是对象</p><p><strong>步骤</strong>：<br><strong>第一步</strong>：找到运算符相应的魔法方法<br><strong>如何找</strong>：通过一个能支持的表达式，按ctrl键来查看<br><strong>第二步</strong>：在类中重新声明，重写相应的魔法方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, score=0):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;&apos; + str(self.__dict__)[1:-1] + &apos;&gt;&apos;</span><br><span class="line"></span><br><span class="line">    # 实现&apos;+&apos;对应的魔法方法，让两个学生对象能够进行+操作</span><br><span class="line">    # self和other的关系： self+other    ==&gt; self.__add__(other)</span><br><span class="line">    # 返回值就是运算结果</span><br><span class="line">    def __add__(self, other):</span><br><span class="line">        # a.支持Student+Student:</span><br><span class="line">        return self.age + other.age</span><br><span class="line">        # b.支持Student+数字</span><br><span class="line">        # return self.age + other</span><br><span class="line"></span><br><span class="line">    # self * other</span><br><span class="line">    # 将other当成数字</span><br><span class="line">    def __mul__(self, other):</span><br><span class="line">        return self.name * other</span><br><span class="line"></span><br><span class="line">    # self和other都是学生对象</span><br><span class="line">    # 注意：大于和小于运算符是需要重载一个就行</span><br><span class="line">    def __gt__(self, other):</span><br><span class="line">        return self.score &gt; other.score</span><br><span class="line"></span><br><span class="line">stu1 = Student(&apos;小花&apos;, 18, 90)</span><br><span class="line">stu2 = Student(&apos;夏明&apos;, 20, 78)</span><br><span class="line">stu3 = Student(&apos;小红&apos;, 17, 99)</span><br><span class="line"></span><br><span class="line"># 所有类的对象都支持&apos;==&apos;和&apos;!=&apos;运算</span><br><span class="line">print(stu1 == stu2)  # False</span><br><span class="line"></span><br><span class="line">print(stu1 + stu2)     # print(stu1.__add__(stu2))  # 38</span><br><span class="line"></span><br><span class="line"># print(stu1 &gt; stu2)</span><br><span class="line"># print(stu1 &lt; stu2)</span><br><span class="line"></span><br><span class="line">print(stu1 * 2)   # print(stu1.__mul__(2))  # 小花小花</span><br><span class="line"></span><br><span class="line">students = [stu1, stu2, stu3]</span><br><span class="line">print(students)</span><br><span class="line">students.sort()</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure></p><h1 id="七、python内存管理机制"><a href="#七、python内存管理机制" class="headerlink" title="七、python内存管理机制"></a>七、python内存管理机制</h1><p><strong>1.数据的存储</strong><br>内存分为<strong>栈</strong>区间和<strong>堆</strong>区间<br>底层：<br><strong>栈区间内存</strong>：系统自动释放和开辟<br><strong>堆区间内存</strong>：由程序员通过代码开辟和释放<br><strong>代码</strong>：手写函数melloc<br>python：<br><strong>栈区间内存</strong>:系统自动开辟和释放<br><strong>堆区间内存</strong>:内存管理也已封装好，无需程序员在写代码手动释放<br>python:<br><strong>栈区间</strong>：变量本身，函数调用过程(压栈)<br><strong>堆区间</strong>：所有的对象（python中一切数据皆对象）<br><strong>变量赋值过程</strong>：<br><strong>堆区间</strong>：开辟空间储存数据，产生一个地址<br><strong>栈区间</strong>：变量储存数据的地址<br><strong>特殊情况</strong>：数字和字符串<br><strong>堆区间</strong>：赋值前先检测之前是否存过这个数据<br>如果有，直接使用之前的地址，反之，开辟空间<br>​<br><strong>2.内存释放（垃圾回收机制）</strong><br><strong>引用计数</strong>：每个对象都有一个属性叫引用计数，用来表示当前对象的引用计数<br><strong>如何判断一个对象是否销毁</strong><br><strong>依据</strong>：看一个对象的引用计数是否为0，为0就<br>销毁，不为0就不销毁<br><strong>getrefcount函数</strong><br><strong>用法</strong>：getrefcount（对象）<br> <strong>目的</strong>：获取对象的引用计数<br><strong>如何增加引用计数</strong>：<br>使用不同变量存地址（让多个变量指向一个地址）<br><strong>如何减少引用计数</strong>：<br>1.让变量指向其他地址（重新赋值）<br>2.直接删除变量</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pyhton中如何进行面向对象编程中的提升知识部分&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>类和对象（基础）</title>
    <link href="http://yoursite.com/2019/02/24/python%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/24/python类和对象（基础）/</id>
    <published>2019-02-24T08:59:11.151Z</published>
    <updated>2019-02-24T09:12:57.648Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pyhton中如何进行面向过程编程的基础知识<br><a id="more"></a></p><h1 id="一、编程思想"><a href="#一、编程思想" class="headerlink" title="一、编程思想"></a>一、编程思想</h1><p><strong>1.面向过程</strong><br><strong>做法</strong>：遇到问题直接将（<strong>逻辑和算法</strong>）转换为代码<br><strong>使用工具</strong>：逻辑和算法<br><strong>2.面向函数式编程</strong><br><strong>做法</strong>：遇到问题就想找一个、写一个相应功能的函数<br><strong>使用工具</strong>：函数<br><strong>3.面向对象</strong><br><strong>做法</strong>：遇到问题就考虑可不可以有一个类来提供相应的功能和数据<br><strong>使用工具</strong>：类和对象<br>类中的属性 - 对数据的封装<br>类中的函数 - 对功能的封装</p><h1 id="二、类和对象基础"><a href="#二、类和对象基础" class="headerlink" title="二、类和对象基础"></a>二、类和对象基础</h1><p><strong>1.类和对象的概念</strong><br><strong>a.什么是类</strong>：<br><strong>概念</strong>：拥有<strong>相同功能</strong>和相同<strong>属性</strong>的对象的集合（抽象）<br><strong>b.什么是对象</strong><br><strong>概念</strong>：类的实例（具体）</p><p><strong>2.类的声明</strong><br><strong>内容</strong>：功能（函数）和属性（变量/属性）<br><strong>a.语法</strong><br>class 类名（父类）：<br>    &emsp;类的内容</p><p><strong>b.说明</strong><br><strong>class</strong>: 声明类的关键字<br><strong>类名</strong>：标识符，并且不能是关键字<br> <strong>规范</strong>：采用大驼峰式命名<br><strong>：</strong>：规定写法<br><strong>类的内容</strong>：累的方法、属性和说明文档<br><strong>方法</strong>：声明在类中的函数<br><strong>属性</strong>：声明在类中的变量</p><p><strong>3.如何声明对象</strong><br><strong>方法</strong>：类名（）<br><strong>说明</strong>：创建指定类的对象并且返回</p><p><strong>注意</strong>：同一个类可以创建多个对象<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 声明一个人类</span><br><span class="line">class Person:</span><br><span class="line">    &quot;&quot;&quot;类的说明文档&quot;&quot;&quot;</span><br><span class="line">    num = 61  # 类中的属性</span><br><span class="line"></span><br><span class="line">    # 类中的方法</span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&apos;人在吃饭！！&apos;)</span><br><span class="line">    # 创建Person类的对象；p1就是对象</span><br><span class="line">    p1 = Person()</span><br><span class="line">    print(p1)</span><br><span class="line"></span><br><span class="line">    # 同一个类可以创建多个对象</span><br><span class="line">    p2 = Person()</span><br><span class="line">    print(p2)</span><br></pre></td></tr></table></figure></p><h1 id="三、对象方法"><a href="#三、对象方法" class="headerlink" title="三、对象方法"></a>三、对象方法</h1><p><strong><em>声明类的伪代码</em></strong><br>class 类名：<br>   &emsp; 类中的属性<br>   &emsp; 类中的方法</p><p><strong>1.什么是类中的方法</strong><br>声明在类中的函数就是方法<br><strong>分类</strong>：<br><strong>指导思想</strong>：怎么声明，怎么调用，特点<br><strong>a.对象方法</strong>：<br><strong>声明</strong>：直接声明在类中<br><strong>特点</strong>：有默认参数self,通过对象调用可以不用传参<br><strong>调用</strong>：对象.对象方法名<br><strong>当前对象</strong>：调用当前方法的对象（谁调用对象方法<strong>self</strong>就是谁）<br><strong>注意</strong>：当前类的对象能做的事情，self都能做</p><p><strong>b.类方法</strong>：<br><strong>声明</strong>：声明函数前加@classmethod<br><strong>特点</strong>：有默认参数cls,通过类调用时，可以不用传参<br><strong>调用</strong>：类名.类方法名<br><strong>当前对象</strong>：调用当前方法的类（谁调用类方法<strong>cls*就是谁）</strong>注意<strong>：当前类能做的事情，cls都能做</strong>c.静态方法<strong>：</strong>声明<strong>：声明函数前加@staticmethod</strong>特点<strong>：没有默认参数</strong>调用**：类名.静态方法名</p><p>####实际运用<br>类中怎么选择使用哪种方法：<br><strong>对象方法</strong>：实现函数功能需要使用对象属性<br><strong>类方法</strong>：<br>1.不需要使用对象属性为前提<br>2.需要使用类的字段<br><strong>静态方法</strong>：对象属性和类的字段皆不需要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    # 类的字段</span><br><span class="line">    num = 23</span><br><span class="line"></span><br><span class="line">    # 对象方法：用到对象属性name</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = &apos;张三&apos;</span><br><span class="line"></span><br><span class="line">    # 对象属性和类的字段都有，选择对象方法</span><br><span class="line">    def func4(self):</span><br><span class="line">        # 通过self.name来获取对象的姓名</span><br><span class="line">        print(&apos;%s对应的对象&apos; % self.name)</span><br><span class="line">        # 通过 类名.类的字段 来使用类的字段</span><br><span class="line">        print(&apos;人类的数量%d亿&apos; % Person.num)</span><br><span class="line"></span><br><span class="line">    # 静态方法：对象属性和类的字段都不需要</span><br><span class="line">    @staticmethod</span><br><span class="line">    def func3():</span><br><span class="line"></span><br><span class="line">        print(&apos;我是静态方法&apos;)</span><br><span class="line">    # 类方法：需要使用类的字段</span><br><span class="line">    @classmethod</span><br><span class="line">    def func1(cls):</span><br><span class="line">        # 类能做的事情，cls都能做</span><br><span class="line">        p1 = cls()  # 用cls创建对象</span><br><span class="line">        print(p1)</span><br><span class="line">        cls.num = 100  # 用cls来使用类的字段</span><br><span class="line">        print(cls)</span><br><span class="line">        print(&apos;这是一个类方法&apos;)</span><br></pre></td></tr></table></figure></p><h1 id="四、init方法和构造方法"><a href="#四、init方法和构造方法" class="headerlink" title="四、init方法和构造方法"></a>四、init方法和构造方法</h1><p><strong>1.init方法</strong>：<strong>init</strong><br><strong>定义</strong>：类中的一个特殊的对象方法<br><strong>功能</strong>：专门用来对象创建的对象进行初始化<br><strong>过程</strong>：当通过类创建对象时，系统就会自动<strong>调用init方法</strong></p><p><strong>2.构造方法</strong>：<br><strong>定义</strong>：函数名和类名一样的函数<br><strong>功能</strong>：专门用来创建对象<br><strong>原理</strong>：<br>1.声明类时，系统自动创建类对应的构造方法<br><strong>内部如何实现</strong><br>2.创建对象时，内部会先在内部开辟空间保存对象；然后用创建的对象去调用<strong>init</strong>方法，用来对对象进行初始化，<strong>init</strong>方法结束后，返回对象</p><p>def Person(<em>args, **kwargs):<br>   &emsp; 对象 = 创建对象<br>    &emsp; 对象.<strong>init</strong>（</em>args, **kwargs）<br>   &emsp;  return 对象</p><p><strong>注意</strong>：如果类的<strong>init</strong>方法除了self以外，还有<strong>其他参数</strong>，那么我们在创建对象的时候，需要通过给构造方法传参，来间接给<strong>init</strong>方法参数赋值</p><p><strong>魔法方法</strong>：类中以__开头并且以__结尾的方法<br><strong>特点</strong>：创建对象时，无需主动调用，系统会自动调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># =========构造方法和init方法的原理=========</span><br><span class="line"># 构造方法的伪代码</span><br><span class="line">def my_init(x, y, z):</span><br><span class="line">    print(x, y, z)</span><br><span class="line">    print(&apos;my_init&apos;)</span><br><span class="line"></span><br><span class="line">def my_Dog(*args, **kwargs):</span><br><span class="line">    my_init(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">my_Dog(10, 29, 39)</span><br></pre></td></tr></table></figure></p><h1 id="五、类中属性"><a href="#五、类中属性" class="headerlink" title="五、类中属性"></a>五、类中属性</h1><p><strong>分类</strong>：类的字段和对象属性<br><strong>a.对象属性</strong>：<br><strong>特点</strong>：属性的值会因为对象不同而不同<br><strong>声明</strong>：init对象方法中<br><strong>方式</strong>：self.属性 = 值（这里属性就是对象属性）<br><strong>调用</strong>：对象.属性</p><p><strong>b.类的字段</strong><br><strong>特点</strong>：属性的值不会因为对象的不同而不同<br><strong>声明</strong>：在类中，但在函数外<br><strong>方式</strong>：类的字段名 = 值<br><strong>调用</strong>：类名.类的字段名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    # 类的字段</span><br><span class="line">    num = 33</span><br><span class="line"></span><br><span class="line">    # 在init方法中声明对象属性</span><br><span class="line">    def __init__(self, name1=&apos;&apos;, age1=0):</span><br><span class="line">        self.name = name1</span><br><span class="line">        self.age = age1</span><br></pre></td></tr></table></figure></p><p>###对象属性的增删改查<br><strong>1.查（获取对象属性）</strong><br><strong>方法一</strong>：<br>对象.属性<br><strong>功能</strong>：获取指定对象的指定属性值;属性不存在报错<br><strong>错误类型</strong>：AttributeError 属性错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;女&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">print(p1.name)</span><br><span class="line"># print(p1.name1)  # AttributeError 属性错误</span><br></pre></td></tr></table></figure></p><p> <strong>方法二</strong>：<br>getattr(对象，属性名）<br><strong>功能</strong>：获取指定对象的指定属性值;<br> <strong>特点</strong>：属性不存在，给默认值赋值，不会报错，并且将默认值作为结果返回<br><strong>应用场景</strong>：不确定属性值是否存在时使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;女&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"># 属性不确定，可以使用getattr</span><br><span class="line">    # attr = input(&apos;属性：&apos;)</span><br><span class="line">    # print(getattr(p1, attr))</span><br><span class="line">print(getattr(p1, &apos;name&apos;, None))</span><br><span class="line">print(getattr(p1, &apos;name1&apos;, None))</span><br></pre></td></tr></table></figure></p><p><strong>2.增（添加属性）/ 改（修改属性的值）</strong><br><strong>方法一</strong>：<br>对象.属性 = 值<br> <strong>功能</strong>：<br>1.属性存在，修改属性值<br>2.属性不存在，添加属性<br><strong>方法二</strong>：<br> setattr(对象，属性名，值）<br><strong>功能</strong>：<br>1.属性存在，修改属性值<br>2.属性不存在，添加属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;女&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"># 修改属性</span><br><span class="line">p1.name = &apos;啊帅&apos;</span><br><span class="line">print(p1.name)</span><br><span class="line"># 添加属性</span><br><span class="line">p1.height = 180</span><br><span class="line">print(p1.height)</span><br><span class="line"></span><br><span class="line"># 修改属性</span><br><span class="line">setattr(p1, &apos;age&apos;, 300)</span><br><span class="line">print(p1.age)</span><br><span class="line"># 添加属性</span><br><span class="line">setattr(p1, &apos;weight&apos;, 200)</span><br><span class="line">print(p1.weight)</span><br></pre></td></tr></table></figure></p><p><strong>3.删（删除属性）</strong><br><strong>方法一</strong>：<br> del 对象.属性<br><strong>功能</strong>：删除对象属性<br><strong>方法二</strong>：<br>delattr(对象，属性名）<br><strong>输入</strong>：2个，对象、属性名<br><strong>功能</strong>：删除对象属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;女&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">del p1.sex</span><br><span class="line"># print(p1.sex)  # AttributeError: &apos;Person&apos; object has no attribute &apos;sex&apos;</span><br><span class="line">delattr(p1, &apos;age&apos;)</span><br><span class="line"># print(p1.age)  # AttributeError: &apos;Person&apos; object has no attribute &apos;age&apos;</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：对象属性的操作只针对于当前对象，不会影响其他对象</p><p>#####补充：__slots__魔法方法<br><strong>功能</strong>：约束当前对象能够拥有的属性个数<br><strong>特点</strong>：init方法里对象属性的个数少于或者等于slots方法的个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Dog:</span><br><span class="line">    # __slots__魔法</span><br><span class="line">    # 约束当前对象最多能拥有的那个属性</span><br><span class="line">    __slots__ = (&apos;name&apos;, &apos;color&apos;, &apos;sex&apos;, &apos;age&apos;)  # 下边声明的属性比这里少就行</span><br><span class="line"></span><br><span class="line">    def __init__(self, name= &apos;&apos;, color=&apos;黑色&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.color = color</span><br><span class="line">dog1 = Dog(&apos;大话&apos;, &apos;黄色&apos;)</span><br><span class="line">    dog1.name = &apos;sss&apos;</span><br><span class="line">    del dog1.color</span><br></pre></td></tr></table></figure></p><h1 id="六、内置属性"><a href="#六、内置属性" class="headerlink" title="六、内置属性"></a>六、内置属性</h1><p><strong>定义</strong>：创建对象时，系统自动给我们添加的属性（通过继承得到）</p><ul><li><p><strong>__name__</strong><br><strong>功能</strong>：获取类的名字<br><strong>返回值</strong>：字符串<br><strong>调用</strong>：类名.__name__<br><strong>补充</strong>：获取的字符串可以当做字符串来用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    &quot;&quot;&quot;说明文档：人类&quot;&quot;&quot;</span><br><span class="line">    num = 62</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">print(Person)  # &lt;class &apos;__main__.Person&apos;&gt;</span><br><span class="line">print(Person.__name__, type(Person.__name__))  # Person &lt;class &apos;str&apos;&gt;</span><br><span class="line"> # 值是一个字符串，可以当做字符串来用</span><br><span class="line">print(Person.__name__.upper())  # PERSON</span><br></pre></td></tr></table></figure></li><li><p><strong>__class__</strong><br><strong>功能</strong>：获取对象对应的类<br><strong>返回值</strong>：类名<br><strong>调用</strong>：对象.__class__<br><strong>补充</strong>：可以将获取的类名当做类来用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    &quot;&quot;&quot;说明文档：人类&quot;&quot;&quot;</span><br><span class="line">    num = 62</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">p1 = Person()</span><br><span class="line">my_class = p1.__class__</span><br><span class="line">print(my_class)  # &lt;class &apos;__main__.Person&apos;&gt;</span><br><span class="line"># 可以将my_class当做类使用</span><br><span class="line">p2 = my_class(&apos;笑素数&apos;)</span><br><span class="line">print(p2.num)  # 62</span><br></pre></td></tr></table></figure></li><li><p><strong>__doc__</strong><br><strong>功能</strong>：获取类的说明文档<br><strong>返回值</strong>：字符串<br><strong>调用</strong>：类名.__doc__</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    &quot;&quot;&quot;说明文档：人类&quot;&quot;&quot;</span><br><span class="line">    num = 62</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">print(Person.__doc__)  # 说明文档：人类</span><br><span class="line"># 获取p1对应的说明文档</span><br><span class="line">p1 = Person()    </span><br><span class="line">print(p1.__class__.__doc__)  # 说明文档：人类</span><br></pre></td></tr></table></figure></li><li><p>__dict__<br><strong>功能</strong>：将对象属性转化为字典，属性作为key，值作为value<br><strong>返回值</strong>：字典<br><strong>调用</strong>：对象.__dict__<br>#####坑：当给<strong>slots</strong>属性赋值后，对象的<strong>dict</strong>属性就不能使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    &quot;&quot;&quot;说明文档：人类&quot;&quot;&quot;</span><br><span class="line">    num = 62</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">p1 = Person()  </span><br><span class="line">print(p1.__dict__)  # &#123;&apos;name&apos;: &apos;&apos;, &apos;age&apos;: 0, &apos;sex&apos;: &apos;男&apos;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>__bases__</strong><br><strong>功能</strong>:获取当前类的父类<br><strong>返回值</strong>：元祖<br><strong>调用</strong>：类名.__bases__</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    &quot;&quot;&quot;说明文档：人类&quot;&quot;&quot;</span><br><span class="line">    num = 62</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">print(Person.__bases__)  # (&lt;class &apos;object&apos;&gt;,)</span><br></pre></td></tr></table></figure></li></ul><p>###补充：<strong>__repr__</strong><br><strong>原理</strong>：当通过print打印一个对象的时候，实质是打印对象调用__repr__函数的返回值<br><strong>功能</strong>：定制对象的打印格式<br><strong>返回值</strong>：字符串<br><strong>声明</strong>：类中的对象魔法方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    &quot;&quot;&quot;说明文档：人类&quot;&quot;&quot;</span><br><span class="line">    num = 62</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">    # 系统默认的打印格式</span><br><span class="line">    return &apos;&lt;%s.%s object at %s&gt;&apos; % (self.__class__.__module__, self.__class__.__name__, hex(id(self)))</span><br><span class="line">    return str(self.__dict__)[1:-1] + &apos;at&apos; + hex(id(self))  # 定制</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pyhton中如何进行面向过程编程的基础知识&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>异常捕获和json</title>
    <link href="http://yoursite.com/2019/02/24/python%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7%E5%92%8Cjson/"/>
    <id>http://yoursite.com/2019/02/24/python异常捕获和json/</id>
    <published>2019-02-24T08:54:07.878Z</published>
    <updated>2019-02-24T09:12:13.225Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pyhton中的json数据格式和异常捕获<br><a id="more"></a></p><p>#一、json<br><strong>1.什么是json数据</strong><br><strong>定义</strong>：特定语法的数据格式</p><p><strong>2.json数据的语法</strong><br><strong>a.</strong>一个json数据只能有一个数据（而且必须要有一个）<br><strong>b.</strong>这个数据的数据类型必须是json支持的数据类型</p><p><strong>3.json支持的数据类型</strong></p><p><strong>a.数字类型</strong>:包含所有的数字，支持科学计数法<br><strong>注意</strong>：数字前不能加+号</p><p><strong>b.字符串</strong>：使用<strong>双引号</strong>括起来的数据</p><p><strong>c.布尔</strong>：true 和 false 两个值<br><strong>表示</strong>：真 和 假</p><p><strong>d.数组</strong>：相当于python的列表，[]表示，多元素用逗号隔开；例如：[‘dff’, 90, ‘dfj’]</p><p><strong>e.字典</strong>：相当于python的字典，{}表示，多个键值对逗号隔开，例如：{‘a’: 1, ‘b’: 2}</p><p><strong>f.空值</strong>：null， 相当于python中的None</p><p><strong>4.python处理json数据</strong><br>python中提供了json库，专门处理json数据<br><strong>a.将json数据转换成python数据（通过爬虫获取别人提供的json数据，在python中处理）</strong><br>1.转换方式<br>| 类型   | json | python                    |<br>| —- | —- | ————————- |<br>| 数字   | int  | int/float                 |<br>| 字符串  | str  | str，可能双引号会变成单引号           |<br>| 布尔   | bool | bool（会将首字母变大写） True False |<br>| 数组   | list | list                      |<br>| 字典   | dict | dict                      |<br>| 空值   | null | None                      |</p><p>2.loads方法<br><strong>loads(字符串， encoding=’utf-8’)</strong><br><strong>功能</strong>：将字符串中的json数据转换成对应的python数据<br><strong>输入</strong>：字符串，文字编码方式<br><strong>输出</strong>：python数据<br><strong>注意</strong>：这里的字符串<strong>内容</strong>必须是json支持的数据类型</p><p><strong>b.将python数据转换成json数据（python写后台接口，将数据提供给客户端）</strong><br>1.转换方式<br>| 类型    | python     | 类型   | json                     |<br>| —– | ———- | —- | ———————— |<br>| 数字    | int/float  | 数字   | int                      |<br>| 字符串   | str        | 字符串  | str(单引号会转换为双引号）          |<br>| 布尔    | bool       | 布尔   | True-&gt;true  False-&gt;false |<br>| 元祖、列表 | list/tuple | 数组   | list                     |<br>| 字典    | dict       | 字典   | dict                     |<br>| 空值    | None       | 空值   | null                     |</p><p><strong>注意</strong>：集合（set)不能转换成json数据类型</p><p>2.dumps(对象)<br><strong>输入</strong>：python数据<br><strong>输出</strong>：内容是json数据的字符串<br><strong>注意</strong>：返回值是字符串，并且字符串的<strong>内容</strong>是json数据</p><p><strong>5.json文件处理</strong><br><strong>什么是json文件</strong>：严格来说，json文件是文件内容是json数据的文件</p><p><strong>load(文件对象)</strong><br><strong>功能</strong>：将指定文件中的内容读出来，并且转换成pyhton对应的数据<br><strong>输入</strong>：json数据格式的文件<br><strong>输出</strong>：python对应的数据文件<br><strong>注意</strong>：这里涉及到<strong>文件的读写</strong></p><p><strong>dump(对象，文件对象)</strong><br><strong>功能</strong>：将指定对象转换成内容是json格式的字符串，然后写入指定的文件中<br><strong>注意</strong>：<br>1.对象对应的类型必须是能够转换成json的数据类型<br>2.这里涉及到<strong>文件的读写</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br></pre></td></tr></table></figure></p><p>#####1.json转python<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 将json中的字符串转换成python数据</span><br><span class="line">content = json.loads(&apos;&quot;abc&quot;&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">print(content, type(content))  # abc &lt;class &apos;str&apos;&gt;</span><br><span class="line"># 将json中的数字转换成python数据</span><br><span class="line">content = json.loads(&apos;1111&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">print(content, type(content))  # 1111 &lt;class &apos;int&apos;&gt;</span><br><span class="line"># 将json中的字典转换成python数据</span><br><span class="line">content = json.loads(&apos;&#123;&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 18&#125;&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">print(content, type(content))  # &#123;&apos;name&apos;: &apos;张三&apos;, &apos;age&apos;: 18&#125; &lt;class &apos;dict&apos;&gt;</span><br><span class="line">print(content[&apos;name&apos;])  # 张三</span><br><span class="line"># 练习</span><br><span class="line">with open(&apos;data.json&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    info = f.read()</span><br><span class="line">    dict1 = json.loads(info, encoding=&apos;utf-8&apos;)</span><br><span class="line">    for item in dict1[&apos;data&apos;]:</span><br><span class="line">        print(item[&apos;url&apos;])</span><br></pre></td></tr></table></figure></p><p>#####2.python转json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">result = json.dumps(100)</span><br><span class="line">print(type(result), result)  # &lt;class &apos;str&apos;&gt; 100</span><br><span class="line"></span><br><span class="line">result = json.dumps(&apos;abc&apos;)</span><br><span class="line">print(type(result), result)  # &lt;class &apos;str&apos;&gt; &quot;abc&quot;</span><br><span class="line"></span><br><span class="line">result = json.dumps(&apos;True&apos;)</span><br><span class="line">print(type(result), result)  # &lt;class &apos;str&apos;&gt; &quot;True&quot;</span><br><span class="line"></span><br><span class="line">result = json.dumps([10, &apos;abc&apos;, True])</span><br><span class="line">print(type(result), result)  # &lt;class &apos;str&apos;&gt; [10, &quot;abc&quot;, true]</span><br><span class="line"></span><br><span class="line">result = json.dumps(&#123;&apos;a&apos;: 10, &apos;b&apos;: True, &apos;c&apos;: None&#125;)</span><br><span class="line">print(type(result), result)  # &lt;class &apos;str&apos;&gt; &#123;&quot;a&quot;: 10, &quot;b&quot;: true, &quot;c&quot;: null&#125;</span><br></pre></td></tr></table></figure></p><p>#####3.读json文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;data.json&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    result = json.load(f)  # 相当于 result = json.loads(f.read())</span><br><span class="line">    print(type(result), result[&apos;msg&apos;])  # &lt;class &apos;dict&apos;&gt; 成功!</span><br><span class="line"></span><br><span class="line">all_student = [</span><br><span class="line">    &#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 12, &apos;tel&apos;: &apos;12333333&apos;&#125;,</span><br><span class="line">    &#123;&apos;name&apos;: &apos;大明&apos;, &apos;age&apos;: 12, &apos;tel&apos;: &apos;12333333&apos;&#125;,</span><br><span class="line">    &#123;&apos;name&apos;: &apos;地明&apos;, &apos;age&apos;: 12, &apos;tel&apos;: &apos;12333333&apos;&#125;</span><br><span class="line">]</span><br><span class="line">with open(&apos;student.json&apos;, &apos;w&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    json.dump(all_student, f)  # 相当于f.write(json.dumps(all_student))</span><br></pre></td></tr></table></figure></p><p>#二、数据请求</p><p>python中的数据请求（http请求），是第三方库requests来提供的</p><p><strong>1.requests第三方库的使用</strong><br>get/post都是发送请求获取<strong>接口</strong>提供的数据<br><strong>get(url, params=None)</strong><br><strong>url</strong>:字符串，需要获取的数据的接口地址<br><strong>params</strong>:字典，参数列表（给服务器发送请求的时候，需要传给服务器的数据）</p><h5 id="完整的接口：协议：-主机地址-路径？参数列表"><a href="#完整的接口：协议：-主机地址-路径？参数列表" class="headerlink" title="完整的接口：协议：//主机地址/路径？参数列表"></a>完整的接口：协议：//主机地址/路径？参数列表</h5><p><strong>主机地址</strong>：互联网上唯一的计算机的ip<br><strong>路径</strong>：绝对路径<br><strong>参数列表</strong>：参数名1=值1 &amp; 参数名2=值2</p><p>post(url, params=None, json=None)（暂时不管）</p><p>#####1发送请求，并且获取返回的数据<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">    # 1发送请求，并且获取返回的数据</span><br><span class="line">    # 服务器返回的数据叫响应</span><br><span class="line">    response = requests.get(&apos;https://www.apiopen.top/meituApi?page=1&apos;)</span><br><span class="line">    # response = requests.get(&apos;https://www.apiopen.top/meituApi&apos;, &#123;&apos;page&apos;: 1&#125;)</span><br><span class="line">    print(response)</span><br></pre></td></tr></table></figure></p><p> #####2.从响应中获取数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># a.获取json数据</span><br><span class="line">content_json = response.json()  # 自动将json数据转换成python对应的数据</span><br><span class="line">print(content_json)</span><br><span class="line">print(type(content_json))</span><br><span class="line"></span><br><span class="line"># b.获取字符串数据</span><br><span class="line">content_text = response.text</span><br><span class="line">print(type(content_text))</span><br><span class="line">print(content_text)</span><br><span class="line"></span><br><span class="line"># c.获取二进制数据(获取原始数据）</span><br><span class="line">content_bytes = response.content</span><br><span class="line">print(content_bytes)</span><br><span class="line"></span><br><span class="line"># 下载图片</span><br><span class="line">response2 = requests.get(&apos;http://tx.haiqq.com/uploads/allimg/170506/0H92Q915-1.jpg&apos;)</span><br><span class="line">with open(&apos;luffy.jpg&apos;, &apos;wb&apos;) as f:</span><br><span class="line">    f.write(response2.content)</span><br></pre></td></tr></table></figure></p><p>#三、异常捕获</p><p><strong>1.异常捕获</strong><br><strong>本质</strong>：让本该报错的代码不报错<br><strong>使用场景</strong>：知道某段代码会出现异常，但是又没有办法避免，同时不希望出现异常时程序崩溃，这时候就可以通过异常捕获，来让程序不崩溃，并且自行处理异常</p><p><strong>2.异常捕获语法</strong><br><strong>a.try-except</strong><br><strong>功能</strong>：可以捕获<strong>所有类型</strong>的异常，只要出现异常就捕获<br>try:<br>  &emsp;  代码段1(可能会出现异常的代码段）<br>except:<br>  &emsp;   代码段2（出现异常后处理异常的代码段）<br><strong>执行过程</strong>：<br>执行代码段1，如果执行代码段1中<strong>出现异常</strong>，程序不崩溃，<strong>直接执行</strong>代码段2,如果代码段1中未出现异常，就不执行代码段2，而是直接执行后面的其他语句</p><p><strong>b.try-except 错误类型</strong><br> <strong>功能</strong>：捕获指定类型的异常，只有代码段1中出现了指定类型的异常才捕获<br>try：<br>  &emsp;   代码段1(可能会出现异常的代码段）<br>except 错误类型：<br>  &emsp;   代码段2（出现异常后处理异常的代码段）</p><p><strong>c.try - except (错误类型1，错误类型2，….)</strong><br><strong>功能</strong>：同时捕获<strong>多种指定异常</strong>，做出<strong>相同处理</strong><br>try:<br>   &emsp;  代码段1(可能会出现异常的代码段）<br>except (错误类型1，错误类型2，….):<br>   &emsp;  代码段2（出现异常后处理异常的代码段）</p><p><strong>d.try - except -错误类型1 - except 错误类型2…</strong>功能**：同时捕获多种异常，可以对不同异常做不同处理<br>try:<br>    &emsp; 代码段1(可能会出现异常的代码段）<br>except 错误类型1：<br>    &emsp; 代码段2<br>except 错误类型2：<br>    &emsp; 代码段3</p><p><strong>3.抛出异常</strong>（主动让程序崩溃）</p><p><strong>raise 错误类型</strong><br><strong>说明</strong>：程序执行到此，如果没有满足要求，就抛出异常</p><p><strong>注意</strong>：错误类型可以是系统提供的错误类型，也可以是自定义错误类型（要求这个值是一个类，而且是exception的子类）</p><p>#####a.try-except<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def method11():</span><br><span class="line">    while 1:</span><br><span class="line">        try:</span><br><span class="line">            # 正确就跳出循环，否则继续输入</span><br><span class="line">            number = int(input(&apos;输入数字：&apos;))</span><br><span class="line">            print(&apos;输入正确&apos;, number)</span><br><span class="line">            break</span><br><span class="line">        except:</span><br><span class="line">            print(&apos;输入有误，继续输入&apos;)</span><br></pre></td></tr></table></figure></p><p> #####c.try-except (错误类型1,错误类型2…)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def method2():</span><br><span class="line">    try:</span><br><span class="line">        print(&#123;&apos;a&apos;: 100&#125;[&apos;b&apos;])  # KeyError</span><br><span class="line">        print([1, 2, 3][4])  # IndexError</span><br><span class="line">    except (KeyError, IndexError):</span><br><span class="line">        print(&apos;出现异常&apos;)</span><br></pre></td></tr></table></figure></p><p> #####b.try-except 错误类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def method2():</span><br><span class="line">    try:</span><br><span class="line">        print(&#123;&apos;a&apos;: 100&#125;[&apos;b&apos;])  # KeyError</span><br><span class="line">        print([1, 2, 3][4])  # IndexError</span><br><span class="line">    except KeyError:</span><br><span class="line">        print(&apos;出现异常&apos;)</span><br></pre></td></tr></table></figure></p><p> #####d.try - except -错误类型1 - except 错误类型2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def method3():</span><br><span class="line">    try:</span><br><span class="line">        with open(&apos;abc.txt&apos;, &apos;r&apos;) as f:</span><br><span class="line">            print(f.read())</span><br><span class="line">        print(&#123;&apos;a&apos;: 100&#125;[&apos;b&apos;])  # KeyError</span><br><span class="line">    except KeyError:</span><br><span class="line">        print(&apos;key不存在&apos;)</span><br><span class="line">    except FileNotFoundError:</span><br><span class="line">        print(&apos;文件不存在&apos;)</span><br></pre></td></tr></table></figure></p><p>#####3.抛出异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def pu_func1(age:int):</span><br><span class="line">    if age &gt; 18:</span><br><span class="line">        raise ValueError</span><br><span class="line">    print(age)  # 报错</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pyhton中的json数据格式和异常捕获&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>生成式和文件操作</title>
    <link href="http://yoursite.com/2019/02/24/python%E7%94%9F%E6%88%90%E5%BC%8F%E5%92%8C%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/02/24/python生成式和文件操作/</id>
    <published>2019-02-24T08:52:38.365Z</published>
    <updated>2019-02-24T09:12:22.869Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pyhton中的生成式和文件操作相关的知识<br><a id="more"></a></p><p>#一、生成式<br><strong>1.什么是生成式</strong><br>生成式就是生成器的一种特殊写法<br><strong>作用</strong>：让变量去序列中取值，每取一个值，就将对应的表达式的值，作为生成器的元素<br><strong>2.写法</strong><br>a.生成器 = （表达式 for 变量 in 序列）<br><strong>展开</strong>：<br>def 函数名（）：<br>   &emsp; for 变量 in 序列：<br>    &emsp;&emsp;    yield 表达式<br>b.生成器 = （表达式 for 变量 in 序列 if 条件语句）<br><strong>展开</strong>：<br>def 函数名（）：<br> &emsp;   for 变量 in 序列：<br>     &emsp;&emsp;   if 条件语句：<br>      &emsp;&emsp;&emsp;      yield 表达式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gen1 = (x*2 for x in &apos;abc123&apos;)</span><br><span class="line">print(gen1)</span><br><span class="line">print(next(gen1))</span><br><span class="line">print(next(gen1))</span><br><span class="line">print(next(gen1))</span><br><span class="line"></span><br><span class="line"># 这个是生成式(x*2 for x in &apos;abc123&apos;)展开成生成器的写法</span><br><span class="line">def func1():</span><br><span class="line">    for x in &apos;abc123&apos;:</span><br><span class="line">        yield x*2</span><br><span class="line"></span><br><span class="line">gen2 = ((value, key) for key, value in &#123;&apos;name&apos;: &apos;xioaming&apos;, &apos;age&apos;: 10&#125;.items())</span><br><span class="line">print(next(gen2))  # (&apos;xioaming&apos;, &apos;name&apos;)</span><br><span class="line">print(next(gen2))  # (10, &apos;age&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gen3 = (x for x in range(10) if x &amp; 1)</span><br><span class="line">print(next(gen3))  # 1</span><br><span class="line">print(next(gen3))  # 3</span><br></pre></td></tr></table></figure></p><p><strong>3.将迭代器和生成器转换成其他序列</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gen5 = (x.upper() for x in &apos;12df43df3df5&apos; if &apos;a&apos; &lt;= x &lt;= &apos;z&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def list_pu(seq):</span><br><span class="line">    new = []</span><br><span class="line">    for x in seq:</span><br><span class="line">        new.append(x)</span><br><span class="line">    return new</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list2 = list_pu(gen5)</span><br><span class="line">print(list2)  # [&apos;D&apos;, &apos;F&apos;, &apos;D&apos;, &apos;F&apos;, &apos;D&apos;, &apos;F&apos;]</span><br><span class="line"></span><br><span class="line"># [生成式] -&gt; 直接将生成式对应的生成器转换为列表</span><br><span class="line">list3 = [x.upper() for x in &apos;12df43df3df5&apos; if &apos;a&apos; &lt;= x &lt;= &apos;z&apos;]</span><br><span class="line">print(list3)  # [&apos;D&apos;, &apos;F&apos;, &apos;D&apos;, &apos;F&apos;, &apos;D&apos;, &apos;F&apos;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 交换字典的key和value的位置</span><br><span class="line">dict1 = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">result = dict((x, y) for y, x in dict1.items())</span><br><span class="line">print(result)  # &#123;1: &apos;a&apos;, 2: &apos;b&apos;, 3: &apos;c&apos;&#125;</span><br></pre></td></tr></table></figure><p>#二、文件操作<br><strong>1.数据本地化和数据持久化</strong><br><strong>定义</strong>：将数据以文件的形式存到计算机硬盘（程序中保存的数据，当程序运行结束会自动销毁）</p><p><strong>2.如何数据持久化（如何将程序中数据和本地文件数据关联）</strong><br><strong>文件读写操作</strong>：<br><strong>读</strong>：获取文件中的内容<br><strong>写</strong>：将数据添加到文件中</p><p><strong>a.文件操作的基本流程</strong>：<br><strong>第一步</strong>：打开文件<br><strong>第二步</strong>：文件操作（读/写）<br><strong>第三步</strong>：关闭文件</p><p><strong>3.打开文件</strong><br><strong>open(file, mode=’r’, encoding=None)</strong><br><strong>功能</strong>：以指定的模式打开指定的文件，并且返回被打开的文件对象<br><strong>说明</strong>：<br><strong>file</strong>:<strong>字符串</strong>，需要打开的文件的路径<br>        1.（了解）绝对路径：文件在电脑上的全路径<br>        2.<strong>（掌握）相对路径</strong>：相对当前代码文件对应的目录来确定的路径<br>                       <strong>./</strong>   &emsp; 当前py文件所在的目录<br>                        <strong>../</strong>  &emsp; 代表当前目录的上层目录<br>                        <strong>…/</strong>  &emsp;代表当前目录的上层目录的上层目录<br><strong>mode</strong>:<strong>字符串</strong>，文件的打开方式<br>       <strong>r</strong>: 以<strong>只读</strong>的形式打开，文本  （默认值）<br>        <strong>w</strong>: 以写的形式打开（覆盖），文本<br>        <strong>a</strong>:以写的形式打开（追加），文本<br>       <strong>rb/br</strong> : 以只读的形式打开，二进制<br>        <strong>wb/bw</strong>: 以写的形式打开（覆盖），二进制<br>        <strong>+</strong>:以读写的形式打开<br>        <strong>注意</strong>：<br>1.以<strong>读的方式</strong>打开一个不存在的文件，程序报错：FileNotFoundError<br>2.以<strong>写的方式</strong>打开一个不存在的文件，不会报错，还会<strong>自动创建</strong>这个文件<br><strong>encoding</strong>:<strong>字符串</strong>，文字编码方式<br>           &emsp;&emsp;&emsp;&emsp;&emsp; utf-8:支持所有的语言<br>            &emsp;&emsp;&emsp;&emsp;&emsp;gbk:只支持英文<br>            <strong>注意</strong>：<br>            a.读和写对应的编码要保持一致<br>            b.非文本文件不能设置编码encoding，例如：图片，视频，可执行文件等..<br>            c.传值时，必须使用关键字参数<br>            d.以二进制形式打开文件，不能设置encoding</p><p><strong>4.操作文件</strong>：<br><strong>a.读操作</strong><br><strong>文件对象.read()</strong><br><strong>目的</strong>：获取指定文件的内容<br><strong>注意</strong>：打开一次，只能读一次，再用需要再打开</p><p><strong>5.关闭文件</strong><br><strong>文件对象.close()</strong></p><p><strong>6.文件操作的简写方式</strong><br><strong>说明</strong>：打开文件后，操作完成后会自动关闭文件</p><p>#####with open(file, mode, encoding) as 文件对象：<br>  &emsp;  文件操作代码</p><p>#####a.打开文件</p><p><strong><em>1.打开当前目录下的文件：文件名 或者 ./文件名</em></strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">open(&apos;致橡树.txt&apos;)</span><br><span class="line">open(&apos;./致橡树.txt&apos;)</span><br></pre></td></tr></table></figure></p><p><strong><em>2.打开当前目录下，子目录下的文件:子目录/文件名</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">open(&apos;files/abc.txt&apos;)</span><br><span class="line">open(&apos;files/f1/aaa.txt&apos;)</span><br></pre></td></tr></table></figure></p><p>#####b.打开方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;files/a1.txt&apos;, &apos;w&apos;, encoding=&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure></p><p>#####c.读操作</p><p><strong><em>1.读整个文件内容</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;致橡树.txt&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">print(f.read())</span><br><span class="line"></span><br><span class="line">f = open(&apos;致橡树.txt&apos;, &apos;rb&apos;)</span><br><span class="line">content = f.read()</span><br><span class="line">print(type(content))  # &lt;class &apos;bytes&apos;&gt;  二进制对应的数据类型</span><br></pre></td></tr></table></figure></p><p><strong><em>2.读一行内容</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f2 = open(&apos;致橡树.txt&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">line1 = f2.readline()</span><br><span class="line">print(line1)</span><br><span class="line">line2 = f2.readline()</span><br><span class="line">print(line2)</span><br><span class="line">print(f2.read())</span><br></pre></td></tr></table></figure></p><p>#####应用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 练习：读文件中的内容，一行一行读，读完为止</span><br><span class="line">f1 = open(&apos;致橡树.txt&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    line1 = f2.readline()</span><br><span class="line">    if not line1:</span><br><span class="line">        break</span><br><span class="line">    print(line1)</span><br></pre></td></tr></table></figure></p><p>#####d.写操作示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 如果需要对文件进行写操作，那么文件必须以写的方式打开</span><br><span class="line"># w -&gt; 用新的内容覆盖原内容</span><br><span class="line"># a -&gt; 在源文件末尾添加新的内容</span><br><span class="line"># bw/wb</span><br><span class="line">f = open(&apos;致橡树.txt&apos;, &apos;a&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">f.write(&apos;哈喽，小姐姐！！！&apos;)</span><br></pre></td></tr></table></figure></p><h1 id="文件读写的应用步骤"><a href="#文件读写的应用步骤" class="headerlink" title="文件读写的应用步骤"></a>文件读写的应用步骤</h1><p><strong>第一步</strong>：程序中需要这个数据时，就从文件中将这个数据读出来<br><strong>第二步</strong>：对数据进行修改后，再将修改了之后最新的数据保存到文件中<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 用一个变量保存当前文件执行的次数：第一次执行py文件打印1，第二次执行打印2...</span><br><span class="line"></span><br><span class="line"># 将数据从文件中读出来</span><br><span class="line">with open(&apos;files/data.txt&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    num = int(f.read())</span><br><span class="line"></span><br><span class="line">num += 1</span><br><span class="line"></span><br><span class="line"># 将新的数据写入文件中</span><br><span class="line">with open(&apos;files/data.txt&apos;, &apos;w&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    f.write(str(num))</span><br><span class="line"></span><br><span class="line"># 显示数据</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pyhton中的生成式和文件操作相关的知识&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>函数（三）</title>
    <link href="http://yoursite.com/2019/02/24/python%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/24/python函数（三）/</id>
    <published>2019-02-24T08:50:25.335Z</published>
    <updated>2019-02-24T09:13:36.467Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pyhton中的函数中的递归函数和模块方面的知识<br><a id="more"></a></p><p>#一、递归函数</p><p>实际开发时候，能不用递归就不用</p><p><strong>1.什么是递归函数</strong><br>函数中调用函数本身的函数就是递归函数</p><p><strong>2.递归的作用</strong><br>循环能做的事情，递归函数都能做</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">a = 0</span><br><span class="line">def func2():</span><br><span class="line">    global a</span><br><span class="line">    if a &lt; 5:</span><br><span class="line">        print(&apos;~~~~~&apos;)</span><br><span class="line">        a += 1</span><br><span class="line">        func2()</span><br></pre></td></tr></table></figure><p><strong>3.怎么写递归函数</strong>: f(n)<br><strong>步骤：</strong><br><strong>第一步</strong>：确定临界值<br><strong>说明</strong>：循环结束的条件，在临界值的地方要让递归函数结束！<br><strong>第二步</strong>：找关系 - 找当次循环和上次循环的关系<br>&emsp; &emsp; &emsp;          找f(n)和f(n-1)的关系<br><strong>第三步</strong>：假设函数的功能已经实现，通过f(n-1)来实现f(n)的功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def f(n):</span><br><span class="line">    # 1 找临界值</span><br><span class="line">    if n == 1:</span><br><span class="line">        return 1</span><br><span class="line">    # 2.找关系</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    f(n) = f(n-1) + n</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    return f(n-1)+n</span><br><span class="line"></span><br><span class="line">print(f(100))</span><br></pre></td></tr></table></figure><p><strong>4.循环能做的事情不能用递归做！</strong><br><strong>原因</strong>：<br><strong>递归函数</strong>:每次调用函数本身，都会在栈区间开辟一块空间，并且不会释放，直到找到临界点，严重消耗内存<br><strong>循环</strong>：开辟一块空间，反复改变里面的值</p><p>#二、模块</p><p><strong>1.什么是模块</strong><br>在python中一个.py文件就是一个模块</p><p><strong>分类</strong>：<br><strong>a.系统模块（标准库）</strong>:系统提供的模块（安装解释器时，已经导入到解释器中,直接使用即可）<br><strong>random</strong><br><strong>作用</strong>：提供随机数<br><strong>math</strong><br><strong>作用</strong>：提供数学运算相关的方法<br><strong>json库</strong><br><strong>作用</strong>：提供json相关操作<br><strong>re</strong><br><strong>作用</strong>：提供正则表达式的操作<br><strong>socket</strong><br><strong>作用</strong>：提供python的套接字编程<br><strong>time</strong><br><strong>作用</strong>：提供和时间相关的操作<br><strong>threading</strong><br><strong>作用</strong>：提供和线程相关的操作</p><p><strong>b.自定义模块</strong>：<br>自己创建的py文件<br><strong>分类</strong>：<br>1.自己写的模块<br>2.别人写的模块：第三方库(需要先下载到解释器中，然后才能在代码中导入)</p><p><strong>补充</strong>：标准库和第三方库一般是通过模块提供变量、函数、类</p><p><strong>2.怎么使用模块</strong><br><strong>写法</strong>：import 模块名（库名）<br><strong>作用</strong>：直接导入指定的模块，导入后可以使用模块中所有的全局变量<br>（包含了变量、函数和类）<br><strong>使用</strong>：模块名.变量  -&gt; 来使用模块中的内容</p><p><strong>写法</strong>：from 模块名 import 变量1，变量2<br><strong>作用</strong>：在程序中导入指定的模块，导入后只能使用import后面的变量<br><strong>使用</strong>：直接使用变量，无需加’模块名.‘</p><p><strong>写法</strong>：from 模块名 import *<br><strong>使用</strong>：直接使用变量，无需加’模块名.‘</p><p><strong>导入模块的实质</strong>：<br>a.不管是使用import还是from-import,导入模块的时候都会执行模块中所有的代码<br>b.python中一个模块不会重复导入多次，因为导入时，系统会自动检查当前模块是否已经导入</p><p><strong>4.怎么阻止模块中的内容被其他模块执行</strong></p><p>如果不希望被其他模块执行的代码放在if语句中，<br>如果希望被其他模块使用的代码就放在if语句外面<br>（这里的if语句指的是：if __name__ == ‘__main__‘:）</p><p><strong>原理</strong>：每个模块都有一个<strong>name</strong>属性，代表模块名，默认情况下它的值是py文件的文件名，当当前模块正在被执行（直接执行）的时候，它的属性__name__的值就会变成__main__</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 1.系统模块</span><br><span class="line">import random</span><br><span class="line">print(random.randint(1, 199))</span><br><span class="line"></span><br><span class="line"># 自定义模块</span><br><span class="line">import model1</span><br><span class="line">model1.a = 1000</span><br><span class="line">print(model1.a)</span><br><span class="line">print(model1.fun1())</span><br><span class="line"></span><br><span class="line"># 不用模块名.方法就能调用模块中的一些变量</span><br><span class="line">from model2 import aa, x  # 不能是强制使用</span><br><span class="line">print(&apos;aa:&apos;, aa)</span><br><span class="line">print(x)  # 9</span><br><span class="line"></span><br><span class="line"># 不用模块名.方法就能调用模块中所有变量</span><br><span class="line">from model2 import *  # *是通配符</span><br><span class="line">print(aa)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><p><strong>5.重命名</strong><br><strong>目的</strong>：导入模块时，可以对<strong>模块</strong>或者<strong>模块中的内容</strong>重新命名<br><strong>写法</strong>：<br><strong>a</strong>.import 模块名 <strong>as</strong> 新模块名<br><strong>b</strong>.from 模块名 import 变量1 <strong>as</strong> 新变量1，变量2 as 新变量2<br><strong>应用</strong>：当模块名很长时，可以使用此方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 修改模块名</span><br><span class="line">import model4 as newMode</span><br><span class="line">print(model4.age)</span><br><span class="line"></span><br><span class="line"># 修改模块中的内容</span><br><span class="line">name = 100</span><br><span class="line">from model4 import name as new_name, age as new_age</span><br><span class="line">print(name)</span><br><span class="line">print(new_name)</span><br><span class="line">print(new_age)</span><br></pre></td></tr></table></figure></p><p>#三、迭代器</p><p><strong>1.什么是迭代器（iter)</strong><br><strong>定义</strong>：python中提供的容器型数据类型<br><strong>特点</strong>：<br>a.从前往后一个一个的取<br>b.取出后，迭代器中<strong>不复存在</strong></p><p><strong>2.迭代器的字面量</strong><br>a.迭代器没有指定格式的字面量<br>b.迭代器元素的产生：<br>1.通过其他序列转换，<br>2.通过生成器产生<br><strong>元素</strong>：任意数据类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 将字符串转换成迭代器，元素就是字符串中的每个字符</span><br><span class="line">iter1 = iter(&apos;hello&apos;)</span><br><span class="line">print(iter1)</span><br><span class="line"></span><br><span class="line"># 将列表转换成迭代器，元素就是列表中的每个元素</span><br><span class="line">iter2 = iter([100, &apos;dfd&apos;, (10, 39), [1, 2], &#123;&apos;a&apos;: 10, &apos;b&apos;: 20&#125;, lambda x: x])</span><br><span class="line">print(iter2)</span><br></pre></td></tr></table></figure><p><strong>3.获取元素</strong><br><strong>元素特点</strong>：只支持<strong>查</strong>，不支持增删改<br><strong>获取方式</strong>：<br>1.next函数<br><strong>写法</strong>：next（迭代器名）<br><strong>目的</strong>：获取迭代器中最新（最顶层）的数据<br>2.for 变量 in 迭代器<br><strong>作用</strong>：遍历获取每一个元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># next</span><br><span class="line">iter3 = iter(&apos;hello&apos;)</span><br><span class="line">print(next(iter3))</span><br><span class="line">print(next(iter3))</span><br><span class="line">print(next(iter3))</span><br><span class="line">print(next(iter3))</span><br><span class="line">print(next(iter3))</span><br><span class="line"># print(next(iter3))  # 报错 StopIteration 因为迭代器中的数据已经取完</span><br><span class="line"></span><br><span class="line"># 通过for - in 取迭代器中的元素和next效果一样，元素还是会被取出</span><br><span class="line">iter3 = iter(&apos;123456&apos;)</span><br><span class="line">print(next(iter3))</span><br><span class="line">for x in iter3:</span><br><span class="line">    print(&apos;x&apos;: x)</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：迭代器元素取完，迭代器不会消失</p><p>#四、生成器</p><p><strong>1.什么是生成器</strong><br>生成器就是迭代器，迭代器不一定是生成器</p><p><strong>2.生成器怎么产生元素</strong><br><strong>如何产生</strong>：调用一个带有yield的关键字的函数，就能得到一个生成器</p><p><strong>不带yield函数</strong>：调用时会执行函数体，并且获取返回值<br><strong>带有yield函数</strong>：调用时不会执行函数体，也不会获取返回值，而是产生一个生成器（函数调用表达式就是一个生成器）<br><strong>这个生成器的元素就是yield关键字后面的值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def func1():</span><br><span class="line">    print(&apos;===&apos;)</span><br><span class="line">    return 100</span><br><span class="line"></span><br><span class="line">print(func1())  # 100</span><br><span class="line"></span><br><span class="line">def func2():</span><br><span class="line">    print(&apos;===&apos;)</span><br><span class="line">    return 100</span><br><span class="line">    yield</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(func2())  # &lt;generator object func2 at 0x006F7ED0&gt;</span><br></pre></td></tr></table></figure><p><strong>3.获取生成器中的元素</strong><br><strong>使用</strong>：<br>1.next()<br>2.for 变量 in 生成器 </p><p>###重点！！！<br><strong>原理</strong>：<br><strong>第一步</strong>：执行生成器对应的函数<br><strong>第二步</strong>：每次都是执行到yield语句为止，并且会将yield后面的值作为当次获取到的元素<br><strong>第三步</strong>：下次获取元素会接着上次结束的位置，接着执行，直到下一个yield为止<br><strong>第四步</strong>：以此类推，直到函数结束，如果执行函数结束没有遇到yield，那么就会报”stopxxxx”异常</p><p>一个yield是获取一个元素<br>几个yield就是获取几个元素</p><p>len（迭代器）无效，因为元素都是临时取用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;=================&apos;)</span><br><span class="line">def func3():</span><br><span class="line">    print(&apos;~~~~~&apos;)</span><br><span class="line">    yield 100</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gen1 = func3()  # gen1就是一个生成器</span><br><span class="line"># next()</span><br><span class="line"></span><br><span class="line">print(gen1)</span><br><span class="line">print(&apos;打印&apos;, next(gen1))</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 练习：给每个学生一个学号，并且不会重复</span><br><span class="line">def creat_num():</span><br><span class="line">    num = 1</span><br><span class="line">    while True:</span><br><span class="line">        yield &apos;py1809%d&apos; % num</span><br><span class="line">        num += 1</span><br><span class="line"></span><br><span class="line">num_gen = creat_num()</span><br><span class="line">for _ in range(10):</span><br><span class="line">    print(next(num_gen))</span><br><span class="line"></span><br><span class="line">print(&apos;新来的学生&apos;)</span><br><span class="line">print(next(num_gen))</span><br></pre></td></tr></table></figure><p>####实现一个属于自己的迭代器方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def pu_iter(seq):</span><br><span class="line">    for x in seq:</span><br><span class="line">        yield x</span><br><span class="line"></span><br><span class="line">iter1 = pu_iter(&apos;abc&apos;)</span><br><span class="line">print(next(iter1))  # a</span><br><span class="line">print(next(iter1))  # b</span><br><span class="line">print(next(iter1))  # c</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pyhton中的函数中的递归函数和模块方面的知识&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>函数（二）</title>
    <link href="http://yoursite.com/2019/02/24/python%E5%87%BD%E6%95%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/24/python函数（二）/</id>
    <published>2019-02-24T08:48:29.536Z</published>
    <updated>2019-02-24T09:13:55.220Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pyhton中的函数中的匿名函数、变量作用域和函数变量等知识<br><a id="more"></a></p><p>#一、匿名函数<br><strong>1.什么是匿名函数？</strong><br><strong>定义</strong>：匿名函数还是函数，只是声明格式不同<br><strong>适用</strong>：函数功能比较简单的函数</p><p><strong>2.匿名函数的声明</strong><br><strong>a.语法</strong>：<br>变量名 = lambda 形参列表：返回值<br><strong>b.说明</strong><br><strong>变量名</strong>：函数名<br><strong>lambda</strong>:声明匿名函数的关键字<br><strong>形参列表</strong>：和普通形参列表相同<br><strong>：</strong>：固定写法<br><strong>返回值</strong>：相当于普通函数中只有一条return语句的函数体</p><p><strong>3.匿名函数的调用</strong>：和普通函数一样</p><p><strong>4.存在的目的</strong>：对普通函数的一种简写方式</p><p><strong>5.匿名函数特点</strong></p><p><strong><em>a.匿名函数的参数也可以设置默认值</em></strong><br><strong><em>b.匿名函数不能说明类型</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">func1 = lambda x, y=0: x+y</span><br><span class="line">print(func1(1, 34))</span><br><span class="line">print(func1(y=11, x=22))</span><br></pre></td></tr></table></figure></p><p><strong><em>c.匿名函数可以设置不定长参数</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">func2 = lambda *nums: sum(nums)</span><br><span class="line">print(func2(1, 2, 3))  # 6</span><br></pre></td></tr></table></figure></p><p>#二、变量的作用域</p><p><strong>1.什么是变量的作用域</strong><br><strong>定义</strong>：变量能够使用的范围</p><p><strong>2.分类</strong><br><strong>a.全局变量</strong><br><strong>定义</strong>：没有声明在函数或者类中的变量<br><strong>作用域</strong>：从声明开始，到文件结束</p><p><strong>b.局部变量</strong><br><strong>定义</strong>：声明在函数或者类中的变量<br><strong>作用域</strong>：从声明开始，到函数结束</p><p><strong>总结</strong>：<br>当我们调用函数时，系统会自动在栈区间专门开辟一块独立的内容空间，用来保存在函数中声明的变量（形参也是属于声明在函数的变量），函数调用结束后，函数对应的栈区间会自动销毁。<br><strong>函数调用过程是一个压栈的过程</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 全局变量</span><br><span class="line">a = 11</span><br><span class="line">def func1():</span><br><span class="line">    print(&apos;函数中&apos;, a)</span><br><span class="line">func1()  # 函数中 11</span><br><span class="line"></span><br><span class="line"># 2.全局变量</span><br><span class="line"># 这里的y也是全局变量</span><br><span class="line">for y in range(2):</span><br><span class="line">    print(y)</span><br><span class="line">print(&apos;外面&apos;, y)</span><br><span class="line"></span><br><span class="line">def func2():</span><br><span class="line">    print(&apos;函数里面&apos;, y)</span><br></pre></td></tr></table></figure><p><strong>3.局部变量</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># a.函数的形参相当于声明在函数中的变量，所以是局部变量</span><br><span class="line">def func3(num1):</span><br><span class="line">    print(num1)</span><br><span class="line">    for x in range(3):</span><br><span class="line">        print(num1)</span><br><span class="line">func3(11)</span><br><span class="line"></span><br><span class="line"># print(num1)   # 局部变量不能在函数外面使用</span><br></pre></td></tr></table></figure></p><p>####判断标准：看在函数里外</p><p><strong>4.如果全局变量和局部变量同名，那么在局部变量的作用域中使用局部变量，外面使用全局变量</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 全局变量</span><br><span class="line">aa = 1121</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def func3():</span><br><span class="line">    # 局部变量</span><br><span class="line">    aa = 299</span><br><span class="line">    print(&apos;函数里&apos;, aa)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func3()  # 函数里 299</span><br><span class="line">print(&apos;外面&apos;, aa)  # 外面 1121</span><br></pre></td></tr></table></figure></p><p><strong>3.global</strong><br><strong>作用</strong>：在函数中声明一个全局变量(只能是在函数中使用)<br><strong>语法</strong>：<br>global 变量名<br>变量名 = 值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">dd = 111</span><br><span class="line">def func6():</span><br><span class="line">    global dd</span><br><span class="line">    dd = 222</span><br><span class="line">    print(&apos;函数里&apos;, dd)</span><br><span class="line"></span><br><span class="line">    global ad</span><br><span class="line">    ad = 1222</span><br><span class="line">    print(ad)   # 1222</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func6()  # 222</span><br><span class="line">print(&apos;外面&apos;, dd)  # 222</span><br><span class="line">print(ad)  # 1222</span><br></pre></td></tr></table></figure><p><strong>4.nonlocal</strong><br><strong>作用</strong>：在局部的局部中<strong>修改</strong>局部变量的值，<br>就使用nonlocal对变量进行说明<br>nonlocal 局部变量<br>局部变量 = 值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def func11():</span><br><span class="line">    abc = 123</span><br><span class="line">    print(&apos;11&apos;, abc)</span><br><span class="line"></span><br><span class="line">    def func22():</span><br><span class="line">        abc = 333</span><br><span class="line">        print(&apos;22&apos;, abc)</span><br><span class="line">    func22()</span><br><span class="line">    print(abc)</span><br><span class="line"></span><br><span class="line">func11()</span><br></pre></td></tr></table></figure></p><p>#三、函数变量<br><strong>1.声明函数实质</strong>：<br>声明一个类型是function的变量，函数名就是变量名<br><strong>2.区别</strong>：</p><p><strong>函数名</strong> ：<br><strong>说明</strong>：类型是function的变量</p><p><strong>函数名（）</strong><br><strong>说明</strong>：<br>1.调用函数<br>2.获取函数的返回值</p><p><strong>3.函数变量的应用</strong></p><p><strong>a.给其他变量赋值</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"># 声明一个列表变量list1</span><br><span class="line">list1 = [1, 2, 3]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 声明一个函数变量func1</span><br><span class="line">def func1():</span><br><span class="line">    print(&apos;我是一个函数&apos;)</span><br><span class="line">    return 10</span><br><span class="line"></span><br><span class="line"># 使用列表给另一个变量赋值</span><br><span class="line">list2 = list1</span><br><span class="line"></span><br><span class="line"># 赋值后就可以当做列表来用</span><br><span class="line">print(list2[0])</span><br><span class="line"></span><br><span class="line"># 使用函数变量给另一变量赋值</span><br><span class="line">func2 = func1</span><br><span class="line"></span><br><span class="line"># 赋值后func2就可以当做函数来使用</span><br><span class="line">func2()</span><br><span class="line">print(func2())</span><br></pre></td></tr></table></figure></p><p><strong>b.变量作为容器类数据的元素</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line">nums = [a, 100, 1000]</span><br><span class="line">print(nums)</span><br><span class="line">print(nums[0] - 10)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def func3():</span><br><span class="line">    print(&apos;abc&apos;)</span><br><span class="line">    return 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 函数变量拿到的是地址</span><br><span class="line">list2 = [func3, func3(), 10]</span><br><span class="line">print(list2)</span><br><span class="line">print(list2[0]())</span><br></pre></td></tr></table></figure><p><strong>c.变量作为函数的实参</strong><br>函数1作为函数2的实参 - 函数2就是一个高阶函数<br><strong>高阶函数</strong>：用一个函数给此函数传实参时，此函数就是高阶函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = 10</span><br><span class="line">def func4(n:int):</span><br><span class="line">    print(n+n-1)</span><br><span class="line"></span><br><span class="line">func4(a)</span><br><span class="line"></span><br><span class="line">def func5(x):</span><br><span class="line">    print(x)</span><br><span class="line"></span><br><span class="line">func5(func4)</span><br><span class="line">func5(lambda x: x*2)</span><br></pre></td></tr></table></figure></p><p>#####应用：sort函数<br>列表.sort(key=None, reverse=False)<br><strong>key</strong>：<br><strong>要求</strong>：<br>带<strong>一个参数</strong>，且返回值是比较的对象<br><strong>说明</strong>：<br><strong>参数</strong>：指向的是列表中的元素<br><strong>对象</strong>：确定按照什么进行排序</p><p><strong>d.变量作为函数的返回值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def operation(char):</span><br><span class="line">    if char == &apos;+&apos;:</span><br><span class="line">        def func1(*nums):</span><br><span class="line">            return sum(nums)</span><br><span class="line">        # 将函数作为函数的返回值</span><br><span class="line">        return func1</span><br><span class="line">    elif char == &apos;-&apos;:</span><br><span class="line">        def func2(*nums):</span><br><span class="line">            if not nums:</span><br><span class="line">                return 0</span><br><span class="line">            sum1 = nums[0]</span><br><span class="line">            for index in range(1, len(nums)):</span><br><span class="line">                sum1 -= nums[index]</span><br><span class="line">            return sum1</span><br><span class="line"></span><br><span class="line">        return func2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(operation(&apos;+&apos;))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pyhton中的函数中的匿名函数、变量作用域和函数变量等知识&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>函数（一）</title>
    <link href="http://yoursite.com/2019/02/24/python%E5%87%BD%E6%95%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/24/python函数（一）/</id>
    <published>2019-02-24T08:46:31.346Z</published>
    <updated>2019-02-24T09:13:25.344Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pyhton中的函数基础知识<br><a id="more"></a></p><h1 id="一、认识函数"><a href="#一、认识函数" class="headerlink" title="一、认识函数"></a>一、认识函数</h1><p><strong>1.什么是函数？</strong><br><strong>定义</strong>：对实现某一特定功能的代码段的<strong>封装</strong><br>使用函数就是使用这个函数里面的<strong>代码段</strong></p><p><strong>2.函数的分类</strong><br><strong>系统函数</strong>：系统已经定义好的函数，我们直接调用函数使用函数的功能<br><strong>自定义函数</strong>：需要程序员自己定义的函数</p><p><strong>3.函数的定义</strong>   (好比是制造机器）<br><strong>a.语法</strong><br>def 函数名（参数列表）：<br> &emsp;&emsp;&emsp;函数体<br><strong>b.说明</strong>：<br><strong>def</strong>:声明函数的关键字<br><strong>函数名</strong>：标识符，不能是关键字<br>            <strong>pep8命名规范</strong>，见名知义（看到函数名大概知道函数功能）<br><strong>（）</strong>：固定格式<br><strong>参数列表</strong>：参数1，参数2，参数3…；这里参数叫做<strong>形参</strong>,定义时形参就是变量<br> <strong>作用</strong>：将函数<strong>外面的数据</strong>从外面<strong>传递</strong>到函数<strong>里面</strong><br><strong>：</strong>：固定格式<br><strong>完整函数体</strong>：<br>1.函数说明文档<br>2.实现函数功能的代码段<br>3.函数返回值</p><p><strong>c.初学者申明函数的步骤</strong><br><strong>第一步</strong>：确定函数的功能<br><strong>第二步</strong>：根据功能确定函数名<br><strong>第三步</strong>：确定形参（确定参数是否需要和几个），实行函数的功能需不需要从外面传值进来，以及需要传几个<br><strong>第四步</strong>：实现函数的功能<br><strong>第五步</strong>：确定函数返回值</p><p><strong>（重点!!!)注意</strong>：函数声明时，并不会执行函数体!<br>只有在调用的时候才会执行</p><p><strong>4.函数的调用</strong> (好比是使用机器）<br><strong>a.语法</strong>：<br>函数名（实参列表）<br><strong>b.说明</strong>：<br><strong>函数名</strong> - 已经声明过的函数<br><strong>（）</strong>：固定写法<br><strong>实参列表</strong>：实参是来给形参赋值（用实参给形参赋值的过程加传参），实参和形参要一一对应<br><strong>c.调用过程（重点！！！）</strong><br><strong>第一步</strong>：回到函数声明的位置<br><strong>第二步</strong>：用实参给形参赋值（传参）<br><strong>第三步</strong>：执行函数体<br><strong>第四步</strong>：执行完函数体，就确定并返回返回值<br><strong>第五步</strong>：回到函数调用的位置，接着执行后面的其他代码<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 求两个数的和</span><br><span class="line">def sum_two(num1, num2):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    求两个数的和（函数功能进行说明）</span><br><span class="line">    :param num1:（第一个数进行说明）</span><br><span class="line">    :param num2:（第二个数进行说明）</span><br><span class="line">    :return:无（返回值进行说明）</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    print(num1 + num2)</span><br><span class="line"># 调用函数</span><br><span class="line">sum_two(10, 20)  # 30</span><br></pre></td></tr></table></figure></p><p>猜数字游戏<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"># 练习3：声明一个函数，函数功能是猜数字游戏：随机产生一个0-100的数字，用户不断输入数字，</span><br><span class="line">#直到输入的数字和产生的数字一样游戏就结束,当猜错了，可以给出&apos;大了/小了&apos;这样的提示</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 导入random模块</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">randint(m,n) - 产生一个m到n的随机整数</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># num = random.randint(0, 100)</span><br><span class="line"># print(num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def guess_num():</span><br><span class="line">    import random</span><br><span class="line">    num = random.randint(0, 100)</span><br><span class="line">    count = 0</span><br><span class="line">    while True:</span><br><span class="line">        n = int(input(&apos;请输入数字：&apos;))</span><br><span class="line">        count += 1</span><br><span class="line">        if n &gt; num:</span><br><span class="line">            print(&apos;真遗憾，大了，在小一点&apos;)</span><br><span class="line">            continue</span><br><span class="line">        elif n &lt; num:</span><br><span class="line">            print(&apos;真遗憾，小了，在大一点&apos;)</span><br><span class="line">            continue</span><br><span class="line">        else:</span><br><span class="line">            print(&apos;猜对了!!!&apos;)</span><br><span class="line">            if count &gt; 10:</span><br><span class="line">                print(&apos;正常人&apos;)</span><br><span class="line">            # 结束游戏</span><br><span class="line">            break</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">guess_num()</span><br></pre></td></tr></table></figure></p><h1 id="二、参数类型"><a href="#二、参数类型" class="headerlink" title="二、参数类型"></a>二、参数类型</h1><p><strong>1.位置参数和关键字参数（根据实参的传递方式分类）</strong><br><strong>a.位置参数</strong>：实参的位置和形参保持一致，按形参先后顺序一一赋值<br><strong>b.关键字参数</strong>：调用函数的时候以 形参=实参的方式来传参，<br>这个时候顺序无所谓<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def func1(a, b, c):</span><br><span class="line">    print(a, b, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 通过位置参数给形参赋值</span><br><span class="line">func1(10, 20, 49)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 通过关键字参数给形参赋值</span><br><span class="line">func1(a=10, b=20, c=49)</span><br><span class="line"></span><br><span class="line"># 通过位置参数和关键字参数结合传参</span><br><span class="line"># （关键字参数必须在位置参数后面),不然会报错</span><br><span class="line">func1(10, 20, c=20)</span><br></pre></td></tr></table></figure></p><p><strong>2.参数默认值</strong><br><strong>说明</strong>：<br>声明函数时，可以给参数赋默认值。<br>如果一个形参有默认值，调用函数时，可以不用传参</p><p><strong>注意</strong>：<br>a.如果有的形参有默认值，有的没有，那么有默认值的形参要放在没有默认值的形参的后面<br>b.调用函数要保证每个参数都有值！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 参数c有默认值，调用函数c可以不用传参</span><br><span class="line">def func2(a, b, c=0):</span><br><span class="line">    print(a, b, c)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func2(10, 20, 400)  # 10 20 400</span><br><span class="line">func2(100, 32)  # 100 32 0</span><br></pre></td></tr></table></figure></p><p><strong>3.参数的类型</strong><br><strong>说明</strong>：类型说明只有提示功能，没有约束功能</p><p>######a.给参数设置默认值，默认值的类型就是参数值的类型</p><p>######b.形参后面加：类型名，来说明参数类型。这种方式调用必须传参</p><p>######c.函数声明的时候在（）后面加 —&gt;类型名，来说明函数返回值的类型<br><strong>类型说明的好处</strong>：<br>a.对实参的类型进行说明指导<br>b.实现函数功能的时候，有类型相关的语法提示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def list_item(list1: list, index=0)-&gt;int:  # int对返回值类型进行说明</span><br><span class="line">    print(list1[index])</span><br><span class="line">    return 10</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list_item([2, 23])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def func4(a: list, b: str):</span><br><span class="line">    a.append(b)</span><br></pre></td></tr></table></figure></p><p><strong>4.不定长参数</strong><br><strong>说明</strong>：函数参数个数不确定<br>a.声明函数的时候，在参数名前加 *，可以同时用来获取多个实参的值<br><strong>实质</strong>：将带*号的参数变成<strong>元祖</strong>，将多个实参的值作为元祖的元素<br>b.在参数名前加两个*，必须是关键字传参，会将这个参数变成<strong>一个字典</strong>来获取关键字参数的值，其他关键字作为KEY，实参作为value</p><p><strong>注意</strong>：a.如果函数中既有不定长参数，又有普通参数，那么不定长参数必须放在普通参数后面<br>b.两颗*的要放在一颗*的后边<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 写一个函数，计算多个数的和（位置参数，关键字参数皆可）</span><br><span class="line">def sum_num(*args, **kwargs):</span><br><span class="line">    sum1 = 0</span><br><span class="line">    # 遍历元祖</span><br><span class="line">    for num in args:</span><br><span class="line">        sum1 += num</span><br><span class="line">    # 遍历字典</span><br><span class="line">    for num1 in kwargs:</span><br><span class="line">        sum1 += kwargs[num1]</span><br><span class="line">    print(sum1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sum_num(11, 23, a=111)</span><br></pre></td></tr></table></figure></p><h1 id="三、函数返回值"><a href="#三、函数返回值" class="headerlink" title="三、函数返回值"></a>三、函数返回值</h1><p><strong>1.什么是返回值</strong>：函数里面的数据传递到函数外面<br><strong>定义</strong>：函数调用表达式的值，就是return关键字后面的表达式的值<br><strong>注意</strong>：每个函数都有返回值，默认是None<br><strong>函数调用表达式</strong>：调用函数的语句<br><strong>return</strong>：关键字，只能写在函数体中<br><strong>功能</strong>：<br>1.确定函数的返回值<br>2.结束函数<br><strong>注意</strong>：执行函数时，如<strong>遇到return</strong>，函数直接结束，并且将<strong>后面的值作为函数的返回值</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def func1():</span><br><span class="line">    print(&apos;****&apos;)</span><br><span class="line">    return 100</span><br><span class="line">    print(&apos;=====&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result = func1()  # func1()就是函数调用表达式</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><p><strong>2.多个返回值</strong><br>return 值1， 值2， 值3… &lt;==&gt; （值1， 值2， 值3…)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">def func3():</span><br><span class="line">    return 1, 2, 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(func3())   # (1, 2, 3)</span><br><span class="line"></span><br><span class="line">x, y, z = func3()</span><br><span class="line">print(x, y, z)  # 1 2 3</span><br></pre></td></tr></table></figure><p><strong>3.怎么确定函数是否需要返回值</strong><br>函数执行完后是否会产生<strong>新的数据</strong>，如果会产生新的数据，就需要返回值，并用return返回<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 声明一个函数，打印指定的n!</span><br><span class="line">def factorial_1(n):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    求指定数的阶乘</span><br><span class="line">    :param n:</span><br><span class="line">    :return:</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    num = 1</span><br><span class="line">    for x in range(1, n+1):</span><br><span class="line">        num *= x</span><br><span class="line">    return num</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">factorial_1(3)  # 6</span><br><span class="line"># 一个函数可以用多次</span><br><span class="line">factorial_1(4)  # 24</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pyhton中的函数基础知识&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>元祖、字典和集合</title>
    <link href="http://yoursite.com/2019/02/24/python%E5%85%83%E7%A5%96%E3%80%81%E5%AD%97%E5%85%B8%E5%92%8C%E9%9B%86%E5%90%88/"/>
    <id>http://yoursite.com/2019/02/24/python元祖、字典和集合/</id>
    <published>2019-02-24T08:43:40.533Z</published>
    <updated>2019-02-24T09:12:03.053Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了python中的三种数据结构元祖、字典和集合<br><a id="more"></a></p><p>#一、元祖（tuple）</p><p><strong>1.什么是元祖（tuple)</strong><br><strong>定义</strong>：python提供的容器型数据类型，（元祖就是不可变的列表）<br><strong>不可变</strong>：不支持增删改<br><strong>有序</strong>：可以通过下标来获取元素</p><p><strong>2.字面量和元素</strong><br>（元素1，元素2，元素3….）<br><strong>说明</strong>：<br><strong>元素</strong>：任何类型的数据，类型可互不相同，元素可重复<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">point = (100, 30)</span><br><span class="line">print(point, type(point))  # (100, 30) &lt;class &apos;tuple&apos;&gt;</span><br></pre></td></tr></table></figure></p><h6 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h6><p><strong><em>情况1.空元祖</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = ()</span><br><span class="line">print(type(tuple1))  # &lt;class &apos;tuple&apos;&gt;</span><br></pre></td></tr></table></figure></p><p><strong><em>情况2.只有一个元素的元祖,在元素后面加逗号</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple2 = (100,)</span><br><span class="line">print(tuple2, type(tuple2))   # (100,) &lt;class &apos;tuple&apos;&gt;</span><br></pre></td></tr></table></figure></p><p><strong><em>情况3.直接将多个元素用逗号隔开，不加括号表示也是一个元祖</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tuple3 = 1, 2, 3</span><br><span class="line">print(tuple3, type(tuple3))   # (1, 2, 3) &lt;class &apos;tuple&apos;&gt;</span><br></pre></td></tr></table></figure></p><p><strong>3.元祖获取元素和列表一样</strong><br><strong>输出</strong>：一个元祖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">tuple4 = (&apos;成都&apos;, &apos;达州&apos;, &apos;绵阳&apos;, &apos;南充&apos;, &apos;广元&apos;)</span><br><span class="line"># 获取单个元素</span><br><span class="line">print(tuple4[1], tuple4[-1])  # 达州 广元</span><br><span class="line"># 获取部分元素</span><br><span class="line">print(tuple4[0:3])  # (&apos;成都&apos;, &apos;达州&apos;, &apos;绵阳&apos;)</span><br><span class="line">print(tuple4[::-1])  # (&apos;广元&apos;, &apos;南充&apos;, &apos;绵阳&apos;, &apos;达州&apos;, &apos;成都&apos;)</span><br><span class="line"></span><br><span class="line"># 遍历 -&gt; 拿到的是元素本身</span><br><span class="line">for city in tuple4:</span><br><span class="line">    print(city)</span><br></pre></td></tr></table></figure></p><p><strong>补充：特殊的获取方式</strong><br><strong>a.变量1， 变量2… = 元祖</strong><br><strong>说明</strong>：用前面的变量依次获取元素的值<br><strong>要求</strong>：变量个数和元祖元素个数一致,不然程序会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">point = (100, 200)</span><br><span class="line">x, y = point   # x, y = (100, 200)  &lt;==&gt; x, y = 100, 200</span><br><span class="line">print(x, y)  # 100 200</span><br></pre></td></tr></table></figure></p><p><strong>b.变量1， *变量2 = 元祖</strong><br><strong>说明</strong>：通过带<em>的变量获取元祖中剩余的部分<br><strong>输出</strong>：</em>号是一个列表<br><strong>注意</strong>：带*号的变量只能是一个，其他变量可以有多个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name, *scores = (&apos;小张&apos;, 100, 200, 30, 3)</span><br><span class="line">print(name, scores)  # 小张 [100, 200, 30, 3]</span><br><span class="line"></span><br><span class="line">name, num, *scores = (&apos;小张&apos;, 100, 200, 30, 3)</span><br><span class="line">print(name, num, scores)  # 小张 100 [200, 30, 3]</span><br><span class="line"></span><br><span class="line">*info, num = (&apos;笑绽放&apos;, 100, 11, 333, 23)</span><br><span class="line">print(info, num)  # [&apos;笑绽放&apos;, 100, 11, 333] 23</span><br></pre></td></tr></table></figure></p><p>####说明：*的用法<br><strong>作用</strong>：取元祖和列表中的数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nums = (1, 2, 3)</span><br><span class="line">print(*nums[::-1])  # 3 2 1</span><br></pre></td></tr></table></figure></p><p><strong>4.相关运算</strong><br>+，*<br>in/not in<br>len(),max(),min(),sum(),tuple()</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tuple1 = (1, 2, 4)</span><br><span class="line">tuple2 = (&apos;sd&apos;, &apos;dffd&apos;)</span><br><span class="line">print(tuple2 + tuple1)  # (&apos;sd&apos;, &apos;dffd&apos;, 1, 2, 4)</span><br><span class="line">print(tuple2*2)  # (&apos;sd&apos;, &apos;dffd&apos;, &apos;sd&apos;, &apos;dffd&apos;)</span><br><span class="line"></span><br><span class="line">print(&apos;dff&apos; in tuple2)  # False</span><br></pre></td></tr></table></figure><p><strong>5.排序</strong><br>sorted(序列)<br><strong>作用</strong>：对序列中的元素排序（升序）-从小到大<br><strong>输出</strong>：新的列表(不管是什么序列，拍完后都是列表）</p><p><strong>注意</strong>：<br>列表.sort（） 修改原列表中的元素的顺序<br>sorted - 产生一个新的列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nums = (1, 34, 34, 5656)</span><br><span class="line">print(sorted(nums))  # [1, 34, 34, 5656]</span><br><span class="line">print(sorted(&apos;dfdfd&apos;))  # [&apos;d&apos;, &apos;d&apos;, &apos;d&apos;, &apos;f&apos;, &apos;f&apos;]</span><br></pre></td></tr></table></figure></p><p><strong>join函数</strong><br><strong>字符串特殊</strong><br><strong>字符串.join(序列）</strong><br><strong>作用</strong>：将序列中的元素取出，用指定的字符串连接在一起<br><strong>要求</strong>：序列中的元素必须是字符串<br><strong>输入*：序列</strong>输出**：字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">new_str = &apos;&apos;.join([&apos;d&apos;, &apos;s&apos;, &apos;t&apos;])</span><br><span class="line">print(new_str, type(new_str))   # dst &lt;class &apos;str&apos;&gt;</span><br><span class="line"></span><br><span class="line">list1 = [1, 33, 334, 2]</span><br><span class="line">list1.sort()   # None  sort不会产生新的列表</span><br><span class="line">print(list1)  # [1, 2, 33, 334]</span><br></pre></td></tr></table></figure></p><h1 id="二、字典-dict）"><a href="#二、字典-dict）" class="headerlink" title="二、字典(dict）"></a>二、字典(dict）</h1><p>####1.什么是字典？<br><strong>定义</strong>：python提供的容器型数据类型（序列）<br><strong>可变</strong>：支持增删改<br><strong>无序</strong>：不支持下标操作，不能获取元素</p><p>####2.字面量和元素<br><strong>定义</strong>:用大括号括起来，里面有多个键值对，每个键值对用逗号隔开，<br>{key1:value, key2:value2, key3:value3…}<br>键值对就是字典的元素<br><strong>键值对</strong>：键（key)：值(value)<br><strong>键</strong>：不可变的，唯一，不可重复，一般将字符串作为key<br><strong>值</strong>：可以是任意类型的数据<br><strong>注意</strong>：<br>1.键值对必须成对出现，而且脱离字典单独出现没有意义<br>2.字典存数据，实际是通过值来存储的(key是值对应的标签和获取值的方式)<br><strong>补充</strong>：列表和字典不可以作为key值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 列表和字典不可作为key</span><br><span class="line">dict1 = &#123;&#125;  # 空字典</span><br><span class="line">dict1 = &#123;&apos;a&apos;: 134, 10: 11, (1, 2): &apos;abc&apos;&#125;</span><br><span class="line">print(dict1)</span><br><span class="line"></span><br><span class="line"># dict2 = &#123;[1, 2]: 120&#125;</span><br><span class="line"># TypeError: unhashable type: &apos;list&apos;</span><br><span class="line"># 类型错误：列表不能希哈化</span><br></pre></td></tr></table></figure></p><p>####3.使用场景<br><strong>什么时候用字典：</strong><br>多个<strong>没有相同意义</strong>的数据（需要区分），可以通过key来区分多个数据的不同，<br>例如：保存一个人的不同信息，一辆车的不同信息<br><strong>什么时候用列表：</strong><br>存储的数据是具有<strong>相同意义</strong>的数据（不需要区分）<br>例如：储存一个班的学生信息，保存所有的价格</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 练习：申明一个变量，保存一个班的学生信息，每个学生需要保存姓名，电话，年龄</span><br><span class="line">all_student = []</span><br><span class="line">student1 = &#123;&apos;name&apos;: &apos;小黄&apos;, &apos;tel&apos;: 111111, &apos;age&apos;: 18&#125;  # 保存学生不同的信息</span><br><span class="line">student2 = &#123;&apos;name&apos;: &apos;小才&apos;, &apos;tel&apos;: 111111, &apos;age&apos;: 18&#125;</span><br><span class="line">student3 = &#123;&apos;name&apos;: &apos;小四&apos;, &apos;tel&apos;: 111111, &apos;age&apos;: 18&#125;</span><br><span class="line">student4 = &#123;&apos;name&apos;: &apos;小五&apos;, &apos;tel&apos;: 111111, &apos;age&apos;: 18&#125;</span><br><span class="line">all_student.append(student1)</span><br><span class="line">all_student.append(student2)</span><br><span class="line">all_student.append(student3)</span><br><span class="line">all_student.append(student4)   # 保存学生到列表中</span><br><span class="line">print(all_student[::-1])</span><br></pre></td></tr></table></figure><p>####4.字典元素的增删改查</p><p><strong>a.查（获取值）</strong><br><strong>注意</strong>：字典中的键值对单独拿出来没有意义</p><p><strong>1.字典[key]</strong><br><strong>目的</strong>：获取字典中key的值<br><strong>注意</strong>：当key值不存在时，会报错 keyError<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">car = &#123;&apos;color&apos;: &apos;黄色&apos;, &apos;type&apos;: &apos;跑车&apos;, &apos;price&apos;: 500000&#125;</span><br><span class="line">print(car[&apos;color&apos;])  # 黄色</span><br></pre></td></tr></table></figure></p><p><strong>2.字典.get(key)</strong><br><strong>目的</strong>：获取字典中key的<strong>值</strong><br><strong>注意</strong>：当key不存在时，不会报错，并且取到一个默认值None<br><strong>应用</strong>：可以判断key是否存在<br><strong>字典.get(key, 值1）</strong><br><strong>目的</strong>：获取字典中key的值<br><strong>注意</strong>：当key不存在时，不会报错，并且取到指定的值1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(car.get(&apos;type&apos;))  # 跑车</span><br><span class="line">print(car.get(&apos;speed&apos;))   # None</span><br><span class="line"></span><br><span class="line">print(car.get(&apos;color&apos;, &apos;红色&apos;))  # 黄色</span><br><span class="line">print(car.get(&apos;speed&apos;, 0))  # 0</span><br></pre></td></tr></table></figure></p><p><strong>如何选择：</strong><br>确定时，用1,不确定时，用2或者3</p><p><strong>3.遍历</strong><br><strong>注意</strong>：直接通过for - in 遍历字典取到的是<strong>key</strong>，然后通过key来取值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dict1 = &#123;&apos;a&apos;: 100, &apos;b&apos;: 200, &apos;c&apos;: 300&#125;</span><br><span class="line"># 遍历字典取到的是key（推荐使用）只需要遍历一次</span><br><span class="line">for key in dict1:</span><br><span class="line">    print(key)</span><br><span class="line">    print(dict1[key])</span><br><span class="line"></span><br><span class="line"># 遍历字典的values()，获取所有的值</span><br><span class="line">for value in dict1.values():</span><br><span class="line">    print(value)</span><br><span class="line"></span><br><span class="line"># 遍历字典的items（），直接获取key和value（不建议使用）</span><br><span class="line">for key, value in dict1.items():</span><br><span class="line">    print(key, value)</span><br></pre></td></tr></table></figure></p><p><strong>b.增（增加键值对）、改</strong><br><strong>a.字典[key] = 值</strong><br><strong>目的</strong>：<br><strong>key不存在</strong>:添加键值对<br><strong>key存在</strong>：修改key的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">movie = &#123;&apos;name&apos;:&apos;xiaohua&apos;, &apos;type&apos;: &apos;卡通&apos;, &apos;time&apos;: 120&#125;</span><br><span class="line"></span><br><span class="line"># 添加</span><br><span class="line">movie[&apos;score&apos;] = 7.9</span><br><span class="line">print(movie)  # &#123;&apos;name&apos;: &apos;xiaohua&apos;, &apos;type&apos;: &apos;卡通&apos;, &apos;time&apos;: 120, &apos;score&apos;: 7.9&#125;</span><br><span class="line"></span><br><span class="line"># 修改</span><br><span class="line">movie[&apos;type&apos;] = &apos;相当搞笑&apos;</span><br><span class="line">print(movie)  # &#123;&apos;name&apos;: &apos;xiaohua&apos;, &apos;type&apos;: &apos;相当搞笑&apos;, &apos;time&apos;: 120, &apos;score&apos;: 7.9&#125;</span><br></pre></td></tr></table></figure><p><strong>c.删（删除键值对）</strong><br><strong>1.del 字典[key]</strong><br><strong>目的</strong>：删除指定的key对应的键值对</p><p><strong>2.字典.pop(key)</strong><br><strong>目的</strong>：取出字典中key对应的值<br><strong>注意</strong>:可以赋值给变量拿来使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">movie = &#123;&apos;name&apos;: &apos;xiaohua&apos;, &apos;type&apos;: &apos;相当搞笑&apos;, &apos;time&apos;: 120, &apos;score&apos;: 7.9&#125;</span><br><span class="line">del movie[&apos;time&apos;]</span><br><span class="line">print(movie)  # &#123;&apos;name&apos;: &apos;xiaohua&apos;, &apos;type&apos;: &apos;相当搞笑&apos;, &apos;score&apos;: 7.9&#125;</span><br><span class="line"></span><br><span class="line">name = movie.pop(&apos;name&apos;)  # xiaohua</span><br><span class="line">print(movie, name)  #  &#123;&apos;type&apos;: &apos;相当搞笑&apos;, &apos;score&apos;: 7.9&#125; xiaohua</span><br></pre></td></tr></table></figure></p><p>####应用实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 练习：用一个字典保存一个学生的信息:&#123;&apos;name&apos;: &apos;张三&apos;, &apos;age&apos;: 30, &apos;score&apos;: 80&#125;</span><br><span class="line"></span><br><span class="line">student = &#123;&apos;name&apos;: &apos;张三&apos;, &apos;age&apos;: 30, &apos;score&apos;: 80&#125;</span><br><span class="line">message = input(&apos;请输入要修改的信息：&apos;)</span><br><span class="line">if message == &apos;name&apos;:</span><br><span class="line">    new_name = input(&apos;请输入新的名字：&apos;)</span><br><span class="line">    student[&apos;name&apos;] = new_name</span><br><span class="line">    print(student)</span><br><span class="line">elif message == &apos;age&apos;:</span><br><span class="line">    new_age = input(&apos;请输入新的年龄：&apos;)</span><br><span class="line">    student[&apos;age&apos;] = new_age</span><br><span class="line">    print(student)</span><br><span class="line">elif message == &apos;score&apos;:</span><br><span class="line">    new_score = input(&apos;请输入新的分数：&apos;)</span><br><span class="line">    student[&apos;score&apos;] = new_score</span><br><span class="line">    print(student)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;没有该信息&apos;)</span><br></pre></td></tr></table></figure></p><p>###5.相关运算</p><p><strong>1.比较运算</strong><br>== !=<br><strong>注意</strong>：<br><strong>判断两个字典是否相等</strong>：只看键值对是否一样，不管顺序<br>    字典是不支持&lt;和&gt;符号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&#123;&apos;a&apos;: 11, &apos;b&apos;: 22&#125; == &#123;&apos;b&apos;: 22, &apos;a&apos;: 11&#125;)   # True</span><br></pre></td></tr></table></figure></p><p><strong>2. in / not in</strong><br>key <strong>in</strong> 字典<br><strong>目的</strong>：判断字典中指定的key是否<strong>存在</strong><br>key <strong>not in</strong> 字典<br><strong>目的</strong>：判断字典中指定的key是否<strong>不存在</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict2 = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">print(&apos;a&apos; in dict2)   # True</span><br><span class="line">print(1 in dict2)</span><br></pre></td></tr></table></figure></p><p><strong>3.len(),max(),min()</strong></p><p><strong>dict(数据)</strong><br><strong>要求</strong>：<br>1.序列<br>2.序列中的元素都是有两个元素的子序列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 获取字典中键值对的个数</span><br><span class="line">dict2 = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">print(len(dict2))  # 3</span><br><span class="line"></span><br><span class="line"># 获取字典中key的最大值/最小值</span><br><span class="line">dict2 = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">print(max(dict2), min(dict2))    # c a</span><br><span class="line"></span><br><span class="line"># 将列表转化为字典</span><br><span class="line">print(dict([(1, 3), (&apos;a&apos;, &apos;b&apos;)]))   # &#123;1: 3, &apos;a&apos;: &apos;b&apos;&#125;</span><br><span class="line"></span><br><span class="line"># 字典转列表/元祖/集合都是将字典中的key取出来作为列表/元祖/集合的元素</span><br><span class="line">dict2 = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">print(list(dict2))  # [&apos;a&apos;, &apos;b&apos;, &apos;c&apos;]</span><br></pre></td></tr></table></figure></p><p>####6.相关方法</p><h5 id="1-字典-clear（）"><a href="#1-字典-clear（）" class="headerlink" title="1.字典.clear（）"></a>1.字典.clear（）</h5><p><strong>目的</strong>:清空字典(建议使用）<br><strong>输入</strong>：字典<br><strong>输出</strong>：空字典<br><strong>建议</strong>：清空容器推荐clear操作，而不是重新赋一个空的容器<br>（会先删，在重新开辟空间）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dict2 = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">dict2.clear()</span><br><span class="line">print(dict2, id(dict2))  # &#123;&#125; 5263296</span><br><span class="line"></span><br><span class="line"># 只有本身不存在的时候，可以使用</span><br><span class="line">dict3 = &#123;&#125;</span><br><span class="line">print(id(dict3))  # 8552240</span><br></pre></td></tr></table></figure></p><h5 id="2-字典-copy（）"><a href="#2-字典-copy（）" class="headerlink" title="2.字典.copy（）"></a>2.字典.copy（）</h5><p><strong>目的</strong>：复制字典中的元素<br><strong>输入</strong>：字典<br><strong>输出</strong>：复制后的字典<br><strong>注意</strong>：拷贝赋值，会产生<strong>新的地址</strong>，赋值后相互不影响<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">dict2 = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">dict3 = dict2.copy()</span><br><span class="line">print(dict3)  # &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">dict2[&apos;a&apos;] = 100</span><br><span class="line">print(dict2)  # &#123;&apos;a&apos;: 100, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">print(dict3)  # &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line"></span><br><span class="line"># 赋值就是赋变量对应的地址</span><br><span class="line"># 直接赋值，修改其中一个的元素，会影响另外一个</span><br><span class="line"></span><br><span class="line">dict2 = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">dict3 = dict2</span><br><span class="line">print(dict3)  # &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">dict2[&apos;a&apos;] = 100</span><br><span class="line">print(dict2)  # &#123;&apos;a&apos;: 100, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">print(dict3)  # &#123;&apos;a&apos;: 100, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br></pre></td></tr></table></figure></p><h5 id="3-dict-fromkeys-序列，值）"><a href="#3-dict-fromkeys-序列，值）" class="headerlink" title="3.dict.fromkeys(序列，值）"></a>3.dict.fromkeys(序列，值）</h5><p><strong>目的</strong>： 以序列中的所有元素作为key,指定的值作为value创建一个新的字典<br><strong>即给多个key赋一样的值</strong><br><strong>输出</strong>：字典<br><strong>输入</strong>：值只能是一个<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_dict = dict.fromkeys(&apos;abc&apos;, 100)</span><br><span class="line">print(new_dict)  # &#123;&apos;a&apos;: 100, &apos;b&apos;: 100, &apos;c&apos;: 100&#125;</span><br></pre></td></tr></table></figure></p><h5 id="4"><a href="#4" class="headerlink" title="4."></a>4.</h5><p>######4.1 字典.keys()<br><strong>目的</strong>：将字典所有的key取出来产生一个新的序列</p><p>######4.2 字典.values()<br><strong>目的</strong>： 将字典所有的value取出来产生一个新的序列</p><p>######4.3 字典.items()<br><strong>目的</strong>：将字典所有的key和value作为<strong>一个元祖</strong>取出产生一个新的序列<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict2 = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">print(dict2.keys())  # dict_keys([&apos;a&apos;, &apos;b&apos;, &apos;c&apos;])</span><br><span class="line">print(dict2.values())  # dict_values([1, 2, 3])</span><br><span class="line">print( dict2.items())  # dict_items([(&apos;a&apos;, 1), (&apos;b&apos;, 2), (&apos;c&apos;, 3)])</span><br></pre></td></tr></table></figure></p><p>#####5.字典.setdefault(key, value = None)</p><p>######5.1 字典.setdefault(key)<br><strong>目的</strong>：当key值不存在时，添加键值对key:None</p><p>######5.2 字典.setdefault(key, value = None)<br><strong>目的</strong>：当key值不存在时，添加键值对key:value<br><strong>注意</strong>：这个操作当key存在的时候，不会修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dict2 = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">dict2.setdefault(&apos;name&apos;, &apos;小胡&apos;)</span><br><span class="line">dict2.setdefault(&apos;sex&apos;)</span><br><span class="line">print(dict2)   # &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3, &apos;name&apos;: &apos;小胡&apos;, &apos;sex&apos;: None&#125;</span><br></pre></td></tr></table></figure></p><p>#####6.字典1.update(字典2)<br><strong>目的</strong>：使用字典2中的键值对去<strong>更新</strong>字典1，<br><strong>注意</strong>：如果字典2中的key,字典1中本来就存在就是修改，不存在就是添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict2 = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">dict2.update(&#123;&apos;a&apos;: 22222, &apos;age&apos;: 18&#125;)</span><br><span class="line">print(dict2)  # &#123;&apos;a&apos;: 22222, &apos;b&apos;: 2, &apos;c&apos;: 3, &apos;age&apos;: 18&#125;</span><br></pre></td></tr></table></figure></p><h1 id="三、集合（set）"><a href="#三、集合（set）" class="headerlink" title="三、集合（set）"></a>三、集合（set）</h1><p><strong>1.什么是集合？</strong><br><strong>可变</strong>：<br><strong>无序</strong>：<br><strong>元素是唯一并且不可变的</strong></p><p><strong>2.字面量</strong><br>{元素1，元素2，元素3…}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;1, 32, &apos;abc&apos;&#125;</span><br><span class="line">print(set1)  # &#123;32, 1, &apos;abc&apos;&#125;</span><br><span class="line"></span><br><span class="line"># 表示空集合</span><br><span class="line">set2 = set()</span><br><span class="line">print(type(set2))   # &lt;class &apos;set&apos;&gt;</span><br><span class="line"></span><br><span class="line"># 自带去重功能</span><br><span class="line">set3 = &#123;1, 2, 4, 3, 2, 1, 4&#125;</span><br><span class="line">print(set3)   # &#123;1, 2, 3, 4&#125;</span><br><span class="line"></span><br><span class="line"># 使列表元素唯一</span><br><span class="line">list1 = [1, 2, 3, 4, 2, 1]</span><br><span class="line">list1 = list(set(list1))</span><br><span class="line">print(list1)  # &#123;1, 2, 3, 4&#125;</span><br></pre></td></tr></table></figure></p><p>#####3.增删改查</p><p>######a.查</p><p>######集合不能单独的获取单个元素，只能是一个一个的遍历<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;1, 3, 33&#125;</span><br><span class="line">for item in set1:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure></p><p>######b.增<br><strong>1.集合.add（元素）</strong><br><strong>目的</strong>：在集合中添加指定的元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;1,3,33&#125;</span><br><span class="line">set1.add(&apos;哈哈&apos;）</span><br><span class="line">print（set1）  # &#123;1, 3, &apos;哈哈&apos;, 33&#125;</span><br></pre></td></tr></table></figure></p><p><strong>2.集合.update(序列）</strong><br><strong>目的</strong>： 将序列中的元素添加到集合中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;1, 3, &apos;哈哈&apos;, 33&#125;</span><br><span class="line">set1.update(&apos;abc&apos;) </span><br><span class="line">print(set1)    # &#123;1, &apos;a&apos;, 3, 33, &apos;b&apos;, &apos;c&apos;, &apos;哈哈&apos;&#125;</span><br><span class="line"></span><br><span class="line">set1.update(&#123;&apos;ddd&apos;: 22323&#125;)</span><br><span class="line">print(set1)   # &#123;1, &apos;a&apos;, 3, 33, &apos;b&apos;, &apos;c&apos;, &apos;ddd&apos;, &apos;哈哈&apos;&#125;</span><br></pre></td></tr></table></figure></p><p>######c. 删<br><strong>集合.remove(元素）</strong><br><strong>目的</strong>：删除集合中指定的元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;1, 3, 33&#125;</span><br><span class="line">set1.remove(33)</span><br><span class="line">print(set1)</span><br></pre></td></tr></table></figure></p><p>#####4.数学集合运算</p><p>######a.交集（&amp;）<br><strong>目的</strong>：获取两个集合<strong>公共</strong>的部分，产生新的集合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">set2 = &#123;4, 5, 6, 7, 8&#125;</span><br><span class="line">print(set1 &amp; set2)  # &#123;4, 5, 6&#125;</span><br></pre></td></tr></table></figure></p><p>######b.并集(|)<br><strong>目的</strong>：将两个集合中的元素合并在一起（去重后）产生一个新的集合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">set2 = &#123;4, 5, 6, 7, 8&#125;</span><br><span class="line">print(set1 | set2)  # &#123;1, 2, 3, 4, 5, 6, 7, 8&#125;</span><br></pre></td></tr></table></figure></p><p>######c.补集（-）<br><strong>目的</strong>：集合1 - 集合2 -&gt; 去掉集合1中包含集合2的部分，剩下的产生一个新的集合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">set2 = &#123;4, 5, 6, 7, 8&#125;</span><br><span class="line">print(set1 - set2)  # &#123;1, 2, 3&#125;</span><br></pre></td></tr></table></figure></p><p>######d.差集（^)<br><strong>目的</strong>：将两个集合合并在一起，<strong>去掉公共部分</strong>，剩下的部分产生一个新的集合<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">set2 = &#123;4, 5, 6, 7, 8&#125;</span><br><span class="line">print(set1 ^ set2)  # &#123;1, 2, 3, 7, 8&#125;</span><br></pre></td></tr></table></figure></p><p>######e.子集的判断：<br><strong>集合1 &gt; 集合2</strong><br><strong>目的</strong>： 判断集合1中是否包含集合2<br><strong>集合1 &lt; 集合2</strong><br><strong>目的</strong>：判断集合2中是否包含集合1<br><strong>输出</strong>：布尔值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">set1 = &#123;1, 2, 3, 4, 5, 6&#125;</span><br><span class="line">set2 = &#123;4, 5, 6, 7, 8&#125;</span><br><span class="line"></span><br><span class="line">print(&#123;1, 2, 3&#125; &gt; &#123;1, 2&#125;)  # True</span><br><span class="line">print(&#123;1, 2, 3&#125; &gt; &#123;1, 2, 0&#125;)  # False</span><br><span class="line"></span><br><span class="line">print(&#123;1, 2, 3&#125; &gt; &#123;1, 2, 3&#125;)  # False</span><br><span class="line">print(&#123;1, 2, 3&#125; &gt;= &#123;1, 2, 3&#125;)  # True</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了python中的三种数据结构元祖、字典和集合&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>进制与位运算</title>
    <link href="http://yoursite.com/2019/02/24/python%E8%BF%9B%E5%88%B6%E4%B8%8E%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://yoursite.com/2019/02/24/python进制与位运算/</id>
    <published>2019-02-24T08:41:55.469Z</published>
    <updated>2019-02-24T09:13:07.148Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了计算机底层的进制和位运算等知识<br><a id="more"></a></p><h1 id="一、进制"><a href="#一、进制" class="headerlink" title="一、进制"></a>一、进制</h1><h6 id="在计算机编程中，整数可以通过十进制、二进制、八进制、十六进制来表示"><a href="#在计算机编程中，整数可以通过十进制、二进制、八进制、十六进制来表示" class="headerlink" title="在计算机编程中，整数可以通过十进制、二进制、八进制、十六进制来表示"></a>在计算机编程中，整数可以通过十进制、二进制、八进制、十六进制来表示</h6><p><strong>a.十进制</strong><br><strong>基数</strong>：0,1,2,3,4,5,6,7,8,9<br><strong>进位</strong>：逢十进一<br><strong>位权</strong>：10的n次方，每位数的代表的含义</p><p><strong>b.二进制</strong><br><strong>基数</strong>：0,1<br><strong>进位</strong>：逢二进一<br><strong>位权</strong>：2的n次方，每位数代表的含义</p><p><strong>c.八进制</strong><br><strong>基数</strong>：0,1,2,3,4,5,6,7<br><strong>进位</strong>：逢八进一<br><strong>位权</strong>:123(8) = 3+16+64 = 83<br>8的n次方，每位数代表的含义</p><p><strong>d.十六进制</strong><br><strong>基数</strong>：0~9，a~f（大小写均可），从小到大分别对应10,11,12,13,14,15<br><strong>位权</strong>：逢十六进一<br><strong>位权</strong>:16的n次方，每位数表示的含义</p><p>#####1. 程序中怎么表示不同进制的数<br><strong>在程序中直接写的数字都是10进制</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = 10  # 这是一个10进制数</span><br><span class="line">print(num)    # 直接打印其他进制数就会显示他的十进制</span><br></pre></td></tr></table></figure></p><p><strong>a.二进制</strong><br><strong>写法</strong>：<strong>0b/0B</strong> + 二进制数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = 0b1110  # 每位上必须是二进制数</span><br><span class="line">print(num)</span><br><span class="line">print(bin(800))  # 获取一个数对应的二进制表示方式</span><br><span class="line"># num2 = 0b23   # SyntaxError: invalid token</span><br></pre></td></tr></table></figure></p><p><strong>b.八进制</strong><br><strong>写法</strong>：<strong>0o/0O</strong> + 八进制数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">num = 0o134  # 每位上必须是八进制数</span><br><span class="line">print(num)</span><br><span class="line">print(oct(800))</span><br><span class="line"># num = 0o78   # SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure></p><p><strong>c.十六进制</strong><br><strong>写法</strong>：<strong>0x/0X</strong>+十六进制数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num = 0xaf2   # 每位上必须是十六进制数</span><br><span class="line">print(num)</span><br><span class="line">print(hex(19968))</span><br><span class="line">print(hex(255))</span><br><span class="line"># num = 0xd23h  # SyntaxError: invalid syntax</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：<br><strong>输入</strong>:一个数字（可以是任何进制数）<br><strong>输出</strong>:字符串</p><p>#二、位运算</p><p>#####计算机储存数据只能储存数字数据，而且是数字的补码，运算的是使用补码来进行运算</p><p><strong>1.原码</strong><br>符号位+真值<br><strong>说明</strong>：<br><strong>符号位</strong>：最高位是<strong>0</strong>，表示一个<strong>正数</strong>，<strong>1</strong>表示<strong>负数</strong><br><strong>真值</strong>：<strong>去掉</strong>正负符号，数字对应的<strong>二级制值</strong><br><strong>2.反码</strong><br>正数：就是原码（本身）<br><strong>负数：符号位不变，其余的位数取反（0变1,1变0）</strong><br>即对负数才有此要求</p><p><strong>3.补码</strong><br>正数：还是原码（本身）<br><strong>负数：在反码的基础上+1</strong><br>反码的存在是为了求补码</p><p><strong>4.为什么计算机要存补码？</strong><br><strong>原因</strong>：计算机里只有加法器，没有减法器</p><p><strong>5.位运算有哪些？</strong><br>&amp;（按位与），|（按位或），^（按位异或），~（按位取反），&lt;&lt;（左移），&gt;&gt;(右移）<br><strong>a.&amp;（按位与）</strong><br>数字1 <strong>&amp;</strong> 数字2<br> <strong>说明</strong>：每位上有0就是0，没0就是1<br><strong>特点</strong>：<br>一个数与1与，保留这个数<br>一个数与0与，置0</p><p>#####应用：判断一个数的奇偶性（如果一个数的二进制的最低位是1就是奇数，否则就是偶数）<br>num &amp; 1 == 0  –&gt;num是偶数<br>num &amp; 1 == 1  –&gt;num是奇数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(2 &amp; 1, 200 &amp; 1, -100 &amp; 1)   # 0 0 0</span><br><span class="line">print(3 &amp; 1, 5 &amp; 1, 101 &amp; 1)  # 1 1 1 </span><br><span class="line">print(3 &amp; 2)   # 0011 &amp; 0010  = 0010(补）</span><br></pre></td></tr></table></figure></p><p><strong>b.|（按位或）</strong><br>数字1 | 数字2<br><strong>说明</strong>：每位上有1就是1，没1就是0<br><strong>特点</strong>：与1或，就置1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(3 | 2)  # 3</span><br><span class="line">print(-3 | 2)  # -1</span><br></pre></td></tr></table></figure></p><p><strong>c.~（按位取反）</strong><br>单目运算符<br><strong>~数字</strong>：将数字上的每一位<strong>取反</strong><br>~ 1 = 0<br>~ 0 = 1<br><strong>应用</strong>：加密运算<br><strong>特点</strong>：取反两次就是它本身<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(~3)  # -4</span><br><span class="line">print(~-4)  # ~~3 = 3 取反两次就是它本身</span><br></pre></td></tr></table></figure></p><p><strong>d.^（按位异或）</strong><br>数字1 ^ 数字2<br><strong>说明</strong>：相同为0，不同为1<br>1 ^ 1 = 0<br>1 ^ 0 = 1<br>0 ^ 1 = 1<br>0 ^ 0 = 0<br><strong>应用</strong>：1.加密<br>2.两个数<strong>是否相等</strong>：<br><strong>相等</strong>：异或为0<br><strong>不等</strong>：异或为1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(3 ^ 2)  # 2是密码，3是明文</span><br><span class="line">print(1 ^ 2)  # 1是密文，2是密码，得到明文</span><br></pre></td></tr></table></figure></p><p><strong>e.&lt;&lt; (左移)</strong><br>数字1 &lt;&lt; n<br><strong>说明</strong>：数字1左移n位，相当于数字1 <em> 2\</em>*n<br><strong>f. &gt;&gt; (右移)</strong><br>数字1 &gt;&gt; n<br><strong>说明</strong>：数字1右移n位，相当于数字1 // 2**n<br><strong>应用</strong>：快速的进行除2的次方或者乘2的次方（底层运算，执行效率高）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(4 &lt;&lt; 1)   # 8 == 4 * 2**1</span><br><span class="line">print(-3 &lt;&lt; 2)   # -12 == -3*2**2</span><br><span class="line">print(5 &gt;&gt; 1)   # 2 == 5//2**1</span><br><span class="line">print(5 &gt;&gt; 2)   # 1 == 5//2**2</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了计算机底层的进制和位运算等知识&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>列表</title>
    <link href="http://yoursite.com/2019/02/24/python%E5%88%97%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/02/24/python列表/</id>
    <published>2019-02-24T08:40:18.896Z</published>
    <updated>2019-02-24T09:12:36.745Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了python中列表的基础知识和相关用法<br><a id="more"></a></p><h3 id="什么是列表（list）"><a href="#什么是列表（list）" class="headerlink" title="什么是列表（list）"></a>什么是列表（list）</h3><p><strong>定义</strong>：python提供的容器型数据类型。<br><strong>特点</strong>：可变，有序<br><strong>可变</strong>：元素的值，列表长度，元素的顺序（支持增删改）<br><strong>有序</strong>：每个元素通过下标确定位置（切片和索引）</p><p><strong>列表的字面量</strong>：通过[]括起来，里面有多个元素，每个元素用<strong>逗号</strong>隔开<br><strong>注意</strong>：元素可以是<strong>任意</strong>数据类型，元素数据类型可以<strong>互不相同</strong></p><h6 id="任何类型的数据都可以作为列表的元素"><a href="#任何类型的数据都可以作为列表的元素" class="headerlink" title="任何类型的数据都可以作为列表的元素"></a>任何类型的数据都可以作为列表的元素</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">list1 = [339, &apos;dfdk&apos;, True, [1,2,3], &#123;&apos;a&apos;:10&#125;, lambda x: 2*x]</span><br><span class="line">print(len(list1))</span><br><span class="line"></span><br><span class="line">list2 = [</span><br><span class="line">    90,</span><br><span class="line">    10.34,</span><br><span class="line">    &apos;hello&apos;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">abc = [1, 10]</span><br><span class="line">list3 = [abc, 20]</span><br><span class="line">print(list3)</span><br></pre></td></tr></table></figure><p>###一、获取列表元素（语法=字符串）<br><strong>a.获取单个元素</strong><br><strong>用法</strong>：列表[下标]  - 获取列表中指定下标的元素<br><strong>输出</strong>：列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [23, 232, 22, &apos;dfj&apos;]</span><br><span class="line">print(list1[0], list1[-1])</span><br></pre></td></tr></table></figure></p><p><strong>b.获取部分元素（切片）</strong><br><strong>用法</strong>：列表[开始下标：结束下标：步长]<br><strong>输出</strong>：列表<br><strong>注意</strong>：切片切不到，结果是空列表[]</p><p>######<strong>遍历</strong>:一个一个的取出元素<br><strong>直接遍历元素</strong>：通过for循环直接遍历列表拿到每个元素（操作元素与下标无关）<br><strong>遍历下标拿到元素</strong>：通过遍历列表元素中的下标来遍历列表元素（操作下标与下标有关）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = [23, 232, 22, &apos;dfj&apos;]</span><br><span class="line"># 直接遍历</span><br><span class="line">for item in list1:</span><br><span class="line">    print(item)</span><br><span class="line"></span><br><span class="line"># 通过下标遍历</span><br><span class="line">for index in range(len(list1)):</span><br><span class="line">    print(&apos;下标&apos;, index)</span><br><span class="line">    print(list1[index])</span><br></pre></td></tr></table></figure></p><p>“””</p><p>###二、 增删改<br><strong>1.增（添加列表元素）</strong><br><strong>a.append</strong>:<br><strong>作用</strong>：<strong>在最后</strong>添加指定的元素<br><strong>用法</strong>：列表.append(元素）<br><strong>注意</strong>：这个操作不会产生新列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">anime = [&apos;海贼王&apos;, &apos;火影忍者&apos;, &apos;一人之下&apos;, &apos;秦时明月&apos;]</span><br><span class="line">anime.append(&apos;一圈超人&apos;)</span><br><span class="line">print(anime)    # [&apos;海贼王&apos;, &apos;火影忍者&apos;, &apos;一人之下&apos;, &apos;秦时明月&apos;，&apos;一圈超人&apos;]</span><br></pre></td></tr></table></figure></p><p><strong>b.insert</strong>:<br><strong>作用</strong>：指定下标前插入元素<br><strong>用法</strong>：<br>列表.insert(下标， 元素） - 指定下标前插入元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">anime = [&apos;海贼王&apos;, &apos;火影忍者&apos;, &apos;一人之下&apos;, &apos;秦时明月&apos;]</span><br><span class="line">anime.insert(2, &apos;犬夜叉&apos;)</span><br><span class="line">print(anime)  #  [&apos;海贼王&apos;, &apos;火影忍者&apos;, &apos;犬夜叉&apos;，&apos;一人之下&apos;, &apos;秦时明月&apos;]</span><br><span class="line">anime.insert(0, &apos;进阶的巨人&apos;)</span><br><span class="line">print(anime)  # [ &apos;进阶的巨人&apos;，&apos;海贼王&apos;, &apos;火影忍者&apos;, &apos;犬夜叉&apos;，&apos;一人之下&apos;, &apos;秦时明月&apos;]</span><br></pre></td></tr></table></figure></p><p><strong>2.删（删除元素）</strong><br><strong>a.del</strong><br><strong>作用</strong>： 删除指定<strong>下标</strong>对应的元素<br><strong>用法</strong>：del 列表[下标]<br><strong>说明</strong>：</p><h5 id="del-关键字-可以删除任何数据"><a href="#del-关键字-可以删除任何数据" class="headerlink" title="del:关键字 - 可以删除任何数据"></a>del:关键字 - 可以删除任何数据</h5><p><strong>注意</strong>：不会产生新的列表，<strong>下标会重新分配</strong><br><strong>下标不能越界</strong>，否则会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">anime = [&apos;海贼王&apos;, &apos;火影忍者&apos;, &apos;一人之下&apos;, &apos;秦时明月&apos;]</span><br><span class="line">del anime[-2]</span><br><span class="line">print(anime)   #　 [&apos;海贼王&apos;, &apos;火影忍者&apos;,  &apos;秦时明月&apos;]</span><br><span class="line"># del anime[100]</span><br><span class="line"># IndexError: list assignment index out of range</span><br><span class="line"># 下标错误：列表元素下标超过范围</span><br></pre></td></tr></table></figure></p><p><strong>b.remove</strong>:<br><strong>用法</strong>：<br>列表.remove(元素） - 删除第一个指定元素<br><strong>注意</strong>：元素重复，只删第一个，而且删除的元素必须存在，否则报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">anime = [&apos;海贼王&apos;, &apos;火影忍者&apos;, &apos;一人之下&apos;, &apos;秦时明月&apos;]</span><br><span class="line">anime.remove(&apos;海贼王&apos;)</span><br><span class="line">print(anime)   #  [&apos;火影忍者&apos;, &apos;一人之下&apos;, &apos;秦时明月&apos;]</span><br></pre></td></tr></table></figure></p><p><strong>c.pop</strong>:<br><strong>用法</strong>：<br>列表.pop() - 将列表中最后一个元素<strong>取出</strong><br>列表.pop(下标） - 将列表中指定下标对应的元素<strong>取出</strong><br><strong>返回值</strong>：元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">anime = [&apos;海贼王&apos;, &apos;火影忍者&apos;, &apos;一人之下&apos;, &apos;秦时明月&apos;]</span><br><span class="line">del_item = anime.pop()    # 默认最后的元素</span><br><span class="line">print(anime)    #  [&apos;海贼王&apos;, &apos;火影忍者&apos;, &apos;一人之下&apos;]</span><br><span class="line">print(del_item)   # 秦时明月</span><br><span class="line">del_item = anime.pop(0)   # 指定下标的元素</span><br><span class="line">print(anime)   #  [&apos;火影忍者&apos;, &apos;一人之下&apos;]</span><br><span class="line">print(del_item)   # 海贼王</span><br></pre></td></tr></table></figure></p><h2 id="坑1：直接遍历元素："><a href="#坑1：直接遍历元素：" class="headerlink" title="坑1：直接遍历元素："></a>坑1：直接遍历元素：</h2><p>删除序列部分元素，删不去，直接删元素会改变序列的长度</p><p><strong>解决办法:</strong><br>遍历序列的<strong>切片</strong>(产生新的列表）</p><h2 id="坑2-：通过下标取元素："><a href="#坑2-：通过下标取元素：" class="headerlink" title="坑2 ：通过下标取元素："></a>坑2 ：通过下标取元素：</h2><p>下标越界和元素不全</p><p><strong>解决办法：</strong><br>while循环来做<br>当元素要删除，下标值不动<br>不需删除，下标加1</p><h2 id="前提：当列表需要删除时，才考虑坑"><a href="#前提：当列表需要删除时，才考虑坑" class="headerlink" title="前提：当列表需要删除时，才考虑坑"></a>前提：当列表需要删除时，才考虑坑</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 简写方式：列表[：]（切片）＝＝　浅拷贝</span><br><span class="line">for x in age[:]:</span><br><span class="line">    if int(x) &lt; 18:</span><br><span class="line">        age.remove(x)</span><br><span class="line">print(age)</span><br><span class="line"># 遍历下标</span><br><span class="line">ages = [12, 13, 43, 45, 10]</span><br><span class="line">new_ages = []</span><br><span class="line">index = 0</span><br><span class="line">while index &lt; len(ages):</span><br><span class="line">    age = ages[index]</span><br><span class="line">    #　判断下标是否加１</span><br><span class="line">    if age &lt; 18:</span><br><span class="line">        del_item = ages.pop(index)</span><br><span class="line">        new_ages.append(del_item)</span><br><span class="line">    else:</span><br><span class="line">        index += 1  # 不需要删除下标增加</span><br><span class="line">print(ages, new_ages)</span><br></pre></td></tr></table></figure><p><strong>3.改（修改元素的值）</strong><br><strong>用法</strong>：<br>列表[下标] = 新值  - 修改指定下标对应的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [1, 2, 2, 4]</span><br><span class="line">list1[0] = &apos;dadf&apos;</span><br><span class="line">print(list1)　＃ [&apos;dadf&apos;, 2, 2, 4]</span><br></pre></td></tr></table></figure></p><p>###三、列表相关运算<br><strong>1. 相关运算</strong>：+， <em><br>+：<br>列表1 + 列表2  - 将两个列表的元素进行拼接，产生一个新的列表</em>：<br>列表＊n - 将列表中的元素重复n次，产生一个新的列表</p><p>b.支持比较运算<br>和字符串的原理类似<br><strong>每对元素的类型要一样*</strong></p><p><strong>2 in / not in   （强调！！！！）</strong><br>元素 <strong>in</strong> 列表   -  判断列表中是否存在指定的<strong>元素</strong><br>和字符串不同，元素<br>元素 <strong>not in</strong> 列表  - 判断列表中是否存在指定的<strong>元素</strong><br><strong>应用</strong>：判断一个列表的元素是否存在于另一个列表中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print([1, 2] in [1, 2, 3])  # False</span><br><span class="line">print([1, 2] in [[1, 2], 30, &apos;abc&apos;])    # True</span><br><span class="line">print([1, 2] not in [1, 2, 3])    # True</span><br></pre></td></tr></table></figure></p><p><strong>3 list</strong><br><strong>list(数据)</strong> - 将其他类型的数据转换成列表；<br>数据是否能转？ - <strong>只有序列</strong>才能转换成列表<br>怎么转？ - 使用list(数据）<br><strong>原理</strong>：将序列中所有的<strong>元素</strong>转换成列表的元素<br><strong>注意</strong>：不能用类型名来作为变量名，否则会有隐患<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = list(&apos;hello&apos;)   </span><br><span class="line">print(list1)　　　＃　[&apos;h&apos;, &apos;e&apos;, &apos;l&apos;, &apos;l&apos;, &apos;o&apos;]</span><br><span class="line">str1 = str(list1)  # 字符串只是单纯的在外面加‘’</span><br><span class="line">print(str1)</span><br></pre></td></tr></table></figure></p><p><strong>4 序列其他方法</strong><br><strong>max(序列)</strong> - 获取序列中<strong>最大</strong>的元素<br><strong>min(序列)</strong> - 获取序列中<strong>最小</strong>的元素<br><strong>sum(序列)</strong> - 求序列中所有元素的<strong>和</strong><br><strong>要求</strong>：序列中的元素类型必须一致，并且类型支持比较运算和<br>加法运算，一般是（数字序列）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(max([12, 244, 431, 343]))   # 431</span><br><span class="line">print(min([12, 244, 431, 343]))   # 12</span><br><span class="line">print(sum([12, 244, 431, 343]))   # 1030</span><br><span class="line">print(sum(range(101)))    # 5050</span><br></pre></td></tr></table></figure></p><p>###四、列表内置函数</p><p>######通过- &gt; 列表.函数名（）  来调用<br>| 序号   | 函数名                                     | 作用                          |<br>| —- | ————————————— | ————————— |<br>| 1    | count(obj)                              | 统计某元素在列表中出现的<strong>次数</strong>          |<br>| 2    | extend(seq)                             | 在列表<strong>末尾</strong>一次<strong>追加</strong>另一个列表中的多个值 |<br>| 3    | index(obj)                              | 获取元素在列表中第一个匹配的下标值           |<br>| 4    | reverse()                               | 将列表元素反向                     |<br>| 5    | sort(cmp=None, key=None, reverse=False) | 将列表元素进行<strong>排序</strong>               |<br>| 6    | clear()                                 | 将列表<strong>清空</strong>                   |<br>| 7    | copy                                    | <strong>复制</strong>列表(顶层)                |<br><strong>1.count(obj)</strong><br><strong>作用</strong>：统计某元素在列表中出现的<strong>次数</strong><br><strong>输入</strong>：列表中的<strong>元素</strong><br><strong>输出</strong>：数字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [12, 32, 4, 23, 44, 12, 45, 8, 23]</span><br><span class="line">print(list1.count(12))   # 2</span><br></pre></td></tr></table></figure></p><p><strong>2.extend(seq)</strong><br><strong>作用</strong>：在列表末尾<strong>追加</strong>另一个<strong>序列</strong>的所有元素<br><strong>输入</strong>：序列<br><strong>输出</strong>：None</p><p>##注意：该方法没有返回值，只会直接在列表末添加元素<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">list1 = [12, 34, 48, 23, 45]</span><br><span class="line">list2 = [&apos;abc&apos;, &apos;这谁好帅&apos;]</span><br><span class="line">print(list1.extend(list2))  # None</span><br><span class="line">print(list1)  # [12, 34, 48, 23, 45, &apos;abc&apos;, &apos;这谁好帅&apos;]</span><br></pre></td></tr></table></figure></p><p><strong>3.index(obj)</strong><br><strong>作用</strong>：获取元素在列表中第一个匹配的下标值<br><strong>输入</strong>：元素<br><strong>输出</strong>：数字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list1 = [&apos;这是谁&apos;, &apos;好帅&apos;, &apos;低调&apos;, &apos;好的&apos;, &apos;好烦&apos;, &apos;帅了一生&apos;]</span><br><span class="line">print(list1.index(&apos;好帅&apos;))   # 1</span><br></pre></td></tr></table></figure></p><p><strong>4.reverse()</strong><br><strong>作用</strong>：将列表元素反向<br><strong>输出</strong>：None</p><p>##注意：该方法没有返回值，只会将原列表反向<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [&apos;这是谁&apos;, &apos;好帅&apos;, &apos;低调点&apos;, &apos;好的&apos;, &apos;好烦&apos;, &apos;帅了一生&apos;]</span><br><span class="line">print(list1.reverse())   # None</span><br><span class="line">print(list1)  #　[&apos;帅了一生&apos;, &apos;好烦&apos;, &apos;好的&apos;, &apos;低调点&apos;, &apos;好帅&apos;, &apos;这是谁&apos;]</span><br></pre></td></tr></table></figure></p><p><strong>5.sort(cmp=None, key=None, reverse=False)</strong><br><strong>作用</strong>：对列表元素进行排序<br><strong>说明</strong>：<br><strong>reverse</strong>:反向<br><strong>输出</strong>：None</p><p>##注意：该方法没有返回值，只会将原列表进行修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [12, 32, 4, 3, 44, 222, 45, 8, 13]</span><br><span class="line">print(list1.sort())   # None</span><br><span class="line">print(list1)   # [3, 4, 8, 12, 13, 32, 44, 45, 222]</span><br><span class="line">print(list1.sort(reverse=True))  # None</span><br><span class="line">print(list1)   # [222, 45, 44, 32, 13, 12, 8, 4, 3]</span><br></pre></td></tr></table></figure></p><p><strong>6.clear()</strong><br><strong>作用</strong>： 清空列表<br><strong>输出</strong>：None</p><p>##注意：该方法没有返回值，只会将原列表进行修改<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [12, 32, 4, 3, 44, 222, 45, 8, 13]</span><br><span class="line">print(list1.clear())  # </span><br><span class="line">print(list1)   # []</span><br></pre></td></tr></table></figure></p><p><strong>7.copy</strong><br><strong>作用</strong>： 复制列表<br><strong>输出</strong>：一个新的列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list1 = [12, 32, 4, 3, 44, 222, 45, 8, 13]</span><br><span class="line">print(list1.copy())  </span><br><span class="line"># [12, 32, 4, 3, 44, 222, 45, 8, 13]</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了python中列表的基础知识和相关用法&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>分支和循环</title>
    <link href="http://yoursite.com/2019/02/24/python%E5%88%86%E6%94%AF%E5%92%8C%E5%BE%AA%E7%8E%AF/"/>
    <id>http://yoursite.com/2019/02/24/python分支和循环/</id>
    <published>2019-02-24T08:38:39.166Z</published>
    <updated>2019-02-24T09:14:05.472Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了python中循环和分支相关的知识<br><a id="more"></a></p><p>#一、分支<br><strong>python中的分支结构只有if语句，没有switch</strong></p><p>###1.什么时候需要使用if语句？<br><strong>定义</strong>：做某件事情，需要满足某个条件</p><p>###2.如何使用if语句？<br><strong>语法</strong>：<br><strong>a.语法1</strong>：<br>if 条件语句：<br>    代码段1<br><strong>说明</strong>：<br><strong>if</strong>:关键字  -&gt; 如果的意思<br><strong>条件语句</strong>：任意一个有结果的语句（最终会转换成布尔值再判断）<br><strong>：</strong>：固定写法（冒号后面第一行必须有缩进，冒号缩进组合形成代码段）<br><strong>代码段1</strong>：和if保持<strong>一个</strong>缩进的<strong>一行或者多行</strong>语句</p><p><strong>执行过程</strong>：<br><strong>第一步</strong>：判断条件语句是否为True<br><strong>第二步</strong>：为True:执行后面的代码段1和其他语句；<br>为False:不执行代码段1，直接执行if<strong>外边</strong>的其他语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">age = 16</span><br><span class="line">if age &gt;= 18:</span><br><span class="line">   print(&apos;你可以玩耍了&apos;)</span><br><span class="line"> # 和if保持一个缩进，均满足条件，都会执行</span><br><span class="line">   print(&apos;你可以去上海迪士尼玩了&apos;)</span><br><span class="line"> print(&apos;=====&apos;)     # 没有和if保持一个缩进，程序都会执行</span><br></pre></td></tr></table></figure></p><p><strong>总结</strong>：需要满足某个条件才执行的语句就写在if里面，不管条件是否满足都执行的语句，写在if的外面</p><p><strong>b.语法：</strong><br>if 条件语句：<br>    代码段1<br>else：<br>    代码段2<br>（其他语句）<br><strong>说明</strong>：</p><p><strong>else</strong>：关键字  -&gt; 否则的意思(不满足if条件的其他情况）<br><strong>执行过程</strong>：<br><strong>第一步</strong>：判断条件语句是否为True<br><strong>第二步</strong>：为True:执行后面的代码段1；为False:执行代码段2，然后执行else<strong>外边</strong>的其他语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">num = int(input(&apos;输入一个数字：&apos;))</span><br><span class="line">if num % 2 == 0:</span><br><span class="line">    print(&apos;%d是偶数&apos; % num)  # 满足条件执行</span><br><span class="line">else:</span><br><span class="line">    print(&apos;%d是奇数&apos; % num)   # 不满足条件执行</span><br><span class="line"></span><br><span class="line">print(&apos;=========&apos;)  # 无论与否，都会执行</span><br></pre></td></tr></table></figure><p><strong>c.语法</strong>：<br><strong>应用</strong>：当情况不止两种时，采用<br>if 条件语句1：<br>    代码段1<br>elif 条件语句2:<br>    代码段2<br>elif 条件语句3：<br>    代码段3<br>…<br><strong>else：</strong><br>    代码段n<br>（其他语句）<br><strong>说明</strong>：<br><strong>elif</strong>:关键字  -&gt; 前面条件不满足，则开始判断其他条件是否满足</p><p><strong>执行过程</strong>：<br><strong>第一步</strong>：判断条件语句1是否为True<br><strong>第二步</strong>：为True:执行后面的代码段1；执行其他语句<br><strong>第三步</strong>：为False:判断条件语句2是否为True<br><strong>第四步</strong>：重复二、三步骤<br><strong>第n步</strong>;前面都不成立，执行else后面的语句，然后执行其他语句<br><strong>注意</strong>：后面的语句判断的前提是前面的条件语句不成立<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">salary = 20000</span><br><span class="line">if salary &lt;= 5000:</span><br><span class="line">    print(&apos;水中游&apos;)</span><br><span class="line">elif salary &lt;= 10000:</span><br><span class="line">    print(&apos;同城游&apos;)</span><br><span class="line">elif salary &lt;= 15000:</span><br><span class="line">    print(&apos;国内游&apos;)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;国外游&apos;)</span><br><span class="line">print(&apos;----------------&apos;)</span><br></pre></td></tr></table></figure></p><p><strong>补充</strong>：a. python中可以使用3个双引号或者3个单引号，来表示一个字符串<br>    b. else不是一定要写，根据情况后面的else结构可以没有！</p><p>###扩展<br><strong>1.if的嵌套</strong><br><strong>定义</strong>：if结果里还可以写if结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 输入一个数，如果是偶数，打印“xx是偶数”，同时判断是否能被4整除</span><br><span class="line"># 如果可以打印“xx还是4的倍数”，如果不是只打印“xx是奇数”</span><br><span class="line">num = int(input(&apos;请输入一个数字：&apos;))</span><br><span class="line">if num % 2 == 0:  # if嵌套if语句</span><br><span class="line">    print(&apos;%d是偶数&apos; % num)</span><br><span class="line">    if num % 4 == 0:   # num是偶数才判断</span><br><span class="line">        print(&apos;%d还是4的倍数&apos; % num)</span><br><span class="line">    else:</span><br><span class="line">        print(&apos;是偶数但是不是4的倍数！&apos;)</span><br><span class="line">else:  # else嵌套if语句</span><br><span class="line">    print(&apos;%d是奇数&apos; % num)</span><br><span class="line">    if num % 5 == 0:</span><br><span class="line">        print(&apos;这个奇数是5的倍数&apos;)</span><br></pre></td></tr></table></figure><p> <strong>2.三目运算符</strong><br>c语言/java/js语言中：表达式？值1：值2  -&gt; 判断表达式的值是否为True,<br>为True整个表达式的结果是值1，否则是值2</p><p>python中：<strong>值1 if 表达式 else 值2</strong>  -&gt; 判断表达式的值是否为True,<br>为True整个表达式的结果是值1，否则是值2</p><p><strong>注意</strong>：当只有两种情况时使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 练习：输入年份，判断是否是闰年。是，输出‘闰年’，</span><br><span class="line"># 否则输出‘不是闰年’,闰年条件：被4整除，不能被100整除，</span><br><span class="line"># 或者被400整除</span><br><span class="line">year = int(input(&apos;请输入一个年份：&apos;))</span><br><span class="line">print(&apos;闰年&apos;) if (year % 4 == 0 and year % 100 != 0) \</span><br><span class="line">               or year % 400 == 0 else print(&apos;不是闰年&apos;)</span><br></pre></td></tr></table></figure></p><p>#二、循环<br><strong>1.为什么使用循环</strong><br><strong>for</strong>循环和<strong>while</strong>循环<br><strong>目的</strong>：实现某个功能的时候需重复操作，则考虑循环</p><p>###2. for 循环<br><strong>a.语法</strong>：<br>for 变量 in 序列：<br>    循环体<br><strong>说明</strong>：<br><strong>for</strong>：关键字<br><strong>变量</strong>：一个变量名（赋值与否均可），一般是新的变量<br><strong>in</strong>:关键字（固定写法）<br><strong>序列</strong>：属于序列的数据；包括（字符串，列表，字典，集合，元祖，生成器，迭代器，range)<br><strong>注意</strong>：序列的<strong>个数</strong>决定循环体执行的<strong>次数</strong><br><strong>:</strong>:固定写法<br><strong>循环体</strong>：需要重复执行的代码；和for保持一个缩进</p><p><strong>执行过程（重要）</strong>：<br><strong>第一步</strong>：让变量去序列中取值，一个一个取<br><strong>第二步</strong>：取一个值，执行一次循环体<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">for char in &apos;a&apos;:   # 遍历序列</span><br><span class="line">    print(&apos;====&apos;)</span><br><span class="line">    print(char)</span><br><span class="line">print(&apos;aaaaaaa&apos;)</span><br><span class="line"></span><br><span class="line"># 练习：给一个字符串&apos;hosee 23jh!hs89_=sssAsK&apos;,统计数字出现的个数</span><br><span class="line">count = 0  # 保存数字的个数，默认是0个</span><br><span class="line">for item in &apos;hosee 23jh!hs89_=sssAsK&apos;:</span><br><span class="line">    if &apos;0&apos; &lt;= item &lt;= &apos;9&apos;:</span><br><span class="line">        count += 1</span><br><span class="line">print(count)</span><br></pre></td></tr></table></figure></p><p><strong>range函数</strong><br><strong>range(N)</strong> -&gt; 产生数字序列（0~N-1）（N必须是整数,n &gt; 0）<br><strong>range(m,n)</strong> -&gt; 产生数字序列 m~ n-1 (m,n必须是整数，n &gt; m)<br><strong>range(m,n,step)</strong> -&gt; 产生从m开始，每次值加step产生<br>下一个数字，直到n前一个为止。<br>（m,n必须是整数， step &gt; 0,n&gt;m  step &lt;0 n&lt;m)</p><p>取奇数<br>for item in range(1, 100, 2):<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 计算1+2+3...+100</span><br><span class="line">sum1 = 0</span><br><span class="line">for num in range(1, 101):</span><br><span class="line">    sum1 += num</span><br><span class="line">print(sum1)</span><br><span class="line"></span><br><span class="line"># 练习：求100以内所有能被13或者7整除的数的和</span><br><span class="line">sum2 = 0</span><br><span class="line">for item in range(100):</span><br><span class="line">    if item % 13 == 0 or item % 7 == 0:</span><br><span class="line">        sum2 += item</span><br><span class="line">print(sum2)</span><br></pre></td></tr></table></figure></p><p><strong>通过遍历字符串下标遍历字符串</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str1 = &apos;hello world:&apos;</span><br><span class="line"># index是字符串对应的下标，从前往后取</span><br><span class="line">for index in range(len(str1)):</span><br><span class="line">    print(str1[index])</span><br><span class="line"># index是字符串对应的下标，从后往前取</span><br><span class="line">for index in range(-1, -len(str1)-1, -1):</span><br><span class="line">    print(str1[index], end=&apos; &apos;)</span><br></pre></td></tr></table></figure><p>###3.while循环<br>“””<br><strong>a.语法</strong>：<br>while 条件语句：<br>    循环体<br><strong>说明</strong>：<br><strong>while</strong>:关键字；当…的时候<br><strong>条件语句</strong>：和if后面的条件一致（赋值语句除外）<br><strong>：</strong>：固定写法<br><strong>循环体</strong>：需要重复执行的语句写在循环体中；<br>和while保持一个缩进</p><p><strong>执行过程</strong>：<br><strong>第一步</strong>：判断条件语句是否为1<br><strong>第二步</strong>：执行循环体<br><strong>第三步</strong>：重复一、二步<br><strong>第四步</strong>：直到条件语句为0，结束循环，执行后面的语句</p><p>##for和while的选择<br><strong>for能做的事情，while都可以做到，while能做的事情，<br>for循环不一定能做到</strong><br><strong>for场景</strong>:1.遍历序列 2.循环次数确定<br><strong>while场景</strong>：1.死循环 2.循环次数不确定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 控制while循环次数</span><br><span class="line">num = 0</span><br><span class="line">while num &lt; 4:</span><br><span class="line">    num += 1</span><br><span class="line"></span><br><span class="line"># 用while循环遍历字符串</span><br><span class="line">str1 = &apos;how are you&apos;</span><br><span class="line">index = 0</span><br><span class="line">while index &lt; len(str1):</span><br><span class="line">    print(str1[index])</span><br><span class="line">    index += 1</span><br></pre></td></tr></table></figure><p>#三、continue、break和else</p><p><strong>1.continue</strong><br>continue是python关键字，<br><strong>要求</strong>：只能用在循环体中</p><p><strong>功能</strong>：<br><strong>while</strong>:执行到此，结束当次循环，直接进入下次循环的判断<br><strong>for</strong>:让变量去取下一个值<br><strong>while</strong>:直接去判断while后面的条件是否为1</p><p><strong>2.break</strong><br>break是python关键字，<br><strong>要求</strong>：只能用在循环体中<br><strong>功能</strong>：执行到此，循环直接结束，直接执行其他语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 找到大于111的数字当中第一个能够被17整除的数</span><br><span class="line">num = 111</span><br><span class="line">while True:</span><br><span class="line">    if num % 17 == 0:</span><br><span class="line">        print(num)</span><br><span class="line">        break</span><br><span class="line">    num += 1</span><br></pre></td></tr></table></figure></p><p><strong>3.else</strong><br>for 变量 in 序列：<br>    循环体<br><strong>else</strong>：<br>    代码段<br>while 条件语句：<br>    循环体<br><strong>else</strong>:<br>    代码段</p><p><strong>执行过程</strong>：循环过程不变，else后面的代码段，循环自然死亡就会执行，但遇到break结束，就不会执行<br><strong>for循环</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for x in range(5):</span><br><span class="line">    print(x)</span><br><span class="line">else:</span><br><span class="line">    print(&apos;for循环自然死亡&apos;)  # 提示循环结束</span><br><span class="line">print(&apos;==========&apos;)   # 不管如何，都会执行</span><br></pre></td></tr></table></figure></p><p><strong>while循环</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">index = 0</span><br><span class="line">while index &lt; 5:</span><br><span class="line">    if index == 3:</span><br><span class="line">        break</span><br><span class="line">    index += 1</span><br><span class="line">else:</span><br><span class="line">    print(&apos;while自然死亡&apos;)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了python中循环和分支相关的知识&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>字符串</title>
    <link href="http://yoursite.com/2019/02/24/python%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://yoursite.com/2019/02/24/python字符串/</id>
    <published>2019-02-24T08:37:05.302Z</published>
    <updated>2019-02-24T09:11:16.125Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了字符串的相关用法<br><a id="more"></a></p><p>#一、获取字符</p><p>##1.单个字符<br><strong>原理</strong>：字符串中的每一个<strong>字符</strong>都会对应一个<strong>唯</strong>一的<strong>下标</strong>（索引）<br><strong>下标</strong>：用来表示<strong>字符</strong>在字符串中的<strong>位置</strong><br><strong>下标方式</strong>：<br><strong>1</strong>.0开始依次增加 ， 0 对应的第一个字符（<strong>0~字符串长度-1</strong>）<br><strong>2</strong>.-1开始依次减少 ， -1 对应的是最后一个字符（<strong>-1~ - 字符串长度</strong>）<br><strong>a.语法</strong>：<br>字符串[下标]  - 获取字符串中<strong>指定下标</strong>的对应的<strong>字符</strong><br><strong>b 说明</strong>：<br><strong>字符串</strong> - 字面量（只要结果是字符串的表达式都可以）字符串变量<br><strong>[]</strong>- 固定写法<br><strong>下标</strong> - 需要获取的<strong>字符</strong>对应的<strong>下标</strong><br><strong>注意</strong>:这里的下标<strong>不能越界</strong>,否则会报错<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">result = &apos;how are you&apos;[4]    </span><br><span class="line"># 获取字符串下标是4的字符，并且赋给变量reault</span><br><span class="line">print(result)    # a</span><br><span class="line">result = &apos;how are you&apos;[12]</span><br><span class="line"># IndexError: string index out of range  </span><br><span class="line"># 下标错误：字符串下标超过范围</span><br><span class="line">str1 = &apos;good good study! day day up!&apos; </span><br><span class="line"># str 类型名 会覆盖原来的类型功能，不报错，但是不建议作为变量名</span><br><span class="line">print(str1[10])</span><br></pre></td></tr></table></figure></p><p>##2.部分字符（字符串切片）</p><p>###方法1：<br><strong>a. 语法</strong>：<br>字符串[开始下标:结束下标：步长]  - 从开始下标开始获取到结束下标<strong>前</strong>为止(<strong>顾头不顾尾</strong>)<br>每次下标止<strong>加上</strong>步长去<strong>获取下一个</strong>元素<br><strong>b. 说明</strong>：<br><strong>字符串</strong> - <strong>有结果的表达式</strong><br>[]  -  固定写法<br>开始下标、结束下标 - 下标值(<strong>下标可以越界</strong>）<br><strong>步长</strong> - <strong>整数</strong>（正数和负数都可以）<br><strong>正数</strong>：从开始下标<strong>从前往后</strong>获取<br>  <strong>负数</strong>：从开始下标<strong>从后往前</strong>获取</p><p><strong>c. 注意</strong>：<br>步长为<strong>正</strong>:<br><strong>要求</strong>：<strong>开始下标</strong>对应的字符的位置必须在<strong>结束下标</strong>对应的字符的位置的 <strong>前面</strong>，<strong>否则</strong>结果是<strong>空串</strong><br>步长为<strong>负</strong>:<br><strong>要求</strong>：<strong>开始下标</strong>对应的字符的位置必须在<strong>结束下标</strong>对应的字符的位置的<strong>后面</strong>，<strong>否则</strong>结果是<strong>空串</strong><br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str1 = &apos;hello python&apos;</span><br><span class="line">print(str1[0:4:-2])    # 切片的时候，倒过来取不到就是空串</span><br><span class="line">print(str1[0:-1:2])    # 下标数值与大小无关</span><br><span class="line"></span><br><span class="line">print(&apos;结果3&apos;, str1[-1:-100:-1])    # 结束下标越界</span><br><span class="line">print(&apos;结果4&apos;, str1[100:-100:1])    # 下标越界</span><br><span class="line"></span><br><span class="line"># 练习：获取一个字符串中所有下标奇数的字符（从前往后）</span><br><span class="line">str2 = &apos;1234567&apos;</span><br><span class="line">print(str2[1:100:2])   # 2 4 6</span><br></pre></td></tr></table></figure></p><p>###方法2：<br>字符串[开始下标：结束下标] - 省略步长<br>省略步长：默认步长为1<br><strong>过程</strong>：从开始下标开始到结束下标<strong>前</strong>为止，一个个取</p><p>###方法3：字符串[:结束下标：步长]（省略开始下标和结束下标）<br><strong>a. 省略开始下标</strong><br>步长为<strong>正</strong>：从<strong>第一个字符</strong>开始取到结束下标<strong>前</strong>为止<br>步长为<strong>负</strong>：从字符串的<strong>最后一个</strong>字符开始取到结束下标<strong>前</strong>为止</p><p><strong>b. 省略结束下标</strong><br>字符串[开始下标：：步长]<br>步长为<strong>正</strong>：从开始下标<strong>开始</strong>取<strong>到最后</strong>一个字符为止；<br>步长为<strong>负</strong>：从开始下标<strong>开始</strong>取到<strong>第一个</strong>字符为止<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str4 = &apos;when i was yuong!&apos;</span><br><span class="line">print(str4[:6], str4[:6:-1])   # when i !gnouy saw</span><br><span class="line">print(str4[2:], str4[2::-1])   # en i was yuong! ehw</span><br><span class="line">print(str4[:])   # 从前到后</span><br><span class="line">print(str4[::-1])  # 从后往前</span><br></pre></td></tr></table></figure></p><p><strong>注</strong>:<strong>不会改变</strong>字符串的的<strong>结果</strong>，只是<strong>获取内容</strong></p><p>#二、字符串运算符<br><strong>1. 数学运算符</strong>：+ *<br><strong>2. 比较运算符</strong>：&gt;, &lt;, ==, !=, &gt;=, &lt;=<br>支持所有的比较运算符</p><p>###1.数学运算符<br><strong>a. +</strong>: 字符串1 + 字符串2<br><strong>作用</strong>：将两个字符串<strong>拼接</strong>在一起<strong>产生</strong>一个<strong>新的字符串</strong><br><strong>注意</strong>：字符串只能是同类型的数据进行运算！<br><strong>b. *</strong>: 字符串 * n - n是正整数<br><strong>作用</strong>：字符串<strong>重复</strong>n次产生一个<strong>新的字符串</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">str1 = &apos;abc&apos; + &apos;123&apos;</span><br><span class="line">print(str1)</span><br><span class="line"></span><br><span class="line"># print(&apos;abc&apos; + 123)  # TypeError: must be str, not int</span><br><span class="line"># 类型错误：必须是字符串，不能是整型</span><br><span class="line"></span><br><span class="line">new_str = &apos;abc&apos;*3   # abcabcabc</span><br><span class="line">print(new_str)</span><br><span class="line"></span><br><span class="line">print(&apos;sdf&apos; + &apos;dfd&apos;*2)   # sdfdfddfd</span><br></pre></td></tr></table></figure></p><p>###2. 比较运算符<br><strong>a.比较是否相等</strong><br>==， ！=  可以判断两个字符串是否相等或者不相等</p><p><strong>b.比较大小</strong><br><strong>第一步</strong>：两个字符串字符一一对应<br><strong>第二步</strong>：找不同<br><strong>第三步</strong>：判断不同字符的编码值<br><strong>第四步</strong>：比较编码值的大小<br><strong>应用</strong>：<br>1 判断是否是<strong>小写</strong>字母：’a’&lt;= char &lt;= ‘z’<br>2 判断是否是<strong>大写</strong>字母：’A’&lt;= char &lt;= ‘Z’<br>3 判断是否是<strong>中文</strong>：’\u4e00’ &lt;= char &lt;= ‘\u9fa5’<br><strong>注意</strong>：这里字母必须加单引号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;abc&apos; == &apos;abc&apos;)    # True</span><br><span class="line"></span><br><span class="line">print(&apos;abdcb&apos; &gt; &apos;abcde&apos;)    # True</span><br><span class="line"></span><br><span class="line"># 判断一个字符串中第三个字符是否是字母?</span><br><span class="line">str3 = &apos;sdd34.erer&apos;</span><br><span class="line">char = str3[2]   # 取出第三个字符</span><br><span class="line">print(&apos;是否是字母&apos;, &apos;a&apos; &lt;= char &lt;= &apos;z&apos; or &apos;A&apos; &lt;= char &lt;= &apos;Z&apos;)</span><br><span class="line">print(&apos;是否是中文：&apos;, &apos;\u4e00&apos; &lt;= char &lt;= &apos;\u9fa5&apos;)</span><br></pre></td></tr></table></figure></p><p>###3.in 和 not in 操作<br><strong>a.</strong>字符串1 <strong>in</strong> 字符串2   -&gt; 判断字符串2中是否包含字符串1<br>（判断字符串<strong>1是否是</strong>字符串<strong>2</strong>的<strong>子串</strong>）</p><p><strong>b.</strong>字符串1 <strong>not in</strong> 字符串2   -&gt; 判断字符串2中是否不包含字符串1<br>（判断字符串<strong>1是否不是</strong>字符串<strong>2</strong>的<strong>子串</strong>）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># in</span><br><span class="line">print(&apos;zhi&apos; in &apos;hzhi isd&apos;)   # True</span><br><span class="line">print(&apos;dfj&apos; in &apos;ddddddd&apos;)    # False</span><br><span class="line"></span><br><span class="line"># not in</span><br><span class="line">print(&apos;zhi&apos; not in &apos;hzhi isd&apos;)   # False</span><br><span class="line">print(&apos;dfj&apos; not in &apos;ddddddd&apos;)    # True</span><br></pre></td></tr></table></figure></p><p>###4. len函数<br><strong>用法</strong>：len(序列）<br><strong>目的</strong>：获取序列的<strong>长度</strong>即获取序列中元素的<strong>个数</strong><br><strong>输入</strong>：序列<br><strong>输出</strong>：数字（包括0）</p><p><strong>注意</strong>：<br>一个转义字符：长度为1<br>一个编码字符：长度为1<br>一个空格：长度为1<br>一个tab键：长度为4<br>一个\t表示的tab键：长度为1<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(len(&apos;sdfd&apos;))   # 4</span><br><span class="line"></span><br><span class="line">str1 = input(&apos;请输入：&apos;)     # 123456</span><br><span class="line">print(str1[len(str1)-1])     # 6</span><br><span class="line"></span><br><span class="line">str2 = &apos;    abc&apos;</span><br><span class="line">print(len(str2))   # 7</span><br></pre></td></tr></table></figure></p><p>#三、格式化字符串</p><p>###1. 什么是格式字符串？<br><strong>定义</strong>：字符串中通过<strong>格式占位符</strong>来代替字符串中<strong>变化的部分</strong>，然后在后面通过<strong>数据或者变量</strong>确定变化</p><p>###语法：<br>包含占位符的字符串 % （每个占位符对应的变量）<br>包含占位符的字符串 % （值1， 值2， 值3….）<br>常见占位符：<br><strong>%s</strong> （字符串）<br><strong>%d</strong> （数字）<br><strong>%f</strong> （小数）  (%.<strong>n</strong>f 保留小数点后<strong>n位小数</strong>）<br><strong>%c</strong> （字符）   （可以将编码值转换成字符）<br><strong>%</strong> - 固定写法<br>（） - 固定写法<br><strong>注</strong>：字符串中只有<strong>一个</strong>占位符的时候，这个（）可以<strong>省略</strong><br><strong>值</strong> - 个数和类型和位置一一对应，即值和占位符要一一对应<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name = input(&apos;姓名：&apos;)</span><br><span class="line">age = 18</span><br><span class="line">sex = &apos;男&apos;</span><br><span class="line">massage = &apos;我叫%s,今年%d岁，性别：%s&apos;</span><br><span class="line">print(massage % (name, age, sex))</span><br><span class="line"></span><br><span class="line">message = &apos;我叫%s,今年%d, 性别：%s, \</span><br><span class="line">月薪%f万&apos; % (name, age, sex, 3.5)</span><br><span class="line"></span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure></p><p><strong>注</strong>：可以直接在print函数里面写，不用先保存在变量中</p><p>#四、类型转换</p><p>###1.基本语法<br>语法：<br>类型名（数据）   - 将指定的<strong>数据</strong>转换成指定<strong>类型</strong></p><p><strong>说明</strong>：<br><strong>类型名</strong> - 任何python支持的，或者是自定的类型都可以<br><strong>数据</strong> - 需要转换的对象（类型不同要求可能不同）</p><p>###2. 转换实例<br>int(数据)  - 将其他数据转换成整型<br>float(数据） - 将其他数据转换成浮点型<br>bool(数据） - 将其他类型转换成布尔<br>str(数据） - 将其他数据转换成字符串</p><p><strong>a.整型</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(int(12.8)) # 浮点数可以转换成整数，直接保留整数部分</span><br><span class="line">b = int(True) # 1 布尔可以转换成整数，True-&gt;1, False-&gt;0</span><br><span class="line">print(b)</span><br><span class="line">c = int(&apos;120&apos;)  # 只有去掉字符串的引号后本身就是</span><br><span class="line"># 一个整数的字符串才能转换成整型</span><br><span class="line">c = int(&apos;avd&apos;)   # 报错</span><br><span class="line"># ValueError: invalid literal for int() with base 10: &apos;avd&apos;</span><br><span class="line"># 值错误：以10为基数的int()的文本无效:&apos;avd&apos;</span><br></pre></td></tr></table></figure></p><p><strong>b. 浮点型</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = float(100) # 所有整数都可以转换成浮点数，在后面加.0</span><br><span class="line">b = float(True) # 布尔转换成浮点数,True-&gt;1.0,False-&gt;0.0</span><br><span class="line">c = float(&apos;12.5&apos;)    </span><br><span class="line"># 去掉引号后本身就是一个数字的字符串，能转换成浮点型</span><br><span class="line">print(a, b, c)</span><br></pre></td></tr></table></figure></p><p><strong>c. 布尔类型</strong><br><em>python中所有的数据都可以转换成布尔</em><br><strong>注</strong>：所有为空为0的值会转换成False,其他都是True<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a = bool(100)</span><br><span class="line">b = bool(0.0)</span><br><span class="line">c = bool(&apos;&apos;)</span><br><span class="line">d = bool([])</span><br><span class="line">f = bool(None)</span><br><span class="line">print(a, b, c, d, f)   # True False False False False</span><br></pre></td></tr></table></figure></p><p><strong>d. 字符串类型</strong><br><em>所有的数据都可以转换成字符串，而且转化的时候就只是单纯的在外面加两个单引号</em><br><strong>应用</strong>：字符串的拼接   字符串的运算<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = str(100)</span><br><span class="line">print(type(100))    #  &lt;class &apos;str&apos;&gt;</span><br></pre></td></tr></table></figure></p><p>#五、内置函数</p><p>###使用方法：字符串.方法名（）</p><p>####1 capitalize()<br><strong>目的</strong>：将字符串的第一个字母变成大写,其他字母变小写<br><strong>返回值</strong>：首字母大写，<strong>其他字母小写</strong>的新字符串<br><strong>注意</strong>：首字符如果是<strong>非字母</strong>，首字母不会转换成大写，会转换成小写<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 注意：只有第一个字符是字母的时候才有效</span><br><span class="line">str1 = &apos;ddfff&apos;</span><br><span class="line">print(str1.capitalize())    # Ddfff</span><br><span class="line">str=&quot;123 hello PYTHON&quot;</span><br><span class="line">str.capitalize()   # 123 hello python</span><br></pre></td></tr></table></figure></p><p>####2 字符串对齐方式<br><strong>说明</strong>：<br> <strong>width</strong>:字符串长度(整数），下同<br><strong>fillchar</strong>：填充符号（字符），只能是单个字符，下同</p><ul><li><strong>center(width, fillchar)</strong><br> <strong>目的</strong>:居中 </li><li><p><strong>ljust(width, fillchar)</strong><br> <strong>目的</strong>：左对齐</p></li><li><p><strong>rjust(width, fillchar)</strong><br> <strong>目的</strong>：右对齐<br> 示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = &apos;abc&apos;</span><br><span class="line">print(str1.center(7, &apos;0&apos;))    # 00abc00</span><br><span class="line">print(str1.ljust(7, &apos;*&apos;))     # abc****</span><br><span class="line">print(str1.rjust(7, &apos;=&apos;))     # ====abc</span><br></pre></td></tr></table></figure></li></ul><p><strong>注意</strong>：当fillchar长度<strong>小于</strong>字符串长度时，会直接返回字符串<br>fillchar默认是<strong>空格</strong></p><p>####3 count(str)<br><strong>用法</strong>：字符串1.count(字符串2）<br><strong>目的</strong>： 在字符串1中统计字符串2出现的<strong>次数</strong><br><strong>输入</strong>：两个字符串（可以传参开始和结束下标）<br><strong>输出</strong>：数字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;ddfjdkfdfkd&apos;.count(&apos;d&apos;))   # 5</span><br></pre></td></tr></table></figure></p><p>####4 isalpha()<br><strong>目的</strong>： 判断字符串中是否<strong>全是字母</strong><br><strong>注意</strong>：<strong>非ASCII码</strong>表中的字符检测不出来<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;dfdfdj&apos;.isalpha())   # True</span><br><span class="line">print(&apos;dfdfw1j&apos;.isalpha())   # False</span><br></pre></td></tr></table></figure></p><p>####5 join(seq)<br><strong>用法</strong>：字符串1.join(字符串2）<br><strong>目的</strong>：将字符串1插入到字符串2中<br><strong>输入</strong>：两个字符串<br><strong>输出</strong>：一个新的字符串<br><strong>注意</strong>：每个字符之间，<strong>最前后</strong>不会插入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">new_str = &apos;*&apos;.join(&apos;dffkd&apos;)</span><br><span class="line">print(new_str)    # d*f*f*k*d</span><br></pre></td></tr></table></figure><p>####6 split<br><strong>用法</strong>：字符串1.split(字符串2）<br><strong>目的</strong>：以字符串2去<strong>切割</strong>字符串1<br><strong>输入</strong>：两个字符串<br><strong>输出</strong>：列表<br><strong>应用</strong>：通过url获取图片的名字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;12,34,34&apos;.split(&apos;,&apos;))   # [&apos;12&apos;, &apos;34&apos;, &apos;34&apos;]</span><br><span class="line">url = &quot;http://www.baidu.com/python/image/123456.jpg&quot;</span><br><span class="line">path =url.split(&quot;/&quot;)[-1]</span><br><span class="line">print(path)    # 123456.jpg</span><br></pre></td></tr></table></figure></p><p>####7 zfill(width)<br><strong>目的</strong>：长度为 width ，原字符串<strong>右对齐</strong>，前面<strong>填充0</strong><br><strong>补充</strong>：zfill(width)效果等同于rjust(width, ‘0’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = input(&apos;进班顺序(1~50)：&apos;)    # 12</span><br><span class="line">id2 = &apos;py1809&apos; + num.zfill(4)</span><br><span class="line">print(id2)    # py18090012</span><br></pre></td></tr></table></figure></p><p>####8 isdecimal()<br><strong>目的</strong>：检查字符串是否<strong>只</strong>包含十进制字符<br><strong>输出</strong>：布尔值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = &apos;123hnfd&apos;</span><br><span class="line">print(&apos;123errer&apos;.isdecimal())   # False</span><br><span class="line">print(&apos;12323&apos;.isdecimal())   # True</span><br></pre></td></tr></table></figure></p><p>####9 upper()<br><strong>目的</strong>：转换字符串中所有小写字母为大写<br><strong>输出</strong>：新的字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;djkdfd&apos;.upper())  # DJKDFD</span><br></pre></td></tr></table></figure></p><p>####10 title()<br><strong>目的</strong>：将多个单词的首字母转换成大写<br><strong>输出</strong>：新的字符串<br><strong>注意</strong>：非字母后的第一个字母转换成大写字母<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;mynameis&apos;.title())    # Mynameis</span><br><span class="line">print(&apos;my_name_is&apos;.title())    # My_Name_Is</span><br><span class="line"></span><br><span class="line">txt = &quot;b2b2b2 3g3g3g&quot;</span><br><span class="line">x = txt.title()</span><br><span class="line">print(x)    #　B2B2B2 3G3G3G</span><br></pre></td></tr></table></figure></p><p>####11 swapcase()<br><strong>目的</strong>：将字母大写转小写 and 小写转大写<br><strong>输出</strong>：新的字符串<br><strong>说明</strong>：就是将字母取反<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;dfDFfdf&apos;.swapcase())    # DFdfFDF</span><br></pre></td></tr></table></figure></p><p>####12 max(str)<br><strong>目的</strong>：获取字符串 str 中<strong>最大</strong>的字母<br><strong>输出</strong>：字符<br><strong>注意</strong>：有大小写的字符串中返回的是小写字母的最大值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(max(&apos;zheshi&apos;))   # z</span><br><span class="line">print(max(&apos;Zheshi&apos;))  #ｓ</span><br></pre></td></tr></table></figure></p><p>####13 min(str)<br><strong>目的</strong>：获取字符串 str 中<strong>最小</strong>的字母<br><strong>输出</strong>：字符<br><strong>注意</strong>：有大小写的字符串中返回的是小写字母的最小值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(min(&apos;znxjdsyeiw&apos;))    # d</span><br><span class="line">print(min(&apos;Znxjdsyeiw&apos;))　　#ｚ</span><br></pre></td></tr></table></figure></p><p>####14 lower()<br><strong>目的</strong>：转换字符串中<strong>所有</strong>大写为小写<br><strong>输出</strong>：新的字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;DFDFDKDFDdd&apos;.lower())   # dfdfdkdfddd</span><br></pre></td></tr></table></figure></p><p>####15 istitle()<br><strong>目的</strong>：如果字符串采用PEp8方式，但是单词首字母都是大写，返回 True，否则返回 False<br><strong>输出</strong>：布尔值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;dfjd_dfdjf&apos;.istitle())   # False</span><br><span class="line">print(&apos;My_Name&apos;.istitle())   # True</span><br></pre></td></tr></table></figure></p><p>####16 isdigit()<br><strong>目的</strong>：判断字符串是否只包含数字<br><strong>输出</strong>：布尔值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;dfdf343434&apos;.isdigit())   # False</span><br><span class="line">print(&apos;14343545454&apos;.isdigit())    # True</span><br></pre></td></tr></table></figure></p><p>####17 isalnum()<br><strong>目的</strong>：判断字符串至少有一个字符并且所有字符是否都是字母或数字<br><strong>输出</strong>：布尔值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;&apos;.isalnum())    # False</span><br><span class="line">print(&apos;ddffdff&apos;.isalnum())   # True</span><br><span class="line">print(&apos;123354&apos;.isalnum())    # True</span><br><span class="line">print(&apos;dfdf2434&apos;.isalnum())    # True</span><br></pre></td></tr></table></figure></p><p>####18 isnumeric()<br><strong>目的</strong>：判断字符串中是否只包含数字字符（中文数字也可以）<br><strong>输出</strong>：布尔值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;434838&apos;.isnumeric())    # True</span><br><span class="line">print(&apos;434fdfg&apos;.isnumeric())    # False</span><br></pre></td></tr></table></figure></p><p>####19 isspace()<br><strong>目的</strong>：判断字符串中是否为空白符(不是空串）<br><strong>输出</strong>：布尔值<br><strong>空白符</strong>：空格、制表符(\t)、换行(\n)、回车等(\r）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&apos; &apos;.isspace())    # True</span><br><span class="line">print(&apos;&apos;.isspace())    # False</span><br><span class="line">print(&apos;dfdf&apos;.isspace())    # False</span><br></pre></td></tr></table></figure></p><p>####20 lstrip([chars])<br><strong>目的</strong>：截掉字符串左边的空格或指定字符。<br><strong>输出</strong>：新的字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(&apos; dffdfd&apos;.lstrip())    # dffdfd</span><br></pre></td></tr></table></figure></p><p>####21 islower()<br><strong>目的</strong>：如果字符串中包含至少一个区分大小写的字符，判断所有这些(区分大小写的)字符是否都是小写<br><strong>输出</strong>：布尔值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;fdddfdfA&apos;.islower())    # False</span><br><span class="line">print(&apos;fdddfsdsf&apos;.islower())    # True</span><br></pre></td></tr></table></figure></p><p>####22 isupper()<br><strong>目的</strong>：如果字符串中包含至少一个区分大小写的字符，判断所有这些(区分大小写的)字符是否都是大写<br><strong>输出</strong>：布尔值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;fdddfsdsf&apos;.isupper())    # False</span><br><span class="line">print(&apos;DSDSDDSD&apos;.isupper())    # True</span><br></pre></td></tr></table></figure></p><p>####23 rstrip([chars])<br><strong>目的</strong>：删除字符串末尾的指定字符（默认为空格）<br><strong>输出</strong>：新的字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">demo = &apos;我是一个例子:::&apos;</span><br><span class="line">demo_1 = &apos;    真巧，我也是例子     &apos;</span><br><span class="line">print(demo.rstrip(&apos;:&apos;))   #　我是一个例子</span><br><span class="line">print(demo_1.rstrip())    #     真巧，我也是例子</span><br></pre></td></tr></table></figure></p><p>####24 strip([chars])<br><strong>目的</strong>：移除字符串头尾指定的字符（默认为空格）或字符序列<br><strong>输出</strong>：新的字符串<br><strong>注意</strong>：只会删除两头，不会删中间<br>删除多个字符时：只要头尾有对应其中的某个字符即删除，不考虑顺序<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str = &quot;*****我是**一个**例子!!!*****&quot;</span><br><span class="line">print (str.strip(&apos;*&apos;))   # 我是**一个**例子!!!</span><br><span class="line"># 字符序列</span><br><span class="line">str = &quot;12我也是一个例子21&quot;</span><br><span class="line">print (str.strip(&apos;12&apos;))  # 我也是一个例子</span><br></pre></td></tr></table></figure></p><p>####25 endswith(suffix[, start[, end]])<br><strong>目的</strong>：判断字符串是否以指定后缀结尾<br><strong>说明</strong>：<br><strong>suffix</strong>: 字符串或者是一个元素。<br><strong>start</strong>: 开始下标<br><strong>end</strong>:  结束下标<br><strong>输出</strong>：布尔值<br><strong>注意</strong>：<br>start 参数以 0 为第一个字符索引值。<br>end 参数以 1 为第一个字符索引值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Str = &apos;哇塞，这是一个例子!!!&apos;  </span><br><span class="line">suffix = &apos;!!&apos;</span><br><span class="line">print(Str.endswith(suffix))  # True</span><br><span class="line">print(Str.endswith(suffix, 9))   # True</span><br><span class="line">suffix = &apos;run&apos;</span><br><span class="line">print(Str.endswith(suffix))   # False</span><br><span class="line">print(Str.endswith(suffix, 0, 19))  # False</span><br></pre></td></tr></table></figure></p><p>####26 replace(old, new[, max])<br><strong>目的</strong>：将旧字符串替换成新的字符串<br><strong>说明</strong>：<br><strong>old</strong> ：将被替换的子字符串。<br><strong>new</strong> ： 新字符串，用于替换old子字符串。<br><strong>max</strong>：可选字符串, 替换不超过 max 次<br><strong>输出</strong>：新的字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">demo = &apos;哇塞，这是一个例子!!!&apos;</span><br><span class="line">print(demo)   # 哇塞，这是一个例子!!!</span><br><span class="line">print(demo.replace(&apos;哇塞&apos;, &apos;是的&apos;))  # 是的，这是一个例子!!!</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了字符串的相关用法&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>运算符</title>
    <link href="http://yoursite.com/2019/02/24/python%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
    <id>http://yoursite.com/2019/02/24/python运算符/</id>
    <published>2019-02-24T08:35:01.560Z</published>
    <updated>2019-02-24T09:11:31.905Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了python中的运算符和字符串相关的概念<br><a id="more"></a></p><p>#一、python运算符</p><p>###python支持哪些运算符？<br><strong>数学运算符、比较运算符、逻辑运算符、赋值运算符（位运算符）</strong></p><p><strong>1.数学运算符</strong>：+(加号), -(减号), <em>(乘号), /(除号), //(整除), %(取余), <strong>(幂运算)</strong>a.** </em>+、-、 *、/和数学中的加减乘除一样*<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(10 + 20)  # 30</span><br><span class="line">print(12.6 + 5)  # 17.6</span><br><span class="line">print(100 - 110)  # -10</span><br><span class="line">print(2 * 3)  # 6</span><br><span class="line">print(5 / 2)  # 2.5</span><br></pre></td></tr></table></figure></p><p><strong>b.</strong> //（整除）,  数字1 // 数字2  –&gt;  让数字1除以数字2，<strong>结果只取整数部分</strong><br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(7 // 2)     # 3</span><br><span class="line">print(6.5 // 3)   # 2.0</span><br><span class="line">print(-5 // 2)    # -3</span><br></pre></td></tr></table></figure></p><p><strong>c.</strong> %(取余) ， <strong>求余</strong><br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(5 % 2)     # 2</span><br><span class="line">print(10 % 4)   # 2</span><br></pre></td></tr></table></figure></p><p><strong>% 应用一</strong>： 获取一个数的个位数<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(234 % 10)    # 商23余4 -&gt; 4</span><br></pre></td></tr></table></figure></p><p><strong>% 应用二</strong>： 判断一个数的<strong>奇偶性</strong>, 让这个<strong>对2取余</strong>，然后看结果是<strong>0(偶数)</strong>还是<strong>1(奇数)</strong><br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(20 % 2)  # 0 -&gt; 偶数</span><br><span class="line">print(3 % 2)  # 1 -&gt; 奇数</span><br></pre></td></tr></table></figure></p><p><strong>补充</strong>：生活中常用于<strong>有规律重复</strong>的事件<br><strong>d.</strong> <strong>(幂运算), x </strong> y  –&gt; 求x的y次方<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">print(2 ** 3)   # 8</span><br><span class="line">print(10 ** 4)   # 10000</span><br><span class="line">print(16 ** 0.5)    # x ** 0.5 == x ** (1/2) == x开平方</span><br><span class="line">print(8 ** (1/3))   # 8开立方</span><br><span class="line"></span><br><span class="line">age = 18</span><br><span class="line">print(age + 10)     #28</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：运算符的运算对象不一定非的是数据，也可以是存数据的变量</p><p><strong>2.比较运算符</strong>：&gt;(大于),  &lt;(小于),  ==(等于), !=(不等于)  , &gt;= , &lt;=<br><strong>输出</strong>：所有的比较运算符的<strong>结果都是布尔值</strong><br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">print(10 &gt; 20)     # False</span><br><span class="line">print(10 &lt; 20)     # True</span><br><span class="line">print(10 == 20)     # False</span><br><span class="line">print(10 == 10)    # True</span><br><span class="line">print(10 != 20)    # True</span><br><span class="line">print(10 != 10)    # False</span><br><span class="line">print(10 &gt;= 20)    # False</span><br><span class="line">print(20 &gt;= 20)    # True</span><br></pre></td></tr></table></figure></p><p><strong>补充</strong>：is的使用<br><strong>变量三要素</strong>，分别是：<strong>类型</strong>(变量中存储的数据的类型)、<strong>值</strong>(给变量赋值的数据)、<strong>地址</strong>(变量真正存储的内容，数据的地址)<br><strong>类型</strong> - type(变量)<br><strong>值</strong> - 直接使用变量，就是使用值<br><strong>地址</strong> - id(变量)<br><strong>== 和 is的区别</strong><br><strong>==</strong>：判断的是<strong>值</strong>是否相等<br><strong>is</strong>: 判断的是<strong>地址</strong>是否相等<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = [1, 2]</span><br><span class="line">list2 = [1, 2]</span><br><span class="line"># 用一个变量给另一个变量赋值的时候，是将变量中</span><br><span class="line"># 存储的数据的地址赋给另外一个变量</span><br><span class="line">list3 = list1 </span><br><span class="line">print(list1, list2)</span><br><span class="line">print(id(list1), id(list2))</span><br><span class="line">print(list1 == list2, list1 is list2)    # True False</span><br><span class="line">print(list1 == list3, list1 is list3)    # True True</span><br></pre></td></tr></table></figure></p><p><strong>赋值</strong>：用一个变量给另一个变量赋值的时候，是将变量中存储的数据的地址赋给另外一个变量</p><p><strong>3.逻辑运算符</strong>: <strong>and</strong>(逻辑与), <strong>or</strong>(逻辑或), <strong>not</strong>(逻辑非)<br><strong>输出</strong>：逻辑运算符的<strong>运算对象和运算结果都是布尔值</strong><br><strong>a.</strong> 值1 <strong>and</strong> 值2  –&gt; 如果<strong>两个都为True</strong>结果就是<strong>True</strong>, <strong>否则</strong>结果是False; 相当于生活逻辑中的’并且’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">True and True  -&gt; True</span><br><span class="line">False and True  -&gt; False</span><br><span class="line">True and  False -&gt; False</span><br><span class="line">False and False -&gt; False</span><br></pre></td></tr></table></figure></p><p><strong>and 应用</strong>：要求多个条件同时满足的时候，就使用逻辑与运算<br><strong>短路操作</strong>：如果第一个条件是False, 就不会再去判断第二个条件，直接让整个与运算的结果是False<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">练习：能拿奖学金的条件是成绩必须90分以上并且测评分不能低于95</span><br><span class="line">grade = 91</span><br><span class="line">score = 95</span><br><span class="line">print(&apos;是否能拿奖学金：&apos;, grade &gt; 90 and score &gt;= 95)   # True</span><br></pre></td></tr></table></figure></p><p><strong>b.</strong> 值1 <strong>or</strong> 值2   –&gt; 如果<strong>两个都为False</strong>结果才是<strong>False</strong>， <strong>否则</strong>结果是True； 相当于生活逻辑中的’或者’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">True or True  -&gt; True</span><br><span class="line">False or True  -&gt; True</span><br><span class="line">True or  False -&gt; True</span><br><span class="line">False or False -&gt; False</span><br></pre></td></tr></table></figure></p><p><strong>or应用</strong>： 要求多个条件只要有一个条件满足，就是使用逻辑或运算<br><strong>短路操作</strong>：如果第一个条件是True, 就不会再去判断第二个条件，直接让整个或运算的结果是True<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">练习： 如果考试成绩低于60分，或者上课不听讲就是降班</span><br><span class="line">grade = 54</span><br><span class="line">is_not_in_class = True    # True代表不在班级，False代表在班级</span><br><span class="line">print(&apos;是否降班:&apos;, grade &lt; 60 or is_not_in_class)</span><br></pre></td></tr></table></figure></p><p><strong>c. not</strong> 值1    –&gt; 对值1进行<strong>否定/取反</strong>  (不是、否定)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">not True   -&gt;  False</span><br><span class="line">not False  -&gt;  True</span><br></pre></td></tr></table></figure></p><p><strong>not应用</strong>： 否定某个条件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">年龄不小10岁</span><br><span class="line">age = 20</span><br><span class="line">print(not age &lt; 10)</span><br></pre></td></tr></table></figure></p><p><strong>4.赋值运算符</strong>: =, +=,  -=,  *=,  /=,  //=, %= , <strong>=</strong>要求<strong>:赋值符号的左边必须是变量; 右边是有结果的(是值)</strong>a**.变量 = 结果   –&gt; 将结果赋给变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">num = 100</span><br><span class="line">num2 = num     # 变量给变量赋值，赋的是变量的地址</span><br></pre></td></tr></table></figure></p><p><strong>b</strong>. +=,  -=,  *=,  /=,  //=, %= , <strong>=</strong>要求**:赋值符号的左边除了是变量以外，还要求这个变量已经被赋过值<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 变量 += 数字   --&gt; 变量 = 变量 + 数字 (将变量原来的值加上指定的数字以后的新值再重新赋给变量)</span><br><span class="line">num3 = 2</span><br><span class="line">num3 += 10    # num3 = num3 + 10  = 2 + 10</span><br><span class="line">print(num3)   # 12</span><br><span class="line"></span><br><span class="line">num3 -= 3     # num3 = num3 - 3 = 12 - 3</span><br><span class="line">print(num3)   # 9</span><br></pre></td></tr></table></figure></p><p><strong>5.运算符的优先级</strong><br>数学运算符 &gt; 比较运算符  &gt; 逻辑运算符  &gt; 赋值运算符<br>数学运算符中: *<em>   &gt;   </em>,/,%,//    &gt;    +,-<br>优先级高的先算，优先级低的后算。如果有()，先算()里面<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">True == 1, False == 0</span><br><span class="line">print(19 + 20 &gt; 6**2+4 or 10 + 3 &lt; 3 * 3)   # False</span><br><span class="line">19 + 20 &gt; 36 + 4 or  10 + 3 &lt; 9</span><br><span class="line">39 &gt; 40 or 13 &lt; 9</span><br><span class="line">False or False False</span><br><span class="line">print(True + 10, False + 10)</span><br><span class="line">print(19 + 20 &gt; (6**2+4 &gt; 10 or 10 + 3 &lt; 3 * 3))</span><br></pre></td></tr></table></figure></p><p>#二、字符串<br><strong>定义</strong>：通过<strong>单引号</strong>或者<strong>双引号</strong>括起来的<strong>字符集</strong>(文本)就是字符串<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = &apos;abc&apos;</span><br><span class="line">str2 = &quot;abc123&quot;</span><br></pre></td></tr></table></figure></p><p><strong>1.类型(str)</strong><br>str是python自己提供的一种<strong>容器型</strong>数据类型, 一个字符串中可以存储多个字符</p><p><strong>什么是字符</strong></p><p><strong>说明</strong>：python中只有字符的概念没有字符类型;如果在python中要<strong>表示一个字符</strong>，用一个<strong>长度是1</strong>的<strong>字符串</strong>来表示<br>​<br><strong>字符串特点</strong>：不可变，有序<br><strong>说明</strong>：<br><strong>不可变</strong>：字符的<strong>值</strong>和字符串的<strong>长度</strong>不可变<br><strong>有序</strong>：每个字符在字符串中的<strong>位置</strong>是确定的</p><p><strong>2.字符串中的字符</strong><br><strong>a.普通字符</strong>：包括一般的字母、数字、符号、其他文字， 例如：’a’, ‘G’, ‘1’, ‘0’, ‘+’, ‘^’,’?’, ‘好’<br><strong>b.转义字符</strong>：通过在一些<strong>特定的字符前</strong>加<strong>\</strong>,来表示<strong>特殊功能</strong>或者<strong>意义</strong>, 这样的字符就是转义字符。<br><strong>\n</strong>   -    换行<br><strong>\t</strong>   -    表示一个tab键<br><strong>\‘</strong>  -    表示一个单引号<br><strong>\“</strong>   -    表示一个双引号<br><strong>\</strong>  -    表示一个反斜杠</p><p><strong>注意</strong>：<strong>1.</strong>没有阻止转义的时候，一个转义字符的长度是1<br>     <strong>2.</strong>可以在字符串的<strong>最前面加r/R</strong>,来<strong>阻止转义</strong>。（阻止字符串中所有的转义字符转义） </p><p><strong>c.编码字符</strong>：在字符串中以’<strong>\u</strong>1234’, 这儿的1234表示<strong>四位十六进制</strong>编码值</p><p>普通字符和转义字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str3 = &apos;agh231好&apos;   #普通字符</span><br><span class="line">str4 = &apos;abc\n123&apos;    #abc 换行打印 123</span><br><span class="line">str5 = &apos;\thello\&apos;A&apos;     # tab键 hello&apos;A</span><br><span class="line">str6 = &quot;he\&quot;llo&apos;A&quot;</span><br><span class="line">str7 = &apos;\\ahello\\npython&apos;</span><br></pre></td></tr></table></figure></p><p>阻止转义<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str8 = R&apos;\t姓名:小白\n\t年龄:18&apos;</span><br><span class="line">print(str8)     #\t姓名:小白\n\t年龄:18</span><br></pre></td></tr></table></figure></p><p><strong>3.字符编码</strong><br><strong>说明</strong>：计算机在<strong>存储</strong>数据的时候只能<strong>数字数据</strong>，而且是数字的<strong>二进制的补码</strong></p><p><strong>目的</strong>：为了将字符存储到计算中，给每个<strong>字符</strong>对应的<strong>一个</strong>固定的<strong>数字</strong>。这个<strong>数字</strong>就是这个字符的<strong>编码</strong></p><p><strong>编码方式</strong>：<br><strong>ASCII</strong>：采用<strong>一个字节</strong>对字符进行<strong>编码</strong>(总共有128个字符)<br><strong>Unicode</strong>：<strong>包含ASCII码</strong>，采用<strong>两个字节</strong>对字符进行<strong>编码</strong>,包含了世界上<strong>所有</strong>的语言和符号，又称万国码</p><p><strong>小写字母</strong>的编码范围(a-z): 97 - 122<br><strong>大写字母</strong>的编码范围(A-Z): 65 - 90<br><strong>中文</strong>编码范围: 0x4e00 ~ 0x9fa5</p><p><strong>相关函数</strong>:</p><p><strong>chr函数</strong><br><strong>目的</strong>： 获取编码对应的字符<br><strong>用法</strong>：chr(编码值)<br><strong>输入</strong>： 十六进制编码值<br><strong>输出</strong>：字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(chr(0x4e00))    # 一</span><br></pre></td></tr></table></figure></p><p><strong>ord函数</strong> ：<br><strong>目的</strong>：获取字符的编码值（以<strong>十进制</strong>的形式返回）<br><strong>用法</strong>：ord(字符)<br><strong>输入</strong>：单个字符<br><strong>输出</strong>：十六进制编码值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(ord(&apos;金&apos;), ord(&apos;彪&apos;))</span><br><span class="line">print(hex(ord(&apos;金&apos;)))</span><br><span class="line"></span><br><span class="line">for x in range(0x4e00, 0x9fa5+1):</span><br><span class="line">    print(chr(x), end=&apos;,&apos;)   #获取所有的汉字</span><br></pre></td></tr></table></figure></p><p>`</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了python中的运算符和字符串相关的概念&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>vim编辑器之神</title>
    <link href="http://yoursite.com/2019/02/21/vim%E7%BC%96%E8%BE%91%E5%99%A8%E4%B9%8B%E7%A5%9E/"/>
    <id>http://yoursite.com/2019/02/21/vim编辑器之神/</id>
    <published>2019-02-21T11:04:07.920Z</published>
    <updated>2019-02-25T13:28:08.699Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了vim编辑器的基本配置和操作<br><a id="more"></a></p><h1 id="vim编辑器之神"><a href="#vim编辑器之神" class="headerlink" title="vim编辑器之神"></a>vim编辑器之神</h1><h3 id="配置vimrc配置"><a href="#配置vimrc配置" class="headerlink" title="配置vimrc配置"></a>配置vimrc配置</h3><p>在shell中可以通过 <code>vim ~/.vimrc</code> 或者 <code>vim /etc/vimrc</code> 打开vimrc文件对vim进行配置。在这个文件中可以进行很多和vim相关的配置，常用的如下（如果对其他配置感兴趣的可以自己百度）：</p><p><img src="../img/vim1.png" alt> </p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><h4 id="1-模式切换"><a href="#1-模式切换" class="headerlink" title="1.模式切换"></a>1.模式切换</h4><p>我们可以将vim分为命令模式、编辑模式和末行模式三种<br><strong>命令模式：</strong>进入vim的时候vim是处于命令模式状态下的，这个时候输入内容不会出现在编辑区  (最末什么都没有)</p><p><strong>末行模式：</strong>在命令模式下输入冒号，让vim进入末行模式。在末行模式的冒号后面可以输入相关的一些指令进行相关操作  (最后有一个冒号)</p><p><strong>编辑模式：</strong>在命令模式下按’i’进入编辑模式。在编辑模式下可以对文件内容进行编辑 (最后 –INSERT– 或者 –插入–)  </p><p>####2.保存和退出<br>在末行模式下输入相应的指令可以对编辑区的内容进行保存和退出vim界面<br><strong>w</strong> – 只保存(类似快捷键ctr+s)<br><strong>q</strong> – 退出（在编辑区的内容全部都保存的情况下才有效）<br><strong>wq</strong> – 保存并退出<br><strong>q!</strong>  – 强制退出（不保存修改信息）    </p><p>####3.光标操作<br>以下光标操作都是在命令模式下输入的<br><strong>^(shift+6)</strong>  – 移动到行首<br><strong>$(shift+4)</strong>  – 移动到行尾<br><strong>G(shift+g)</strong>    – 移动到文件末尾<br><strong>行号G</strong>            – 移动到指定行,例如:30G, 让光标直接跳转到行号是30的那一行<br><strong>gg</strong>                – 移动到文件开头  </p><p>####4.文本操作<br>以下操作不带冒号的是在命令模式下输入，前面有冒号代码后面的内容是在末行模式下输入<br><strong>dd</strong>            – 删除光标所在的行<br><strong>数字dd</strong>        – 从光标所在行开始往后面开始删，删除指定数量行内容<br><strong>:%d</strong>        – 删除所有     </p><p><strong>yy</strong>         – 复制光标所在的行<br><strong>数字yy</strong>        – 从光标所在行开始复制指定行数的内容<br><strong>p</strong>            – 将复制的内容粘贴到光标所在的位置<br><strong>u</strong>            – 撤销<br><strong>ctr+r</strong>    – 反撤销    </p><p><strong>:%!sort</strong>  – 对内容排序  </p><p><strong>:/查找对象[/gice]</strong>    – 搜索匹配正则表达式的内容，按回车回到命令模式后按n往前查找，按N往后查找  </p><p>*<em>:1,$s/被替换对象/替换内容[/gice</em>]*    – 将正则表达式匹配到的内容替换成指定内容   </p><pre><code>-    g: 全局匹配  -     i: 忽略大小写 -   c: 替换时需要提示  -   e: 忽略错误  </code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了vim编辑器的基本配置和操作&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="软件学习" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Nginx服务器</title>
    <link href="http://yoursite.com/2019/02/21/Nginx%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2019/02/21/Nginx服务器安装/</id>
    <published>2019-02-21T11:04:07.918Z</published>
    <updated>2019-02-25T13:29:50.499Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了Nginx服务器如何通过git bash安装在linux系统<br><a id="more"></a></p><h1 id="Nginx服务器"><a href="#Nginx服务器" class="headerlink" title="Nginx服务器"></a>Nginx服务器</h1><h3 id="1-阿里云添加80端口"><a href="#1-阿里云添加80端口" class="headerlink" title="1.阿里云添加80端口"></a>1.阿里云添加80端口</h3><p>阿里云上默认只有一个22端口用来做远程登录，如果希望在阿里云上安装支持http请求的nginx服务器，需要给阿里云添加80端口</p><p><img src="../img/aliyun0.png" alt="打开安全组设置"><br><img src="../img/aliyun2.png" alt><br><img src="../img/aliyun3.png" alt><br><img src="../img/aliyun4.png" alt></p><h3 id="2-安装nginx"><a href="#2-安装nginx" class="headerlink" title="2. 安装nginx"></a>2. 安装nginx</h3><p>a) 添加nginx存储库  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br></pre></td></tr></table></figure><p>b) 安装nginx</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><p>c) 运行nginx<br>Nginx不会自行启动。要运行Nginx  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><p>nginx的运行命令:  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl status nginx 查看nginx的状态  </span><br><span class="line">systemctl start/stop/enable/disable nginx 启动/关闭/设置开机启动/禁止开机启动</span><br></pre></td></tr></table></figure><p>d) 系统启动时启动Nginx  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx</span><br></pre></td></tr></table></figure><p>e）如果您正在运行防火墙，请运行以下命令以允许HTTP和HTTPS通信：   </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=http </span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --permanent --zone=public --add-service=https</span><br><span class="line"></span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h3 id="3-nginx目录共享配置"><a href="#3-nginx目录共享配置" class="headerlink" title="3.nginx目录共享配置"></a>3.nginx目录共享配置</h3><p>a) 在contOS目录中确定一个需要共享的文件夹，例如： /home/yuting<br>b) 打开 etc/nginx/nginx.conf 文件，设置server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#共享设置 - 在浏览器中输入服务器ip地址，会展示共享目录的文件列表</span><br><span class="line">root /home/yuting;</span><br><span class="line">location / &#123;</span><br><span class="line">       autoindex on;</span><br><span class="line">       autoindex_exact_size on;</span><br><span class="line">       autoindex_localtime on;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了可以共享文件，还可以自定义页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#自定义服务器页面</span><br><span class="line">location / &#123;</span><br><span class="line">root /home/yuting;</span><br><span class="line">index index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意： 如果出现权限问题，可以修改目录的权限  </p><h1 id="ssh密钥认证"><a href="#ssh密钥认证" class="headerlink" title="ssh密钥认证"></a>ssh密钥认证</h1><p>1.在主机和从机上执行：<code>ssh-keygen</code></p><p>2.在从机上执行:  <code>scp  id_rsa.pub  root@主机地址:~/.ssh/master.pub</code><br>(上面这条指令是将从机上的 id_rsa.pub文件拷贝传递给到主机的.ssh文件夹下，并且命名为’master.pub’)</p><p>3.在主机中的.ssh文件夹中创建authorized_keys文件： <code>touch authorized_keys</code> </p><p>4.修改文件authorized_keys的权限: <code>chmod 600  authorized_keys</code>  </p><p>5.将master.pub放进authorized_keys文件中:  <code>cat master.pub &gt;&gt;  authorized_keys</code></p><p>6.在操作主机的时候，需要主机能够自己免密访问自己就将自己的公钥放在自己的authorized_keys文件中</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了Nginx服务器如何通过git bash安装在linux系统&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="软件安装" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>MySQL配置</title>
    <link href="http://yoursite.com/2019/02/21/MySQL%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2019/02/21/MySQL配置/</id>
    <published>2019-02-21T11:04:07.917Z</published>
    <updated>2019-02-23T08:48:25.853Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了MySQL如何安装在linux系统上<br><a id="more"></a></p><p>MySQL配置  </p><ol><li><p>下载MySQL源安装包: <code>wget http://dev.mysql.com/get/mysql57-community-release-el7-8.noarch.rpm</code>  </p></li><li><p>安装MySQL源: <code>yum localinstall mysql57-community-release-el7-8.noarch.rpm</code></p></li><li><p>安装MySQL:  <code>yum install mysql-community-server</code>  </p></li><li><p>设置开启启动MySQL服务: <code>systemctl enable mysqld</code>  </p></li><li>启动/重启MySQL服务：systemctl restart mysqld  </li><li>查看MySQL初始密码：grep ‘A temporary password’ /var/log/mysqld.log  </li><li>更改MySQL密码：mysqladmin -u root -p’旧密码’ password ‘新密码’<br>这里更改密码出了问题，更改失败，这是因为密码太过简单的原因。有两个接解决方法：</li></ol><p>　　　　方法一：把密码设置复杂点（这是最直接的方法）</p><p>　　　　方法二：关闭mysql密码强度验证(validate_password)</p><p>　　　　　　　　编辑配置文件：<code>vim /etc/my.cnf</code>， 增加这么一行validate_password=off</p><p>　　　　　　　　编辑后重启mysql服务：<code>systemctl restart mysqld</code>  　　　　　　　　  　　　　　　　　  </p><ol start="8"><li>设置mysql能够远程访问:<br>a. 登录进MySQL:  <code>mysql -uroot -p密码</code><br> b. 增加一个用户给予访问权限: <code>grant all privileges on *.* to &#39;root&#39;@&#39;ip地址&#39; identified by &#39;密码&#39; with grant option;</code><br> c. 刷新权限：<code>flush privileges;­</code>  </li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了MySQL如何安装在linux系统上&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="软件安装" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Hexo博客搭建</title>
    <link href="http://yoursite.com/2019/02/21/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2019/02/21/Hexo博客搭建/</id>
    <published>2019-02-21T11:04:07.916Z</published>
    <updated>2019-02-23T08:39:46.814Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何通过Hexo搭建和部署博客<br><a id="more"></a></p><p>Hexo博客搭建   </p><p>###1. 搭建博客<br>使用hexo搭建个人博客前需要先在自己的电脑上装好git和node.js   </p><ol><li>首先在自己的电脑上创建一个空的文件夹’Hexo’  </li><li>在gitbash中终端中通过<code>cd</code>指令进入到刚才创建的文件夹中   </li><li>输入指令 <code>npm install -g hexo</code> 安装Hexo  </li><li>输入指令 <code>hexo init</code> 进行初始化  </li><li>依次输入指令<code>npm install</code> <code>hexo server</code> 启动服务器<br>博客内容发生改变后可以通过<code>hexo clean</code> <code>hexo generate</code> <code>hexo deploy</code> <code>hexo server</code>刷新后重新启动    </li></ol><p>###2. 部署博客  </p><ol><li>在github上创建一个空的仓库，仓库名： <code>用户名.github.io</code>  </li><li><p>修改博客本地仓库中的配置文件（Hexo目录下的_config.yml文件）,在文件末尾添加一下选中内容<br><img src="/Users/yuting/Desktop/Hexo/image1.png" alt>  </p></li><li><p>使用git部署, 输入指令<code>npm install hexo-deployer-git --save</code>  </p></li><li>输入指令<code>hexo clean</code> <code>hexo generate</code> <code>hexo deploy</code> 对博客进行提交</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了如何通过Hexo搭建和部署博客&lt;br&gt;
    
    </summary>
    
      <category term="兴趣爱好" scheme="http://yoursite.com/categories/%E5%85%B4%E8%B6%A3%E7%88%B1%E5%A5%BD/"/>
    
    
      <category term="软件安装" scheme="http://yoursite.com/tags/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
</feed>
