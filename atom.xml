<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>往事如烟随风飘</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-02T10:02:42.172Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>子墨</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>京东购物车(实际应用)</title>
    <link href="http://yoursite.com/2019/03/02/%E4%BA%AC%E4%B8%9C%E8%B4%AD%E7%89%A9%E8%BD%A6/"/>
    <id>http://yoursite.com/2019/03/02/京东购物车/</id>
    <published>2019-03-02T10:02:42.007Z</published>
    <updated>2019-03-02T10:02:42.172Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何使用html、css和js写一个动态的网页<br><a id="more"></a><br>京东购物车网页内容代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">&lt;title&gt;我的购物车-京东商城&lt;/title&gt;</span><br><span class="line">&lt;!--=============js代码==============--&gt;</span><br><span class="line">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/购物车.css&quot;/&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/city.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/购物车.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--顶部导航条</span><br><span class="line">======================================================--&gt;</span><br><span class="line">&lt;div id=&quot;nav&quot;&gt;</span><br><span class="line">&lt;!--左边--&gt;</span><br><span class="line">&lt;ul id=&quot;nav-left&quot;&gt;</span><br><span class="line">&lt;li id=&quot;li1&quot;&gt;&lt;img src=&quot;img/yt_home.png&quot;/&gt;&lt;a href=&quot;#&quot;&gt;京东首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;!--&lt;li id=&quot;li2&quot;&gt;&lt;img src=&quot;img/yt_address.png&quot;/&gt;&lt;font&gt;北京&lt;/font&gt;&lt;/li&gt;--&gt;</span><br><span class="line">&lt;li id=&quot;li2&quot;&gt;</span><br><span class="line">&lt;div id=&quot;selcted-city&quot;&gt;</span><br><span class="line">&lt;img src=&quot;img/yt_address.png&quot;/&gt;&lt;font&gt;北京&lt;/font&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;citys&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;!--右边--&gt;</span><br><span class="line">&lt;ul id=&quot;nav-right&quot;&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;你好,请登录&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;line&quot; style=&quot;color: red;&quot;&gt;免费注册&lt;/a&gt;|&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;line&quot;&gt;我的订单&lt;/a&gt;|&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;line&quot;&gt;我的京东&lt;/a&gt;|&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;line&quot;&gt;京东会员&lt;/a&gt;|&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot; class=&quot;line&quot;&gt;企业采购&lt;/a&gt;|&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;font class=&quot;line&quot;&gt;客户服务&lt;/font&gt;|&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;font class=&quot;line&quot;&gt;网站导航&lt;/font&gt;|&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;#&quot;&gt;手机京东&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--中间购物车内容</span><br><span class="line">======================================================--&gt;</span><br><span class="line">&lt;div id=&quot;content&quot;&gt;</span><br><span class="line">&lt;div id=&quot;search&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;no-goods&quot;&gt;</span><br><span class="line">&lt;div id=&quot;&quot;&gt;</span><br><span class="line">&lt;img src=&quot;img/yt_car.png&quot;/&gt;</span><br><span class="line">&lt;font&gt;购物车内暂时没有商品，登录后将显示您之前加入的商品&lt;/font&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div id=&quot;goods&quot;&gt;</span><br><span class="line">&lt;table cellspacing=&quot;0&quot;&gt;</span><br><span class="line">&lt;tr height=&quot;40px&quot; bgcolor=&quot;#cccccc&quot; &gt;</span><br><span class="line">&lt;td class=&quot;td1&quot;&gt;</span><br><span class="line">&lt;input type=&quot;checkbox&quot; name=&quot;check-all&quot; id=&quot;check-all&quot; value=&quot;&quot; /&gt;</span><br><span class="line">&lt;label for=&quot;check-all&quot;&gt;全选&lt;/label&gt;</span><br><span class="line">&lt;/td&gt;</span><br><span class="line">&lt;td class=&quot;td2&quot;&gt;商品&lt;/td&gt;</span><br><span class="line">&lt;td class=&quot;td3&quot;&gt;单价&lt;/td&gt;</span><br><span class="line">&lt;td class=&quot;td4&quot;&gt;数量&lt;/td&gt;</span><br><span class="line">&lt;td class=&quot;td5&quot;&gt;小计&lt;/td&gt;</span><br><span class="line">&lt;td class=&quot;td6&quot;&gt;操作&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line">&lt;div id=&quot;account&quot;&gt;</span><br><span class="line">&lt;a id=&quot;del&quot; href=&quot;&quot;&gt;删除选中商品&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">&lt;button&gt;结算&lt;/button&gt;</span><br><span class="line">&lt;p&gt;总共选中了&lt;a href=&quot;&quot;&gt;0&lt;/a&gt;件商品 总计:&lt;a href=&quot;&quot;&gt;￥0.00&lt;/a&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--底部</span><br><span class="line">======================================================--&gt;</span><br><span class="line">&lt;div id=&quot;bottom&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p><p>京东购物车内容样式代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">/*通用</span><br><span class="line"> ============================================*/</span><br><span class="line">*&#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*导航条</span><br><span class="line"> ============================================*/</span><br><span class="line">#nav&#123;</span><br><span class="line">/*设置头部导航条的宽度*/</span><br><span class="line">height: 40px;</span><br><span class="line">/*设置导航条的背景颜色*/</span><br><span class="line">background-color: #dddddd;</span><br><span class="line">/*让子标签的内容居中*/</span><br><span class="line">line-height: 40px;</span><br><span class="line">/*让子标签相对于父标签定位*/</span><br><span class="line">position: relative;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*导航条上所有的li标签*/</span><br><span class="line">#nav li&#123;</span><br><span class="line">/*标签浮动靠左*/</span><br><span class="line">float: left;</span><br><span class="line">/*让内容垂直方向居中*/</span><br><span class="line">vertical-align: middle;</span><br><span class="line">/*让子标签相对于父标签定位*/</span><br><span class="line">position: relative;</span><br><span class="line">/*设置字体大小*/</span><br><span class="line">font-size: 13px;</span><br><span class="line">/*设置字体颜色*/</span><br><span class="line">color: #999999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#nav a&#123;</span><br><span class="line">/*标签内容颜色*/</span><br><span class="line">color: #999999;</span><br><span class="line">/*去掉前面的黑点*/</span><br><span class="line">text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line">#nav a:hover&#123;</span><br><span class="line">/*鼠标悬停的样式*/</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#nav ul&#123;</span><br><span class="line">/*去掉列表前的符号*/</span><br><span class="line">list-style: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*=======导航条左边=======*/</span><br><span class="line">#nav-left&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">left: 30px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#selcted-city&#123;</span><br><span class="line">height: 40px;</span><br><span class="line">position: relative;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line">#nav-left img&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">width: 25px;</span><br><span class="line">height: 25px;</span><br><span class="line">top: 50%;</span><br><span class="line">margin-top: -12px;</span><br><span class="line">&#125;</span><br><span class="line">#nav-left a&#123;</span><br><span class="line">margin-left: 25px;</span><br><span class="line">&#125;</span><br><span class="line">#nav-left font&#123;</span><br><span class="line">margin-left: 25px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#nav-left #li1&#123;</span><br><span class="line">margin-right: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*城市标签*/</span><br><span class="line">#citys&#123;</span><br><span class="line">width: 400px;</span><br><span class="line">/*height: 200px;*/</span><br><span class="line">background-color: white;</span><br><span class="line">display: none;</span><br><span class="line">margin-top: 40px;</span><br><span class="line">&#125;</span><br><span class="line">#selcted-city&#123;</span><br><span class="line">padding-right: 20px;</span><br><span class="line">&#125;</span><br><span class="line">#li2:hover #selcted-city&#123;</span><br><span class="line">background-color: white;</span><br><span class="line">border: 1px solid #d1d1d1;</span><br><span class="line">border-bottom: none;</span><br><span class="line">&#125;</span><br><span class="line">#li2:hover #citys&#123;</span><br><span class="line">display: block;</span><br><span class="line">border: 1px solid #d1d1d1;</span><br><span class="line">border-top: none;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#citys&#123;</span><br><span class="line">/*清除浮动*/</span><br><span class="line">overflow: hidden;</span><br><span class="line">position: absolute;</span><br><span class="line">left: 0px;</span><br><span class="line">/*padding-right: 10px;*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#citys div&#123;</span><br><span class="line">float: left;</span><br><span class="line">width: 60px;</span><br><span class="line">padding-left:20px;</span><br><span class="line">/*background-color: seagreen;*/</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">#citys div font&#123;</span><br><span class="line">margin-left: 0px;</span><br><span class="line">padding: 3px;</span><br><span class="line">cursor: pointer;</span><br><span class="line">/*background-color: khaki;*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#citys div font:hover&#123;</span><br><span class="line">color: red;</span><br><span class="line">background-color: #dfdfdf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*=======导航条右边========*/</span><br><span class="line">#nav-right&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">right: 30px;</span><br><span class="line">&#125;</span><br><span class="line">#nav-right li&#123;</span><br><span class="line">margin-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.line&#123;</span><br><span class="line">margin-right: 10px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*内容</span><br><span class="line"> ============================================*/</span><br><span class="line">#content&#123;</span><br><span class="line">/*height: 500px;*/</span><br><span class="line">/*background-color: sandybrown;*/</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*=======搜索=====*/</span><br><span class="line">#content #search&#123;</span><br><span class="line">height: 120px;</span><br><span class="line">background-color: lightsalmon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*=======没有商品=====*/</span><br><span class="line">#content #no-goods&#123;</span><br><span class="line">height: 400px;</span><br><span class="line">background-color: white;</span><br><span class="line">line-height: 400px;</span><br><span class="line">&#125;</span><br><span class="line">#content #no-goods div&#123;</span><br><span class="line">text-align: center;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">#content #no-goods img&#123;</span><br><span class="line">width: 100px;</span><br><span class="line">height: 100px;</span><br><span class="line"></span><br><span class="line">vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line">#content #no-goods font&#123;</span><br><span class="line">color: #505050;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*=======有商品=====*/</span><br><span class="line">#goods&#123;</span><br><span class="line">/*background-color: skyblue;*/</span><br><span class="line">width: 900px;</span><br><span class="line">margin-left: auto;</span><br><span class="line">margin-right: auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*=====商品表格*/</span><br><span class="line">#goods table&#123;</span><br><span class="line">margin-bottom: 20px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">td&#123;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br><span class="line">.td1&#123;</span><br><span class="line">width: 80px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.td2&#123;</span><br><span class="line">width: 300px;</span><br><span class="line">&#125;</span><br><span class="line">.td3&#123;</span><br><span class="line">width: 140px;</span><br><span class="line">&#125;</span><br><span class="line">.td4&#123;</span><br><span class="line">width: 140px;</span><br><span class="line">&#125;</span><br><span class="line">.td5&#123;</span><br><span class="line">width: 160px;</span><br><span class="line">&#125;</span><br><span class="line">.td6&#123;</span><br><span class="line">width: 80px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*商品信息*/</span><br><span class="line">#goods .goods-pic&#123;</span><br><span class="line">width: 80px;</span><br><span class="line">height: 100px;</span><br><span class="line"></span><br><span class="line">vertical-align: middle;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#goods .goodsInfo&#123;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">#goods table p&#123;</span><br><span class="line">text-align: left;</span><br><span class="line">float: left;</span><br><span class="line">width: 220px;</span><br><span class="line">font-size: 12px;</span><br><span class="line">height: 40px;</span><br><span class="line"></span><br><span class="line">position: absolute;</span><br><span class="line">top: 50%;</span><br><span class="line">margin-top: -20px;</span><br><span class="line">margin-left: 80px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*数量*/</span><br><span class="line">.td4 button&#123;</span><br><span class="line">width: 20px;</span><br><span class="line">height: 20px;</span><br><span class="line">&#125;</span><br><span class="line">.td4 input&#123;</span><br><span class="line">width: 20px;</span><br><span class="line">height: 20px;</span><br><span class="line"></span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.td6-del&#123;</span><br><span class="line">color: #999999;</span><br><span class="line">cursor: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*=====商品底部*/</span><br><span class="line">#account #del&#123;</span><br><span class="line">float: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#account button&#123;</span><br><span class="line">float: right;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#account p&#123;</span><br><span class="line">float:  right;</span><br><span class="line">margin-right: 100px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#account&#123;</span><br><span class="line">overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*底部</span><br><span class="line"> ============================================*/</span><br><span class="line">#bottom&#123;</span><br><span class="line">height: 400px;</span><br><span class="line">background-color: lemonchiffon;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>京东购物车内容动态布局代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">$(function()&#123;</span><br><span class="line">//=====================添加城市=====================</span><br><span class="line">var citysNode = $(&apos;#citys&apos;)</span><br><span class="line">for(cityName in cities)&#123;</span><br><span class="line">//创建城市节点</span><br><span class="line">var cityNode = $(&apos;&lt;div&gt;&lt;font&gt;&apos;+cityName+&apos;&lt;/font&gt;&lt;/div&gt;&apos;)</span><br><span class="line">//添加</span><br><span class="line">citysNode.append(cityNode)</span><br><span class="line">&#125;</span><br><span class="line">//默认第一个是白色</span><br><span class="line">$(&apos;#citys font:first&apos;).css(&#123;</span><br><span class="line">&apos;color&apos;:&apos;white&apos;,</span><br><span class="line">&apos;background-color&apos;: &apos;red&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$seletedFontNode = $(&apos;#citys font:first&apos;)</span><br><span class="line">//添加点击事件</span><br><span class="line">$(&apos;#citys&apos;).on(&apos;click&apos;, &apos;div font&apos;, function()&#123;</span><br><span class="line">//更新背景和字体颜色</span><br><span class="line">$(this).css(&#123;</span><br><span class="line">&apos;color&apos;:&apos;white&apos;,</span><br><span class="line">&apos;background-color&apos;: &apos;red&apos;</span><br><span class="line">&#125;)</span><br><span class="line">$seletedFontNode.css(&#123;</span><br><span class="line">&apos;color&apos;:&apos;#999999&apos;,</span><br><span class="line">&apos;background-color&apos;: &apos;rgba(0,0,0,0)&apos;</span><br><span class="line">&#125;)</span><br><span class="line">$seletedFontNode = $(this)</span><br><span class="line">//更新选中的城市</span><br><span class="line">$(&apos;#selcted-city font&apos;).text(this.innerText)</span><br><span class="line">//隐藏城市选项</span><br><span class="line">$(&apos;#citys&apos;).css(&apos;display&apos;,&apos;none&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">$(&apos;#li2&apos;).on(&apos;mouseover&apos;, function()&#123;</span><br><span class="line">$(&apos;#citys&apos;).css(&apos;display&apos;,&apos;block&apos;)</span><br><span class="line">&#125;)</span><br><span class="line">$(&apos;#li2&apos;).on(&apos;mouseleave&apos;, function()&#123;</span><br><span class="line">$(&apos;#citys&apos;).css(&apos;display&apos;,&apos;none&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//=====================购物车商品=====================</span><br><span class="line">//1.请求商品数据</span><br><span class="line">allGoods = [</span><br><span class="line">&#123;</span><br><span class="line">big_img:&apos;img/a1.jpg&apos;,</span><br><span class="line">price: 245,</span><br><span class="line">description:&apos;海澜之家/Heilan Home春装商务白衬衫男修身HNCAD3A067Y 漂白(69) 漂&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">big_img:&apos;img/a2.jpg&apos;,</span><br><span class="line">price: 123,</span><br><span class="line">description:&apos;海澜之家/Heilan Home春装商务白衬衫男修身HNCAD3A067Y 漂白(69) 漂&apos;</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">big_img:&apos;img/a3.jpg&apos;,</span><br><span class="line">price: 67,</span><br><span class="line">description:&apos;海澜之家/Heilan Home春装商务白衬衫男修身HNCAD3A067Y 漂白(69) 漂&apos;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//2.创建商品对应的标签</span><br><span class="line">for(var i=0; i&lt;allGoods.length;i++)&#123;</span><br><span class="line">//拿到每个商品数据</span><br><span class="line">goodsObj = allGoods[i]  </span><br><span class="line">//给商品创建对应的节点</span><br><span class="line">$td1 = $(&apos;&lt;td class=&quot;td1&quot;&gt;&lt;input type=&quot;checkbox&quot;/&gt;&lt;/td&gt;&apos;)</span><br><span class="line">$td2 = $(&apos;&lt;td class=&quot;td2 goodsInfo&quot;&gt;&lt;img class=&quot;goods-pic&quot; src=&apos;+goodsObj[&apos;big_img&apos;]+&apos;/&gt;&lt;p&gt;&apos;+goodsObj[&apos;description&apos;]+&apos;&lt;/p&gt;&lt;/td&gt;&apos;)</span><br><span class="line">$td3 = $(&apos;&lt;td class=&quot;td3&quot;&gt;￥&apos;+goodsObj[&apos;price&apos;]+&apos;.00&lt;/td&gt;&apos;)</span><br><span class="line">$td4 = $(&apos;&lt;td class=&quot;td4&quot;&gt;&lt;button id=&quot;down&quot;&gt;-&lt;/button&gt;&lt;input value=&quot;1&quot;/&gt;&lt;button id=&quot;up&quot;&gt;+&lt;/button&gt;&lt;/td&gt;&apos;)</span><br><span class="line">$td5 = $(&apos;&lt;td class=&quot;td5&quot;&gt;￥&apos;+goodsObj[&apos;price&apos;]+&apos;.00&lt;/td&gt;&apos;)</span><br><span class="line">$td6 = $(&apos;&lt;td class=&quot;td6 td6-del&quot;&gt;删除&lt;/td&gt;&apos;)</span><br><span class="line">$trNode = $(&apos;&lt;tr&gt;&lt;/tr&gt;&apos;)</span><br><span class="line">$trNode.append($td1)</span><br><span class="line">$trNode.append($td2)</span><br><span class="line">$trNode.append($td3)</span><br><span class="line">$trNode.append($td4)</span><br><span class="line">$trNode.append($td5)</span><br><span class="line">$trNode.append($td6)</span><br><span class="line">//插入表格</span><br><span class="line">$(&apos;#goods table&apos;).append($trNode)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//绑定事件</span><br><span class="line">$(&apos;.td4 #down&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">var inputNode = $(this).parent().children()[1]</span><br><span class="line">var num = $(inputNode).val()</span><br><span class="line">if(num == 1)&#123;</span><br><span class="line">alert(&apos;商品至少一个!&apos;)</span><br><span class="line">return</span><br><span class="line">&#125;</span><br><span class="line">//数量减1</span><br><span class="line">num--</span><br><span class="line">$(inputNode).val(num)</span><br><span class="line">//重新计算小计</span><br><span class="line">var $totalNode = $(this).parent().next()   //总计</span><br><span class="line">var $priceNode = $(this).parent().prev()   //单价</span><br><span class="line">var total = Number($priceNode.text().slice(1,10000))*num</span><br><span class="line">$totalNode.text(&apos;￥&apos;+ total+&apos;.00&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">$(&apos;.td4 #up&apos;).on(&apos;click&apos;, function()&#123;</span><br><span class="line">var inputNode = $(this).parent().children()[1]</span><br><span class="line">var num = $(inputNode).val()</span><br><span class="line"></span><br><span class="line">//数量减1</span><br><span class="line">num++</span><br><span class="line">$(inputNode).val(num)</span><br><span class="line">//重新计算小计</span><br><span class="line">var $totalNode = $(this).parent().next()   //总计</span><br><span class="line">var $priceNode = $(this).parent().prev()   //单价</span><br><span class="line">var total = Number($priceNode.text().slice(1,10000))*num</span><br><span class="line">$totalNode.text(&apos;￥&apos;+ total+&apos;.00&apos;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>随机颜色代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//随机颜色</span><br><span class="line">function randomColor()&#123;</span><br><span class="line">var r = parseInt(Math.random()*255)</span><br><span class="line">var g = parseInt(Math.random()*255)</span><br><span class="line">var b = parseInt(Math.random()*255)</span><br><span class="line">//&apos;rgb(23, 45, 89)&apos;</span><br><span class="line">return &apos;rgb(&apos;+r+&apos;,&apos;+g+&apos;,&apos;+b+&apos;)&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了如何使用html、css和js写一个动态的网页&lt;br&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Ajax基础</title>
    <link href="http://yoursite.com/2019/03/02/Ajax%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/03/02/Ajax基础/</id>
    <published>2019-03-02T10:01:02.880Z</published>
    <updated>2019-03-02T10:01:09.952Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了web前端中的行为标准js(javascript)的网络请求Ajax相关的知识<br><a id="more"></a></p><p>###1.什么是Ajax<br><strong>解释</strong>：<br><strong>A</strong>：asynchronous<br><strong>ja</strong>：javascript<br><strong>x</strong>：xml (异步js+xml)<br><strong>功能</strong>：专门提供js中的网络请求功能(http请求)</p><p>###2.Ajax的使用<br><strong>a</strong>.\$.get/post(url,data,fn,type)<br><strong>功能</strong>：获取url接口提供的数据（get的接口），即请求数据<br><strong>说明</strong>：<br><strong>url(请求地址)</strong>：字符串（？之前的内容）<br><strong>data(参数)</strong>：对象（？后面的内容用对象的格式书写）<br><strong>fn(回调函数(参数))</strong>:请求结束后，调用函数，必须有一个参数，参数就是请求的数据<br><strong>type(数据类型)</strong>：数据是字符串,类型例如: json,html, text…<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//http://api.tianapi.com/meinv/key=772a81a51ae5c780251b1f98ea431b84&amp;num=10</span><br><span class="line">function getData()&#123;</span><br><span class="line">$.get(&apos;http://api.tianapi.com/meinv/&apos;,&#123;key:&apos;772a81a51ae5c780251b1f98ea431b84&apos;, num:30&#125;,function(result)&#123;</span><br><span class="line">var newsLists = result[&apos;newslist&apos;]</span><br><span class="line">for(i=0;i&lt;newsLists.length;i++)&#123;</span><br><span class="line">news = newsLists[i]</span><br><span class="line">imgNode = $(&apos;&lt;img style=&quot;width: 200px; height: 200px;&quot;/&gt;&apos;)</span><br><span class="line">imgNode.attr(&apos;src&apos;, news[&apos;picUrl&apos;])</span><br><span class="line">$(&apos;body&apos;).append(imgNode)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>b</strong>.\$.ajax({url:请求地址, type:’get’/‘post’, async:是否异步, success:回调函数, data:参数对象})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">type:&quot;get&quot;,</span><br><span class="line">url:&quot;http://api.tianapi.com/meinv/&quot;,</span><br><span class="line">data:&#123;key:&apos;772a81a51ae5c780251b1f98ea431b84&apos;, num:10&#125;,</span><br><span class="line">async:true,</span><br><span class="line">success:function(result)&#123;</span><br><span class="line">console.log(result)</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了web前端中的行为标准js(javascript)的网络请求Ajax相关的知识&lt;br&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JQ基础</title>
    <link href="http://yoursite.com/2019/03/02/JQ%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/03/02/JQ基础/</id>
    <published>2019-03-02T09:59:19.333Z</published>
    <updated>2019-03-02T09:59:36.554Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了web前端中的行为标准JS的第三方库JQuery的使用<br><a id="more"></a></p><p>#什么是jQuery<br><strong>实质</strong>：对js的封装<br><strong>目的</strong>：为了更方便的使用js<br><strong>位置</strong>：js的代码写在哪儿，jq代码就可以写在哪儿<strong>前提</strong>：使用之前必须导入jQuery</p><p>###导入JQuery</p><p>####方式一：导入本地JQuery<br><strong>前提</strong>：放置JQuery文件到js文件夹中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>####方式二：导入CDN服务器上的jQuery<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>#####$ -&gt; 代表jQuery对象<br>onload -&gt; js中<br><strong>定义</strong>：网页加载完成对应的事件<br><strong>前提</strong>：标签加载完成和网络请求完成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">window.onload = function()&#123;</span><br><span class="line">pNode = document.getElementById(&apos;p1&apos;)</span><br><span class="line">pNode.innerText = &apos;hello jQuery！&apos;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line">**\$(document).ready(函数)**</span><br><span class="line">**前提**：网页中标签加载完成</span><br><span class="line">**\$(匿名函数)**</span><br><span class="line">**前提**：网页中标签加载完成</span><br></pre></td></tr></table></figure></p><p>$(document).ready(function(){<br>    pNode2 = document.getElementById(‘p2’)<br>    pNode2.innerText = ‘你好 jQuery’<br>})</p><p>//相当于上面的写法<br>$(function(){<br>    pNode2 = document.getElementById(‘p2’)<br>    pNode2.innerText = ‘你好 jQuery’<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">###节点操作</span><br><span class="line">#####1.获取节点</span><br><span class="line">**语法**: $(&apos;选择器&apos;)</span><br><span class="line">**返回值**：jQuery的节点对象</span><br><span class="line">**说明**：</span><br><span class="line">**选择器**：与CSS的选择器相同</span><br></pre></td></tr></table></figure></p><p>console.log($(‘#img1’))<br>console.log($(‘.c1’))<br>console.log($(‘p’))<br>console.log($(‘div p’))<br>console.log($(‘#p1,a’))<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#####+</span><br><span class="line">```</span><br><span class="line">console.log($(&apos;p+a&apos;))  //选中所有紧跟着p标签的a标签</span><br></pre></td></tr></table></figure></p><p>#####~*<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log($(&apos;#p3~*&apos;))   //选中和id值是p3的标签后面同级的所有标签</span><br></pre></td></tr></table></figure></p><p>#####~a<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log($(&apos;#p3~a&apos;))   //选中和id值是p3的标签后面同级的所有的a标签</span><br></pre></td></tr></table></figure></p><p>#####:first<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">console.log($(&apos;p:first&apos;))  //选中当前页面中的第一个p标签</span><br><span class="line">console.log($(&apos;div p:first&apos;))   //选中所有div标签中的第一个p标签</span><br></pre></td></tr></table></figure></p><p>#####:last<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log($(&apos;p:last&apos;))   //选中当前页面中的最后一个p标签</span><br></pre></td></tr></table></figure></p><p>#####*:first-child<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">console.log($(&apos;div *:first-child&apos;))   //选中div标签中的第一个子标签</span><br><span class="line">```</span><br><span class="line">#####2.创建节点</span><br><span class="line">**\$(&apos;html标签语法&apos;)**</span><br></pre></td></tr></table></figure></p><p>imageNode = $(“&lt;img src=’img/thumb-1.jpg’/ title=’图标’&gt;”)   //创建一个img标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####3.添加节点</span><br><span class="line">标签.append(子标签)</span><br></pre></td></tr></table></figure></p><p>$(‘body’).append(imageNode)      //在body的最后添加一个子标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标签.prepend(子标签)</span><br></pre></td></tr></table></figure></p><p>$(‘body’).prepend($(‘<input placeholder="请输入账号">‘))    //在body的最前面插入一个子标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标签.before(子标签)</span><br></pre></td></tr></table></figure></p><p>$(‘#img1’).before($(‘<button>before</button>‘))   //在id是img1的标签的前面添加一个按钮标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标签.after(子标签)</span><br></pre></td></tr></table></figure></p><p>$(‘#img1’).after($(‘<button>after</button>‘))    //在id是img1的标签的后面添加一个按钮标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####4.删除节点</span><br><span class="line">标签.remove()</span><br></pre></td></tr></table></figure></p><p>$(‘#img1’).remove()     //标签.remove()  - 删除指定标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标签.empty()</span><br></pre></td></tr></table></figure></p><p>$(‘div’).empty()   //标签.empty()   - 清除指定标签中的内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">###属性操作</span><br><span class="line">**1.获取普通属性**</span><br><span class="line">标签.attr(属性名)</span><br><span class="line">**说明**：这儿的属性名不包括innerHTML,innerText，value</span><br></pre></td></tr></table></figure></p><p>console.log($(‘#img2’).attr(‘title’))<br>console.log($(‘#img2’).attr(‘src’))<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**2.修改/增加普通属性**</span><br><span class="line">标签.attr(属性名,值)</span><br></pre></td></tr></table></figure></p><p>$(‘#img2’).attr(‘src’, ‘img/thumb-3.jpg’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**3.特殊属性**</span><br><span class="line">a.innerHTML（标签内容属性)</span><br><span class="line">**语法**：标签.html()</span><br></pre></td></tr></table></figure></p><p>console.log($(‘#div’).html())<br>$(‘#div’).html(‘我是新的div’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b.innerText (标签文本内容)</span><br><span class="line">**语法**：标签.text()</span><br></pre></td></tr></table></figure></p><p>console.log($(‘#div’).text())<br>$(‘#div’).text(‘我是新的div2’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c.value (单标签内容)</span><br><span class="line">**语法**：标签.val()</span><br></pre></td></tr></table></figure></p><p>console.log($(‘#user’).val())<br>$(‘#user’).val(‘李四’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">d.class</span><br><span class="line">**语法**：标签.addClass(类名)</span><br><span class="line">**作用**：给标签添加class值</span><br></pre></td></tr></table></figure></p><p>$(‘p’).addClass(‘color’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**语法**：标签.removeClass(类名)</span><br><span class="line">**作用**：移除指定的class值</span><br></pre></td></tr></table></figure></p><p>$(‘p’).removeClass(‘color’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**4.样式属性**</span><br><span class="line">标签.css(样式属性名)</span><br><span class="line">**作用**：获取样式属性值</span><br><span class="line">标签.css(样式属性名, 值)</span><br><span class="line">**作用**：设置样式</span><br><span class="line">标签.css(&#123;属性名:属性值, 属性名:属性值 ...&#125;)</span><br><span class="line">**作用**：同时设置多种样式属性</span><br></pre></td></tr></table></figure></p><p>$(‘p’).css(‘color’, ‘slateblue’)<br>$(‘p’).css(‘font-size’, ‘20px’)<br>$(‘p’).css({<br>    ‘color’:’red’,<br>    ‘font-size’:’30px’<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">###jQuery同时选中多个标签</span><br><span class="line">**作用**：操作选中的jQuery对象，就是同时操作被选中jQuery对象的所有对象标签</span><br></pre></td></tr></table></figure></p><p>$(‘p’).css(‘color’, ‘seagreen’)   // 同时设置所有p标签的文字颜色<br>console.log($(‘p’))<br>//同时给所有p标签添加点击事件<br>$(‘p’).on(‘click’, function(evt){<br>    //注意:函数中是this都是js对象<br>    console.log(this)<br>    //通过js的方式获取内容<br>    console.log(this.innerText)<br>    //通过jq的方式获取内容<br>    //js转jq： $(js对象)  -  将js对象转换成jq对象<br>    console.log($(this).text())<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#####如何将js对象转换成jq对象</span><br><span class="line">**语法**：\$(js对象)</span><br><span class="line">**作用**：将js对象转换成jq对象</span><br><span class="line">**注意**：当一个标签不止一个时，转换成jq对象后,会返回容器型的jq对象，但是里面的元素标签还是js标签</span><br></pre></td></tr></table></figure></p><p>//注意: 单独取出来的标签都是js对象<br>pNodes = $(‘p’)<br>//取指定的标签<br>console.log(pNodes[0])<br>console.log(pNodes[1])<br>//遍历所有标签<br>for(i=0;i&lt;pNodes.length;i++){<br>    pNode = pNodes[i]<br>    //使用js的方式操作标签<br>    pNode.style.color = ‘red’<br>    //使用jq的方式操作标签<br>    $(pNode).css(‘font-size’, ‘20px’)<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">###事件绑定</span><br><span class="line">**语法**：标签.on(事件名, 回调函数)</span><br><span class="line">**功能**：指定标签发生指定事件后，调用回调函数</span><br><span class="line">**作用**：功能等同于js的addEventListener</span><br><span class="line">**说明**：函数中的this指向的是js对象</span><br></pre></td></tr></table></figure></p><p>$(‘#btn1’).on(‘click’, function(evt){<br>    alert(‘点击按钮’)<br>    console.log(this, evt.offsetX, evt.offsetY)<br>})<br><code>`</code>    </p><pre><code>//(推荐使用！！)//b.标签.on(事件名, 选择器, 回调函数)  - 给父标签添加事件，将事件传递给选择器选中的子标签,函数中的this是子标签//标签 - 父标签//选择器 - 在父标签中去选中子标签$(&apos;#box&apos;).on(&apos;click&apos;, &apos;div&apos;, function(evt){    console.log(this)    alert(this.innerText)})</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了web前端中的行为标准JS的第三方库JQuery的使用&lt;br&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JS应用</title>
    <link href="http://yoursite.com/2019/03/02/JS%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/03/02/JS应用/</id>
    <published>2019-03-02T09:57:21.331Z</published>
    <updated>2019-03-02T09:57:30.306Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了web前端中的行为标准js(javascript)如何进行实际应用<br><a id="more"></a></p><p>#一、属性操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p id=&quot;p1&quot;&gt;我是段落&lt;a id=&quot;a1&quot; href=&quot;https://www.baidu.com&quot;&gt;必读&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">&lt;img src=&quot;img/luffy.jpg&quot;/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p><p>#####1.节点属性的增删改查</p><p>######a.查<br><strong>1.</strong>节点.属性<br>标签相关属性:<br><strong>innerHTML</strong><br><strong>作用</strong>：获取标签内容(包含双标签内容中的其他标签和文件)<br><strong>innerText</strong><br><strong>作用</strong>：标签中的文本内容<br>href,src,text,value,id等,根据标签属性直接获取<br><strong>注意</strong>:标签中的class属性在节点中对应的是className<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alert(pNode.innerHTML)</span><br><span class="line">alert(pNode.innerText)</span><br><span class="line">alert(aNode.href)</span><br><span class="line">alert(imgNode.src)</span><br></pre></td></tr></table></figure></p><p>样式相关属性:<br>可以通过style来获取样式相关属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">aNode.style.color   //获取字体颜色</span><br><span class="line">aNode.style.display   //获取display的值</span><br></pre></td></tr></table></figure></p><p><strong>2.</strong>节点.getAttributse(属性名)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alert(aNode.getAttribute(&apos;href&apos;))</span><br><span class="line">alert(aNode.getAttribute(&apos;style&apos;))</span><br></pre></td></tr></table></figure></p><p>######b.改、增<br><strong>1.</strong>节点.属性 = 新值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">imgNode.src = &apos;img/aaa.ico&apos;</span><br><span class="line">imgNode.title = &apos;路飞&apos;</span><br><span class="line">pNode.style.color = &apos;rgb(255, 0, 0)&apos;  </span><br><span class="line">pNode.ytIndex = 0    //添加属性</span><br><span class="line">alert(pNode.ytIndex)</span><br></pre></td></tr></table></figure></p><p><strong>2.</strong>节点.setAttribute(属性名, 新值)<br><strong>注意</strong>：inner相关的无效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">imgNode.setAttribute(&apos;src&apos;, &apos;img/jd_logo.ico&apos;)</span><br><span class="line">```</span><br><span class="line">######c.删</span><br><span class="line">**节点.removeAttribute(属性名)**</span><br></pre></td></tr></table></figure></p><p>imgNode.removeAttribute(‘src’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#二、BOM操作</span><br><span class="line">**1.BOM** </span><br><span class="line">**解释**：浏览器对象模型(browser object model)</span><br><span class="line">js提供了一个全局的对象window -&gt; 浏览器</span><br><span class="line">js中声明的所有的全局变量其实都是添加给window的属性</span><br></pre></td></tr></table></figure></p><p>var a = 100<br>console.log(a, window.a)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">**2.基本操作**</span><br><span class="line">**a.open()** </span><br><span class="line">**作用**：打开一个新的窗口</span><br><span class="line">**输出**：返回被打开的窗口对应的对象</span><br><span class="line">**语法**：</span><br><span class="line">open() - 空白窗口</span><br><span class="line">open(url) - 在新窗口打开指定网页</span><br><span class="line">open(url,&apos;&apos;,&apos;width=300,height=200&apos;)</span><br><span class="line">**说明**：打开新的窗口并且设置窗口的宽度和高度</span><br></pre></td></tr></table></figure></p><p>newWindow = window.open(‘01车牌号限行案例.html’,’’, ‘width=300,height=200’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**b.moveTo(x,y)**</span><br><span class="line">**作用**：移动窗口</span><br></pre></td></tr></table></figure></p><p>newWindow.moveTo(100, 100)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**c.resizeTo(x,y)</span><br><span class="line">**作用**：设置窗口的大小</span><br></pre></td></tr></table></figure></p><p>newWindow.resizeTo(500, 600)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**d.浏览的宽高**</span><br><span class="line">inner是内容的宽度和高度</span><br><span class="line">outer是浏览器的宽度和高度</span><br></pre></td></tr></table></figure></p><p>console.log(‘=====:’,newWindow.innerWidth, newWindow.innerHeight)<br>console.log(‘!!!!!:’,newWindow.outerWidth, newWindow.outerHeight)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">**3.弹框**</span><br><span class="line">**a**.alert(提示信息)</span><br><span class="line">**说明**：提示框，只有提示信息和确定按钮</span><br><span class="line">**b**.confirm(提示信息)</span><br><span class="line">**说明**：提示框，有确定和取消按钮</span><br><span class="line">**返回值**：返回是布尔值，true-&gt;点击确定，false-&gt;点击取消</span><br></pre></td></tr></table></figure></p><p>result = confirm(‘是否确定删除?’)<br>console.log(result)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**c**.prompt</span><br><span class="line">**说明**：提示框，有一个输入框，一个确定按钮和取消按钮; </span><br><span class="line">**返回值**：返回值是字符串，点击确定返回值是输入框中的内容，点击取消返回值是null</span><br></pre></td></tr></table></figure></p><p>result = prompt(‘提示信息’, ‘输入框中的默认值’)<br>console.log(result)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#三、计时事件</span><br></pre></td></tr></table></figure></p><p></p><p id="p1">5</p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">1.定时器</span><br><span class="line">**a.开启定时器**</span><br><span class="line">**1.setInterval(函数,时间)**</span><br><span class="line">**作用**：每隔指定的时间调用一次指定的函数</span><br><span class="line">**返回值**：定时器对象</span><br><span class="line">**2.setTimeout(函数,时间)**</span><br><span class="line">**作用**：隔指定时间后调用一次指定函数</span><br><span class="line">**注意**：函数只会调用一次，相当于定时炸弹</span><br><span class="line">**说明**：</span><br><span class="line">函数 - 可以是函数名，也可以是匿名函数</span><br><span class="line">时间 - 单位是毫秒</span><br><span class="line">**b.停止定时**</span><br><span class="line">**clearInterval(定时器对象)**</span><br><span class="line">**作用**：停止指定的定时器</span><br><span class="line">**clearTimeout(定时器对象)**</span><br><span class="line">**作用**：停止指定的定时器</span><br><span class="line">**函数传递方式**</span><br></pre></td></tr></table></figure><p></p><p>//方案一：先声明函数，在传递函数<br>function timeAction(){<br>    console.log(‘aaa’)<br>}<br>timer1 = setInterval(timeAction, 1000)</p><p>//方案二: 直接传递匿名函数<br>timer2 = setInterval(function(){<br>    console.log(‘bbb’)<br>},1000)<br>timer22 = setTimeout(function(){<br>    console.log(‘时间到!’)<br>},5000)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line">//练习：数字递增</span><br><span class="line">num = 5</span><br><span class="line">pNode = document.getElementById(&apos;p1&apos;)</span><br><span class="line">timer3 = setInterval(function()&#123;</span><br><span class="line">num--</span><br><span class="line">pNode.innerText = num</span><br><span class="line">if(num == 0)&#123;</span><br><span class="line">//停止定时</span><br><span class="line">clearInterval(timer3)</span><br><span class="line">&#125;</span><br><span class="line">&#125;,1000)</span><br></pre></td></tr></table></figure></p><p>#四、事件绑定<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">#box1&#123;</span><br><span class="line">width: 150px;</span><br><span class="line">height: 150px;</span><br><span class="line">background-color: lawngreen;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button onclick=&quot;alert(&apos;按钮点击&apos;)&quot;&gt;按钮0&lt;/button&gt;</span><br><span class="line">&lt;button onclick=&quot;buttonAction()&quot;&gt;按钮1&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;btn2&quot;&gt;按钮2&lt;/button&gt;</span><br><span class="line">&lt;button id=&quot;btn3&quot;&gt;按钮3&lt;/button&gt;</span><br><span class="line">&lt;div id=&quot;box1&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></p><p>#####1.事件三要素: 事件源、事件、事件驱动程序<br>示例：<br>小明打狗，狗咬他   –  <strong>事件源</strong>：狗   <strong>事件</strong>：打狗    <strong>事件驱动程序</strong>: 狗咬他<br>小明打狗，他爸打他  –   <strong>事件源</strong>：狗   <strong>事件</strong>：打狗    <strong>事件驱动程序</strong>: 他爸打他<br>点击按钮，跳转到其他页面  – <strong>事件源</strong>: 按钮   <strong>事件</strong>:点击按钮   <strong>事件驱动程序</strong>:跳转到其他页面</p><p>#####2.绑定事件<br><strong>a.直接通过标签绑定事件</strong><br>1.直接在事件对应的属性里写js代码<br>2.直接在事件对应的属性里写调用函数,这个函数中的this是window<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function buttonAction()&#123;</span><br><span class="line">console.log(this)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>b.通过节点绑定事件</strong><br>给节点的事件属性赋函数或者匿名函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//函数中this就是事件源(当前被点击的按钮)</span><br><span class="line">btnNode2 = document.getElementById(&apos;btn2&apos;)</span><br><span class="line">//给点击事件绑定函数</span><br><span class="line">btnNode2.onclick = buttonAction</span><br><span class="line">//给鼠标进入事件绑定函数</span><br><span class="line">btnNode2.onmouseover = function()&#123;</span><br><span class="line">this.style.fontSize = &apos;30px&apos;</span><br><span class="line">&#125;</span><br><span class="line">btnNode2.onmouseover = function(evt)&#123;</span><br><span class="line">this.style.color = &apos;red&apos;</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line">**c.通过节点绑定事件** </span><br><span class="line">**节点.addEventListener(事件名, 事件驱动程序)**</span><br><span class="line">**事件名**: 去掉事件名前面的on, 例如onclick -&gt; click</span><br><span class="line">这种方式绑定事件，可以给同一个事件源的同一个事件绑定不同的驱动程序</span><br><span class="line">this是事件源, evt是事件对象</span><br></pre></td></tr></table></figure></p><p>btnNode3 = document.getElementById(‘btn3’)<br>btnNode3.addEventListener(‘click’, function(evt){<br>    console.log(this)<br>        //alert(‘按钮3被点击’)<br>    this.style.color = ‘red’<br>})<br>btnNode3.addEventListener(‘click’, function(evt){<br>    console.log(evt)<br>    this.style.fontSize = ‘30px’<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">驱动程序中的evt参数,代表事件对象</span><br></pre></td></tr></table></figure></p><p>boxNode1 = document.getElementById(‘box1’)<br>boxNode1.addEventListener(‘click’, function(evt){<br>    if(evt.offsetX &lt;= 75){<br>        this.style.backgroundColor = ‘red’<br>    }else{<br>        this.style.backgroundColor = ‘yellow’<br>    }<br>})<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**补充：js中的随机数**</span><br></pre></td></tr></table></figure></p><p>console.log(Math.random())    //随机数0-1(小数)<br>console.log(parseInt(Math.random()<em>255))    //0-100的整数<br>console.log(parseInt(Math.random()</em>90+10))  //10-100的整数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#####事件冒泡和事件捕获</span><br><span class="line">**事件冒泡**：子标签上产生的事件会传递给父标签</span><br><span class="line">**事件捕获**：让事件不在传递给父标签，即阻止事件冒泡</span><br><span class="line">**语法**：事件.stopPropagation()</span><br></pre></td></tr></table></figure></p><p><div id="div1"><br>    <div id="div2"><br>        <div id="div3"><br>        </div><br>    </div><br></div><br>//获取节点<br>divNode1 = document.getElementById(‘div1’)<br>divNode2 = document.getElementById(‘div2’)<br>divNode3 = document.getElementById(‘div3’)<br>//绑定事件<br>divNode1.addEventListener(‘click’, function(){<br>    alert(‘div1被点击’)<br>})<br>divNode2.addEventListener(‘click’, function(evt){<br>    alert(‘div2被点击’)<br>    evt.stopPropagation()<br>})<br>divNode3.addEventListener(‘click’, function(evt){<br>    alert(‘div3被点击’)<br>    //让evt事件对象不传递个当期标签的父标签<br>    evt.stopPropagation()<br>})<br><code>`</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了web前端中的行为标准js(javascript)如何进行实际应用&lt;br&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JS基础(二)</title>
    <link href="http://yoursite.com/2019/03/02/JS%E5%9F%BA%E7%A1%80(%E4%BA%8C)/"/>
    <id>http://yoursite.com/2019/03/02/JS基础(二)/</id>
    <published>2019-03-02T09:56:18.976Z</published>
    <updated>2019-03-02T09:56:19.124Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了web前端中的行为标准js(javascript)基础相关的知识<br><a id="more"></a></p><h1 id="一、变量作用域"><a href="#一、变量作用域" class="headerlink" title="一、变量作用域"></a>一、变量作用域</h1><p>###a.全局变量<br><strong>适用范围</strong>：声明开始到文件结束<strong></strong>声明位置<strong>：</strong>a<strong>.声明在函数外部的变量</strong>b<strong>.直接声明在函数内的变量（不加var）</strong>注意**：后面的其他的script标签中也可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a100 = 10</span><br><span class="line">var a200 = 100</span><br><span class="line">```</span><br><span class="line">###b.局部变量</span><br><span class="line">**适用范围**：声明开始到函数结束</span><br><span class="line">**声明位置**：通过var关键字声明在函数里面的变量</span><br></pre></td></tr></table></figure></p><p>function func2(){<br>    //b200是局部变量<br>    var b200 = 200<br>    console.log(b200)<br>    }<br>func2()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#二、字符串</span><br><span class="line">###a.加法运算： 做字符串拼接操作</span><br><span class="line">**注意**：js中支持字符串和其他数据相加</span><br></pre></td></tr></table></figure></p><p>str1 = ‘abc’<br>str2 = ‘hello’<br>console.log(str1+str2)   //abchello<br>console.log(str1+100)     //abc100<br>console.log(str1+[1,2,3])  //abc1,2,3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">###b.比较运算: &gt;, &lt;, &gt;=, &lt;=,==, ===, !=, !== </span><br><span class="line">**1.比较相等**</span><br></pre></td></tr></table></figure></p><p>console.log(‘abc’==’abc’)   //true<br>console.log(‘abc’==’bac’)   //false<br>console.log(100==’100’)   //true<br>console.log(100===’100’)  //false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**2.比较大小**</span><br><span class="line">**实质**：比较每一对字符的编码值</span><br></pre></td></tr></table></figure></p><p>console.log(‘abc’ &gt; ‘bd’)  //false<br>console.log(‘z’ &gt; ‘shjsjhsjasss’)   //true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">###c.字符串长度</span><br><span class="line">**用法**：字符串.length</span><br><span class="line">**输出**：数字</span><br></pre></td></tr></table></figure></p><p>str2 = ‘adfdfdf’<br>console.log(str2.length)  // 7<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">###d.相关方法</span><br><span class="line">####创建字符串对象</span><br></pre></td></tr></table></figure></p><p>str3 = new String(‘abc’)<br>console.log(str3)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####1.字符串.big()</span><br><span class="line">**作用**：产生一个big标签，并且标签中的内容就是字符串的值</span><br></pre></td></tr></table></figure></p><p>newStr = str3.big()<br>console.log(str3, newStr)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####2.字符串.charAt(下标)</span><br><span class="line">**作用**：获取指定下标对应的字符; 相当于: 字符串[下标]</span><br></pre></td></tr></table></figure></p><p>console.log(‘hello’.charAt(0))   //h<br>console.log(‘hello’[1])    //e<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####3.字符串.charCodeAt(下标)</span><br><span class="line">**作用**：获取指定下标对应的字符的编码(js中的字符采用的也是unicode编码)</span><br></pre></td></tr></table></figure></p><p>console.log(‘hello’.charCodeAt(0))   //104<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####4.字符串.concat(数据1,数据2,....)</span><br><span class="line">**作用**：将字符串和多个数据依次连接在在一起产生一个新的字符串(相当于+的功能)</span><br></pre></td></tr></table></figure></p><p>console.log(‘abc’.concat(123, ‘aaa’))   //abc123aaa<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####5.字符串1.endsWith(字符串2)</span><br><span class="line">**作用**：判断字符串1是否以字符串2结尾</span><br></pre></td></tr></table></figure></p><p>console.log(‘hello’.endsWith(‘llo’))   //true<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####6.字符串1.indexOf(字符串2)</span><br><span class="line">**作用**：获取字符串2在字符串1中第一次出现的位置</span><br></pre></td></tr></table></figure></p><p>console.log(‘abcbaab’.indexOf(‘b’))  //1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####7.字符串1.lastIndexOf(字符串2)</span><br><span class="line">**作用**：获取字符串2在字符串1中最后一次出现的位置</span><br></pre></td></tr></table></figure></p><p>console.log(‘abcbaab’.lastIndexOf(‘b’))    //0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#####8.字符串.match(正则表达式)</span><br><span class="line">**作用**：正则匹配一个字符串，匹配成功后返回</span><br><span class="line">**注意:**js中正则写在两个//之间</span><br></pre></td></tr></table></figure></p><p>re = /\d{3}/<br>result = ‘237abc’.match(re)<br>console.log(result, result[0], result.index)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####9.字符串.repeat(数字)</span><br><span class="line">**作用**：指定的字符串重复出现指定次数产生一个新的字符串(相当于python中的*)</span><br></pre></td></tr></table></figure></p><p>console.log(‘abc’.repeat(2))  //abcabc<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####10.字符串1.replace(正则表达式,字符串2)</span><br><span class="line">**作用**：将字符串1中第一个满足正则表达式的子串替换成字符串2</span><br></pre></td></tr></table></figure></p><p>console.log(‘aaa34bbb992nnn92nkkj8==22jkk’.replace(/\d+/, ‘A’))<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#####11.字符串.slice(开始下标, 结束下标)</span><br><span class="line">**特点**：顾头不顾尾，步长具有唯一性：为1</span><br><span class="line">**注意:** 这儿的下标可以是负数，代表倒数第几个</span><br></pre></td></tr></table></figure></p><p>console.log(‘hello’.slice(0, 2))    //he<br>console.log(‘hello’.slice(1, -2))   //el<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#####12.字符串1.split(字符串2)</span><br><span class="line">**作用**：将字符串1按照字符串2进行切割</span><br><span class="line">**输出**：数组</span><br></pre></td></tr></table></figure></p><p>console.log(‘hello’.split(‘e’))<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#三、数组</span><br><span class="line">###1.基本操作</span><br><span class="line">#####a.加法运算</span><br><span class="line">**实质**：将数组转换成字符串然后拼接</span><br></pre></td></tr></table></figure></p><p>console.log([12, 3, ‘abc’]+[1, 2, 3])  //12,3,abc1,2,3<br>console.log(String([1, 2, 3]))  //1,2,3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####b.比较运算:</span><br><span class="line">**实质**：比较两个对象的地址是否相等，相等于python中的is</span><br></pre></td></tr></table></figure></p><p>arr1 = [1, 2]<br>arr2 = [1, 2]<br>arr3 = arr1<br>console.log(arr1===arr1)   //true<br>console.log(arr1==arr3)    //true<br>console.log(arr1==arr2)    //false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####c.数组长度</span><br><span class="line">**用法**：数组.length属性</span><br></pre></td></tr></table></figure></p><p>console.log(arr1.length)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#2.增删改查  </span><br><span class="line">#####1.查: 获取元素</span><br><span class="line">**a.获取单个元素**</span><br><span class="line">**语法**：数组[下标]</span><br><span class="line">**作用**：获取下标对应的元素</span><br><span class="line">**注意**：负数的下标没有意义</span><br></pre></td></tr></table></figure></p><p>fruits = [‘苹果’, ‘梨’, ‘葡萄’, ‘西瓜’, ‘桃子’, ‘李子’]<br>console.log(fruits[1])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**b.切片**</span><br><span class="line">**语法**：数组.slice(开始下标,结束下标) </span><br><span class="line">**输出**：数组</span><br><span class="line">**注意**：</span><br><span class="line">1.结束下标取不到</span><br><span class="line">2.下标可以是负数</span><br><span class="line">3.开始下标要在结束下标的前面</span><br></pre></td></tr></table></figure></p><p>console.log(fruits.slice(0, 3))    //[‘苹果’, ‘梨’, ‘葡萄’]<br>console.log(fruits.slice(3, 0))    //[]<br>console.log(fruits.slice(3, -2))   //[‘西瓜’]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**c.遍历**</span><br></pre></td></tr></table></figure></p><p>for(index in fruits){<br>    console.log(fruits[index])<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#####2.增：添加元素</span><br><span class="line">**语法**：数组.push(元素) </span><br><span class="line">**作用**：在指定的数组的最后添加一个元素</span><br><span class="line">**输出**：原地操作</span><br></pre></td></tr></table></figure></p><p>fruits.push(‘香蕉’)<br>console.log(fruits)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#####3.删：删除元素</span><br><span class="line">**语法**：数组.pop() </span><br><span class="line">**作用**：删除最后一个元素</span><br><span class="line">**输出**：原地操作</span><br></pre></td></tr></table></figure></p><p>fruits.pop()<br>console.log(fruits)    //[“苹果”, “梨”, “葡萄”, “西瓜”, “桃子”, “李子”]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**语法**：数组.splice(下标,个数)</span><br><span class="line">**作用**：从指定下标开始删除指定个数的元素</span><br></pre></td></tr></table></figure></p><p>fruits.splice(1, 2)<br>console.log(fruits)      // [“苹果”, “西瓜”, “桃子”, “李子”]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#####4.改： 修改元素</span><br><span class="line">**语法**：数组[下标] = 新值</span><br><span class="line">**作用**：修改指定下标对应的值</span><br></pre></td></tr></table></figure></p><p>fruits[0] = ‘山竹’<br>console.log(fruits)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#3.相关方法</span><br></pre></td></tr></table></figure></p><p>fruits = [‘苹果’, ‘梨’, ‘葡萄’, ‘西瓜’, ‘桃子’, ‘李子’]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####1.数组.reverse() </span><br><span class="line">**作用**：将数组倒序</span><br></pre></td></tr></table></figure></p><p>fruits.reverse()<br>console.log(fruits)    //[“李子”, “桃子”, “西瓜”, “葡萄”, “梨”, “苹果”]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####2.数组.sort()</span><br><span class="line">**作用**：数组元素从小到大排序</span><br></pre></td></tr></table></figure></p><p>scorts = [23, 90, 89, 87, 76, 90, 65]   //[23, 65, 76, 87, 89, 90, 90]<br>scorts.sort()<br>console.log(scorts)   //[“李子”, “桃子”, “梨”, “苹果”, “葡萄”, “西瓜”]<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">######数组.sort(函数)</span><br><span class="line">**作用**：按指定规则对数组中的元素进行排序</span><br><span class="line">**函数要求:** </span><br><span class="line">a.两个参数(代表的是数组中的两个元素)</span><br><span class="line">b.一个返回值(两个元素或者两个元素的属性的差);</span><br></pre></td></tr></table></figure></p><p>students = [<br>        {‘name’:’小明’, ‘score’: 60, ‘age’: 29},<br>        {‘name’:’张三’, ‘score’: 89, ‘age’: 30},<br>        {‘name’:’小花’, ‘score’: 81, ‘age’: 19}<br>    ]</p><pre><code>//按成绩从小到大排序</code></pre><p>//    function ageCom(item1, item2){<br>//        return item1[‘score’]-item2[‘score’]<br>//    }<br>//    students.sort(ageCom)<br>//    console.log(students)  </p><pre><code>//年龄从大到下排序</code></pre><p>students.sort(function(a,b){<br>    return b[‘age’] - a[‘age’]<br>})<br>console.log(students)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####3.数组.join(字符串)</span><br><span class="line">**作用**：将指定的字符串插入到数组的每个元素之间产生一个新的字符串</span><br></pre></td></tr></table></figure></p><p>nums = [10, 34, 89, 1]<br>newData = nums.join(‘aaa’)<br>console.log(newData)    // 10aaa34aaa89aaa1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#四、对象</span><br><span class="line">#####1.对象字面量</span><br><span class="line">**定义**：用大括号括起来，里面是多个属性，属性名和属性值之间用冒号连接, 多个属性之间用逗号隔开</span><br><span class="line">**注意**: </span><br><span class="line">1)对象字面量需要保存（用变量保存）  </span><br><span class="line">2)属性名可以加引号也可以不加(没有区别)</span><br></pre></td></tr></table></figure></p><p>obj1 = {<br>    ‘name’:’余婷’,<br>    ‘age’: 18,<br>    sex: ‘女’<br>}<br>p1 = {<br>    ‘name’:’小明’,<br>    ‘age’: 20,<br>    sex: ‘男’<br>}<br>console.log(obj1)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#####2.获取对象属性对应的值</span><br><span class="line">######a.对象[属性名]</span><br></pre></td></tr></table></figure></p><p>console.log(obj1[‘name’], obj1[‘sex’])<br>proName = ‘age’<br>console.log(obj1[proName])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">######b.对象.属性</span><br></pre></td></tr></table></figure></p><p>console.log(obj1.name, obj1.sex)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#####3.增/改: 添加/修改属性</span><br><span class="line">######a.对象.属性 = 值</span><br><span class="line">######b.对象[属性名] = 值</span><br></pre></td></tr></table></figure></p><p>//属性存在是修改<br>obj1.name = ‘小明’<br>obj1[‘name’] = ‘小花’<br>console.log(obj1)</p><p>//属性不存在是添加<br>obj1.height = 180<br>obj1[‘weight’] = 70<br>console.log(obj1)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#####4.构造方法 - 创建对象的方法</span><br><span class="line">**语法**:</span><br><span class="line">function 类名(参数列表)&#123;</span><br><span class="line"> 对象属性</span><br><span class="line"> 对象方法</span><br><span class="line"> &#125;</span><br><span class="line">**说明:**</span><br><span class="line">**a**.对象属性: this.属性名 = 值</span><br><span class="line">**b**.对象方法: this.方法名 = 匿名函数</span><br><span class="line">**c**.类名： 首字母大写</span><br></pre></td></tr></table></figure></p><p>function Person(name=’张三’, age=18, sex=’男’){<br>    //这儿的this相当于python中的self<br>    //对象属性<br>    this.name = name<br>    this.age = age<br>    this.sex = sex<br>    //对象方法<br>    this.eat = function(food){<br>        console.log(this.name+’吃’+food)<br>    }<br>    console.log(‘=====:’,this)<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//5.创建对象</span><br><span class="line">**语法**：对象 = new 构造方法()</span><br></pre></td></tr></table></figure></p><pre><code>//创建对象p1 = new Person()console.log(p1)//获取对象属性console.log(p1.name, p1.age, p1.sex)//调用对象方法p1.eat(&apos;包子&apos;)p2 = new Person(&apos;小明&apos;, 20, &apos;女&apos;)console.log(p2)p2.eat(&apos;面条&apos;)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">######注意： js中声明全局变量实质都是添加给window对象的属性</span><br></pre></td></tr></table></figure><pre><code>p3 = Person()p3 = window.Person()console.log(p3)</code></pre><p>//    window.alert(‘弹框’)<br>    alert(‘弹框’)<br>    a = 10<br>    console.log(window.a)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#####6.添加类的全局的属性</span><br><span class="line">**语法**：类名.prototype.属性名 = 属性值</span><br><span class="line">**作用**：给指定的类的所有对象添加属性</span><br></pre></td></tr></table></figure></p><p>Person.prototype.height = 180<br>Person.prototype.run = function(){<br>    console.log(this.name+’在跑步!’)<br>}<br>p4 = new Person(‘老骆’, 30, ‘男’)</p><p>console.log(p4.height, p1.height)<br>p4.run()<br>p1.run()<br>p2.run()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">练习：给String添加方法， 统计字符串中字母字符的个数</span><br></pre></td></tr></table></figure></p><p>str1 = new String(‘abc’)<br>console.log(str1)<br>String.prototype.letterCount = function(){<br>    num = 0<br>    i = 0<br>    while(i&lt;this.length){<br>        ch = this[i]<br>        console.log(‘++:’,ch)<br>        if((ch&gt;=’a’ &amp;&amp; ch&lt;=’z’)||(ch&gt;=’A’ &amp;&amp; ch&lt;=’Z’)){<br>            console.log(‘====’,ch,’=====’)<br>            num++<br>        }<br>        i++<br>    }<br>    return num<br>}<br>    console.log(‘A23adb33’.letterCount())<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#####7.系统的对象和类</span><br><span class="line">a.document对象  </span><br><span class="line">b.window对象</span><br><span class="line">c.Element类型的对象</span><br><span class="line">d.Date类型的对象</span><br><span class="line">.....</span><br></pre></td></tr></table></figure></p><p>//创建当前时间对象<br>date1 = new Date()<br>console.log(date1)<br>//年<br>year = date1.getFullYear()<br>//月 - 从0开始的<br>month = date1.getMonth()<br>//日<br>day = date1.getDate()<br>//时<br>hours = date1.getHours()<br>//分<br>min = date1.getMinutes()<br>//秒<br>seconds = date1.getSeconds()<br>//星期<br>week = date1.getDay()<br>console.log(‘’.concat(year,’年’,month+1,’月’,day,’日’,’ ‘,hours,’:’,min,’:’,seconds))<br>console.log(‘星期’, week)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#五、DOM</span><br></pre></td></tr></table></figure></p><p><body><br>    <p id="p1">我是段落</p><script src="/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887"></script><script>L2Dwidget.init({"model":{"jsonPath":"/live2dw/assets/koharu.model.json"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":true},"log":false,"pluginJsPath":"lib/","pluginModelPath":"assets/","pluginRootPath":"live2dw/","tagMode":false});</script></body></p><pre><code>&lt;a href=&quot;&quot; class=&quot;c1&quot;&gt;我是a标签&lt;/a&gt;&lt;h1 class=&quot;c1&quot;&gt;我是标题1&lt;/h1&gt;&lt;input type=&quot;&quot; name=&quot;userName&quot; id=&quot;userName&quot; value=&quot;&quot; /&gt;&lt;div id=&quot;div1&quot;&gt;    &lt;p&gt;我是段落2&lt;/p&gt;    &lt;a href=&quot;&quot;&gt;新浪&lt;/a&gt;    &lt;h2&gt;我是标题2&lt;/h2&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot;&gt;    //按钮点击后会做的事情    function action(){        console.log(&apos;点击!&apos;)    }&lt;/script&gt;&lt;button onclick=&quot;action()&quot;&gt;&lt;/button&gt;</code></pre><p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#####1.DOM(文档对象模型: document object mode)</span><br><span class="line">######a.document对象: 指的是指向整个网页内容的一个对象</span><br><span class="line">######b.节点: Element类型对象,指向的是网页中的标签</span><br><span class="line"></span><br><span class="line">#####2.获取节点</span><br><span class="line">######a.通过id获取节点: getElementById(id值)</span><br><span class="line">**返回值**：节点对象(实质就是指向指定标签的对象)</span><br></pre></td></tr></table></figure></p><p>p1Node = document.getElementById(‘p1’)<br>console.log(p1Node)<br>//innerText是标签文本内容<br>p1Node.innerText = ‘hello js’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">######b.通过class获取节点: getElementsByClassName(class值)</span><br><span class="line">**返回值**：节点数组</span><br></pre></td></tr></table></figure></p><p>c1Nodes = document.getElementsByClassName(‘c1’)<br>c1Nodes[0].innerText = ‘百度一下’<br>console.log(c1Nodes)<br>//注意: 遍历的时候不要用for in<br>for(i=0;i&lt;c1Nodes.length;i++){<br>    c1Node = c1Nodes[i]<br>    //修改样式中的文字颜色<br>    c1Node.style.color = ‘red’<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">######c.通过标签名获取节点: getElementsByTagName(标签名)</span><br></pre></td></tr></table></figure></p><p>h1Nodes = document.getElementsByTagName(‘h1’)<br>console.log(h1Nodes)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">######d.通过name属性值获取节点:getElementsByName(name值) （了解）</span><br></pre></td></tr></table></figure></p><p>nameNodes = document.getElementsByName(‘userName’)<br>console.log(nameNodes)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">######e.获取子节点</span><br><span class="line">**1.**</span><br><span class="line">**语法**：节点对象.children</span><br><span class="line">**作用**：获取指定节点中所有的子节点</span><br></pre></td></tr></table></figure></p><p>div1Node = document.getElementById(‘div1’)<br>div1Children = div1Node.children<br>console.log(div1Children)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**2.**</span><br><span class="line">**语法**：节点对象.firstElementChild</span><br><span class="line">**作用**：获取第一个子节点</span><br></pre></td></tr></table></figure></p><p>firstNode = div1Node.firstElementChild<br>console.log(firstNode)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**3.**</span><br><span class="line">**语法**：节点对象.lastElementChild</span><br><span class="line">**作用**：获取最后一个子节点</span><br></pre></td></tr></table></figure></p><p>lastNode = div1Node.lastElementChild<br>console.log(lastNode)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**4.**</span><br><span class="line">**语法**：节点对象.parentElement</span><br><span class="line">**作用**：获取父节点</span><br></pre></td></tr></table></figure></p><p>bodyNode = div1Node.parentElement<br>console.log(bodyNode)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#####3.创建和添加节点</span><br><span class="line">######第一步：创建节点</span><br><span class="line">**语法**：document.createElement(标签名)</span><br><span class="line">**示例：**创建一个img标签</span><br></pre></td></tr></table></figure></p><p>imgNode = document.createElement(‘img’)<br>imgNode.src = ‘img/luffy.jpg’<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">######第二步：添加节点</span><br><span class="line">**a.节点1.appendChild(节点2)**</span><br><span class="line">**作用**：在节点1的最后添加子标签节点2</span><br></pre></td></tr></table></figure></p><p>bodyNode.appendChild(imgNode)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**b.节点1.insertBefore(新的节点, 节点2)**</span><br><span class="line">**作用**：在节点1中的节点2的前面添加一个新的节点</span><br></pre></td></tr></table></figure></p><p>bodyNode.insertBefore(imgNode, bodyNode.firstElementChild)<br>bodyNode.insertBefore(imgNode, c1Nodes[0])<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">######注意：一个节点不管添加几次，只有最后一次添加有效(因为节点只有一个)</span><br><span class="line"></span><br><span class="line">######3.拷贝/复制节点</span><br><span class="line">**语法**：节点.cloneNode()</span><br><span class="line">**作用**：创建一个与旧节点一样的新节点</span><br></pre></td></tr></table></figure></p><p>newImgNode = imgNode.cloneNode()<br>newImgNode.src = ‘img/aaa.ico’<br>div1Node.appendChild(newImgNode)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">######4.删除节点</span><br><span class="line">**语法**：节点.remove()</span><br><span class="line">**作用**：删除指定的节点</span><br></pre></td></tr></table></figure></p><p>p1Node = document.getElementById(‘p1’)<br>p1Node.remove()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">######5.替换节点</span><br><span class="line">**语法**：节点1.replaceChild(新节点, 旧节点)</span><br><span class="line">**作用**：用新节点替换节点1中的旧节点</span><br></pre></td></tr></table></figure></p><p>bodyNode.replaceChild(imgNode.cloneNode(), c1Nodes[1])<br><code>`</code>    </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了web前端中的行为标准js(javascript)基础相关的知识&lt;br&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>JS基础(一)</title>
    <link href="http://yoursite.com/2019/03/02/JS%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
    <id>http://yoursite.com/2019/03/02/JS基础(一)/</id>
    <published>2019-03-02T09:55:09.088Z</published>
    <updated>2019-03-02T09:55:40.321Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了web前端中的行为标准js(javascript)基础相关的知识<br><a id="more"></a></p><p>#一、基础语法<br><strong>1.注释</strong><br>    // 单行注释，注释前加两个斜杠<br>    /<em> 多行注释<br>     第二行<br>     第三行     </em>/</p><p><strong>2.标识符</strong><br>由数字、字母、下划线和\$组成，数字不能开头，命名一般不用\$符号，\$符号有特殊功能<br><strong>3.关键字*<br>for,in,while,if,else,true,false，var,function等，有特殊功能的标识符都是关键字</strong>4.数据类型和字面量<strong></strong>a.类型和字面量<strong><br>Number（数字）、String（字符串）、Boolean（布尔）、Array（数组）、Object（对象）、function等</strong>Number<strong>  - 表示所有的数字， 23,12,45，支持科学计数法，NaN(不存在的数字),Infinity(无穷大)</strong>String<strong> - 表示所有字符串，用单引号或者双引号， ‘abc’、’adds’</strong>Boolean<strong> - true和false两个值</strong>Array<strong> - 相当于pyhton中的列表；[23,’gfgf’]</strong>Object<strong> - 相当于python中的字典+对象；(属性名：属性值， 属性名2：属性值2…)属性值可以是任何类型</strong>注意<strong>：属性名可以使用引号，也可以不使用引号</strong>Function<strong> - 相当于python中的函数</strong>b.类型转换和查看类型<strong></strong>查看类型<strong>：typeof(数据)</strong>类型转换**：类型名（）</p><p>#二、变量<br><strong>1.基本语法</strong><br><strong>格式1</strong>：变量名 = 值<br><strong>格式2</strong>：var 变量名 = 值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//单独声明一个变量</span><br><span class="line">name = &apos;小明&apos;</span><br><span class="line">var name2 = &apos;小红&apos;</span><br><span class="line">console.log(name, name2)</span><br><span class="line">//同时声明多个变量赋一样的值</span><br><span class="line">a = b = c = 10</span><br><span class="line">console.log(a,b,c)</span><br><span class="line">//同时声明多个变量赋不一样的值；</span><br><span class="line">//注意：使用var声明变量的时候，可以不用给变量赋初值，默认是undefined</span><br><span class="line">a1=10, b1=20</span><br><span class="line">console.log(a1,b1)</span><br><span class="line">var a1, b=10, c2</span><br><span class="line">console.log(a2, b2,c2)</span><br></pre></td></tr></table></figure></p><p>#三、运算符</p><p>#####js支持：数学运算符、比较运算符、逻辑运算符、位运算符<br><strong>1.数学运算符</strong>：+，-，*，/，%，++，–（和python比，少了//和**，多个++和–）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//+，-，*，/,%和python一样</span><br><span class="line">//++（子加1），--（子减一）</span><br><span class="line">//变量++，++变量 - 让变量自己的值加1</span><br><span class="line">//变量--，--变量 - 让变量自己的值减1</span><br><span class="line">num = 10</span><br><span class="line">num++      //相当于num += 1</span><br><span class="line">num--      //相当于num -= 1</span><br><span class="line">console.log(num)</span><br><span class="line">num1 = 10</span><br><span class="line">// 先赋值，再加1</span><br><span class="line">num2 = num1++</span><br><span class="line">// 先加1再赋值</span><br><span class="line">//  num22 = ++num11</span><br><span class="line">//  console.log(num2, num22)</span><br><span class="line">```</span><br><span class="line">**2.比较运算符**：&gt;,&lt;,&gt;=,==,!=,===.!==</span><br><span class="line">==判断值是否相等，！=判断值是否不相等</span><br><span class="line">===判断值和类型是否相等，！==判断值和类型是否不相等</span><br></pre></td></tr></table></figure></p><p>console.log(5==5)  //true<br>console.log(5==’5’)  //true<br>console.log(5===5)  //true<br>console.log(5===’5’) // false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">**3.逻辑运算符**：&amp;&amp;（逻辑与）、||（逻辑或）、！（逻辑非）</span><br><span class="line">运算规则和python一样</span><br><span class="line"></span><br><span class="line">**4.赋值运算符**：=，+=，-=，*=，/=,%=</span><br><span class="line">运算规则和python一样</span><br><span class="line"></span><br><span class="line">**5.位运算符**：&amp;，|，~，^</span><br><span class="line">运算规则和python一样</span><br><span class="line"></span><br><span class="line">**6.复合运算和python一样**</span><br><span class="line"></span><br><span class="line">**7.三目运算符**</span><br><span class="line">？： - 条件语句？值1：值2  （条件语句成立，结果是值1，否则是值2）</span><br></pre></td></tr></table></figure></p><p>age = 10<br>console.log(age&gt;18?’成年’:’未成年’)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#四、分支</span><br><span class="line">#####js中的分支结构：if语句、switch语句</span><br><span class="line">**1.if语句**</span><br><span class="line">**if结构**:</span><br><span class="line"> if (条件语句)&#123;</span><br><span class="line"> 条件语句成立执行的代码段</span><br><span class="line"> &#125;</span><br><span class="line">**if-else结构**:</span><br><span class="line">if（条件语句）&#123;</span><br><span class="line"> 条件语句成立执行的代码段 </span><br><span class="line">&#125;else&#123;</span><br><span class="line"> 条件语句不成立执行的代码段 </span><br><span class="line">&#125;</span><br><span class="line">**if-else if -else**:</span><br><span class="line">if（条件语句1）&#123;</span><br><span class="line"> 条件语句1成立执行的代码段</span><br><span class="line">&#125;else if（条件语句2）&#123;</span><br><span class="line">条件语句2成立执行的代码段 </span><br><span class="line"> &#125;else&#123;</span><br><span class="line">前面的条件语句都不成立执行的代码段</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><pre><code>num = 11if (num%2 == 0){    console.log(&apos;偶数&apos;)}else{    console.log(&apos;奇数&apos;)}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**2.switch语句**</span><br></pre></td></tr></table></figure><p> switch(表达式){<br>         case 值1：{<br>             代码段1<br>         }<br>         case 值2：{<br>             代码段2<br>         }<br>         case 值3：{<br>             代码段3<br>         }<br>         default:{<br>             代码段4<br>         }<br>     }<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#####注意：case后面的&#123;&#125;可以省略，代码段也可以没有</span><br><span class="line"></span><br><span class="line">**执行过程**：先计算表达式的结果，然后从上往下一一和每个case后边的值进行比较，判断是否相等；找到第一个和表达式的结果相等的case，然后将这个case作为入口，然后执行后面的所有代码段，直到执行到最后一个代码段或者遇到break才结束,如果表达式的结果和每个case的值都不相等，将default作为入口</span><br><span class="line">**注意**：default一般放在最后 </span><br><span class="line">#五、循环</span><br><span class="line">**1.for循环**</span><br><span class="line">**python中for-in结构**</span><br><span class="line">语法：</span><br></pre></td></tr></table></figure></p><pre><code>for(变量 in 序列){    循环体}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">####注意：不管序列是什么类型，这个变量取得都是下标/属性名（key)</span><br></pre></td></tr></table></figure><pre><code>str1 = &apos;abc&apos;for(index in &apos;abc&apos;){    console.log(index, str1[index])}array1 = [100, false, &apos;abc&apos;, [1,2,3]]</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**c中for循环结构</span><br><span class="line">语法：</span><br></pre></td></tr></table></figure><pre><code>for(表达式1；表达式2；表达式3){    循环体}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**执行过程**：先执行表达式1，再判断表达式2是否为true,如果为true,执行循环体，执行完循环体后，执行表达式3，再判断表达式2是否为true,直到判断表达式2不满足条件为止</span><br><span class="line"></span><br><span class="line">**2.while循环**</span><br><span class="line">**python中的while循环**</span><br><span class="line">语法：</span><br></pre></td></tr></table></figure><pre><code>while(条件语句){    循环体}</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**C中的do-while**</span><br><span class="line">语法：</span><br></pre></td></tr></table></figure><pre><code>do{    循环体}while(条件语句)</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">**执行过程**：会先执行一次循环体，然后再去判断条件语句是否为true(无论条件语句是否满足，至少都会执行一次循环体)</span><br><span class="line">#六、函数</span><br><span class="line">**语法**：</span><br></pre></td></tr></table></figure><p>function 函数名（形参列表）{<br>    函数体<br>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">**说明**：</span><br><span class="line">**1.** 不支持关键字参数</span><br><span class="line">**2.** 不支持不定长参数</span><br><span class="line">**3.** 不支持多个返回值</span><br></pre></td></tr></table></figure></p><p>function sum(x,y){<br>    console.log(‘函数体’,x,y)<br>    return x+y<br>}</p><p>sum(10,20)<br><code>`</code><br><strong>函数变量</strong>：声明函数即声明类型是Function的变量<br><strong>匿名函数</strong>：不需要变量名的函数<br><strong>注意</strong>：如果 函数体中没有return，函数的返回值是undefined<br><strong>语法</strong>：<br>function(参数列表){<br>    函数体<br>}</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了web前端中的行为标准js(javascript)基础相关的知识&lt;br&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>京东登录(静态页面)</title>
    <link href="http://yoursite.com/2019/03/02/%E4%BA%AC%E4%B8%9C%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2/"/>
    <id>http://yoursite.com/2019/03/02/京东登录页面/</id>
    <published>2019-03-02T09:52:56.120Z</published>
    <updated>2019-03-02T09:52:56.327Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了如何使用html和css写一个网页静态页面<br><a id="more"></a><br>京东购物车代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;京东-欢迎登录&lt;/title&gt;</span><br><span class="line">&lt;!--设置图标--&gt;</span><br><span class="line">&lt;link rel=&quot;icon&quot; type=&quot;image/ico&quot; href=&quot;img/jd_logo.ico&quot;/&gt;</span><br><span class="line">&lt;!--通用样式--&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">*&#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--1.====================网页顶部样式=======================--&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.top&#123;</span><br><span class="line">/*background-color: hotpink;*/</span><br><span class="line">height: 120px;</span><br><span class="line">&#125;</span><br><span class="line">/*========logo==========*/</span><br><span class="line">.top .logo&#123;</span><br><span class="line">/*background-color: wheat;*/</span><br><span class="line">height: 80px;</span><br><span class="line"></span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">.top .logo div&#123;</span><br><span class="line">/*定位*/</span><br><span class="line">position: absolute;</span><br><span class="line">left: 185px;</span><br><span class="line">/*在父标签上垂直方向居中*/</span><br><span class="line">top:50%;</span><br><span class="line">margin-top: -30px;</span><br><span class="line">&#125;</span><br><span class="line">.top .logo .a2&#123;</span><br><span class="line">/*定位*/</span><br><span class="line">position: absolute;</span><br><span class="line">right: 185px;</span><br><span class="line">bottom: 10px;</span><br><span class="line"></span><br><span class="line">/*字体*/</span><br><span class="line">font-size: 12px;</span><br><span class="line">color: rgb(142,142,142);</span><br><span class="line">text-decoration: none;</span><br><span class="line"></span><br><span class="line">/*背景*/</span><br><span class="line">background: url(img/q-icon.png) no-repeat 0 center #ffffff;</span><br><span class="line">padding-left: 20px;</span><br><span class="line">&#125;</span><br><span class="line">/*鼠标悬停*/</span><br><span class="line">.top .logo .a2:hover&#123;</span><br><span class="line">color: rgb(216,36,50);</span><br><span class="line">text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*========message=========*/</span><br><span class="line">.top .message&#123;</span><br><span class="line">background-color: rgb(255,246,236);</span><br><span class="line">height: 40px;</span><br><span class="line"></span><br><span class="line">/*子标签水平方向居中*/</span><br><span class="line">text-align: center;</span><br><span class="line">/*子标签垂直方向居中*/</span><br><span class="line">line-height: 40px;</span><br><span class="line">&#125;</span><br><span class="line">.top .message p&#123;</span><br><span class="line">/*字体*/</span><br><span class="line">font-size: 12px;</span><br><span class="line">color: rgb(142,142,142);</span><br><span class="line"></span><br><span class="line">/*背景*/</span><br><span class="line">background: url(img/xx.png) no-repeat 212px center raba(0,0,0,0);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.top .message a&#123;</span><br><span class="line">/*字体*/</span><br><span class="line">color: rgb(50,50,50);</span><br><span class="line">text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line">.top .message a:hover&#123;</span><br><span class="line">text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;!--1.====================网页顶部=======================--&gt;</span><br><span class="line">&lt;div class=&quot;top&quot;&gt;</span><br><span class="line">&lt;!--顶部的顶部--&gt;</span><br><span class="line">&lt;div class=&quot;logo&quot;&gt;</span><br><span class="line">&lt;div&gt;</span><br><span class="line">&lt;a class=&quot;a1&quot; href=&quot;&quot;&gt;&lt;img src=&quot;img/logo.png&quot;/&gt;&lt;/a&gt;</span><br><span class="line">&lt;img src=&quot;img/l-icon.png&quot;/&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;a class=&quot;a2&quot; href=&quot;&quot;&gt;</span><br><span class="line">登录页面，调查问卷</span><br><span class="line"></span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!--顶部的底部--&gt;</span><br><span class="line">&lt;div class=&quot;message&quot;&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">依据《网络安全法》，为保障您的账户安全和正常使用，请尽快完成手机号验证！</span><br><span class="line"> 新版&lt;a href=&quot;&quot;&gt;《京东隐私政策》&lt;/a&gt;已上线，将更有利于保护您的个人隐私。</span><br><span class="line"></span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--2.======================网页内容样式=============================--&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.content&#123;</span><br><span class="line">background-color: rgb(81,158,220);</span><br><span class="line">height: 475px;</span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content .bg_img&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">top: 50%;</span><br><span class="line">margin-top: -237px;</span><br><span class="line"></span><br><span class="line">left: 100px;</span><br><span class="line">&#125;</span><br><span class="line">/*登录框*/</span><br><span class="line">.content .login_div&#123;</span><br><span class="line">background-color: white;</span><br><span class="line">width: 350px;</span><br><span class="line">height: 400px;</span><br><span class="line"></span><br><span class="line">/*定位*/</span><br><span class="line">position: absolute;</span><br><span class="line">top: 10px;</span><br><span class="line">right:185px;</span><br><span class="line">&#125;</span><br><span class="line">/*顶部*/</span><br><span class="line">.content .login_div .div1&#123;</span><br><span class="line">background-color: rgb(255,246,236)</span><br><span class="line">height: 40px;</span><br><span class="line">/*居中*/</span><br><span class="line">text-align: center;</span><br><span class="line">line-height: 40px;</span><br><span class="line">&#125;</span><br><span class="line">.content .login_div .div1 font&#123;</span><br><span class="line">font-size: 12px;</span><br><span class="line">color: rgb(142,142,142);</span><br><span class="line">/*背景*/</span><br><span class="line">background: url(img/xx.png) no-repeat 0 center rgba(0,0,0,0);</span><br><span class="line">padding: 20px;</span><br><span class="line">&#125;</span><br><span class="line">/*中间*/</span><br><span class="line">.content .login_div .div2&#123;</span><br><span class="line">/*background-color: lightblue;*/</span><br><span class="line">height: 310px;</span><br><span class="line">&#125;</span><br><span class="line">.content .login_div .div2 .btn&#123;</span><br><span class="line">height: 55px;</span><br><span class="line">background-color: white;</span><br><span class="line">color: #dddddd;</span><br><span class="line">font-weight: 100;</span><br><span class="line">&#125;</span><br><span class="line">.content .login_div .div2 .btn button&#123;</span><br><span class="line">width: 170px;</span><br><span class="line">height: 100%;</span><br><span class="line">background-color: rgba(0,0,0,0);</span><br><span class="line">border: none;</span><br><span class="line">font-size: 20px;</span><br><span class="line">color: rgb(83,83,83);</span><br><span class="line">&#125;</span><br><span class="line">/*鼠标悬停状态*/</span><br><span class="line">.content .login_div .div2 .btn button:hover&#123;</span><br><span class="line">color: rgb(217,48,60);</span><br><span class="line">&#125;</span><br><span class="line">/*成为焦点的状态*/</span><br><span class="line">.content .login_div .div2 .btn button:focus&#123;</span><br><span class="line">outline: none;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/*输入*/</span><br><span class="line">.content .login_div .div2 .input&#123;</span><br><span class="line">height: 255px;</span><br><span class="line"></span><br><span class="line">border-top: 1px solid #DDDDDD;</span><br><span class="line">border-bottom: 1px solid #DDDDDD;</span><br><span class="line"></span><br><span class="line">position: relative;</span><br><span class="line">&#125;</span><br><span class="line">/*输入框*/</span><br><span class="line">.content .login_div .div2 .input div&#123;</span><br><span class="line">width: 310px;</span><br><span class="line">height: 40px;</span><br><span class="line">border: 1px solid #999999;</span><br><span class="line">margin: 20px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.content .login_div .div2 .input .un_div&#123;</span><br><span class="line">margin-top: 40px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/*输入框*/</span><br><span class="line">.content .login_div .div2 .input div input&#123;</span><br><span class="line">height: 100%;</span><br><span class="line">width: 250px;</span><br><span class="line">vertical-align: top;</span><br><span class="line">border: none;</span><br><span class="line"></span><br><span class="line">font-size: 15px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.content .login_div .div2 .input div input:focus&#123;</span><br><span class="line">outline: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*图标*/</span><br><span class="line">.content .login_div .div2 .input div img&#123;</span><br><span class="line">height: 100%;</span><br><span class="line">width: 40px;</span><br><span class="line"></span><br><span class="line">border-right: 1px solid #999999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*忘记密码*/</span><br><span class="line">.content .login_div .div2 .input a&#123;</span><br><span class="line">position: absolute;</span><br><span class="line">right: 20px;</span><br><span class="line"></span><br><span class="line">font-size: 13px;</span><br><span class="line">color: rgb(53,53,53);</span><br><span class="line">text-decoration: none;</span><br><span class="line">&#125;</span><br><span class="line">.content .login_div .div2 .input a:hover&#123;</span><br><span class="line">color: rgb(217,48,60);</span><br><span class="line">text-decoration: underline;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/*登录按钮*/</span><br><span class="line">.content .login_div .div2 .input .lg_btn&#123;</span><br><span class="line">width: 310px;</span><br><span class="line">height: 35px;</span><br><span class="line">/*定位*/</span><br><span class="line">position: absolute;</span><br><span class="line">bottom: 30px;</span><br><span class="line">left: 20px;</span><br><span class="line"></span><br><span class="line">font-size: 20px;</span><br><span class="line">/*设置背景颜色*/</span><br><span class="line">background-color: red;</span><br><span class="line">/*设置内容颜色*/</span><br><span class="line">color: white;</span><br><span class="line">&#125;</span><br><span class="line">/*取消焦点状态*/</span><br><span class="line">.content .login_div .div2 .input .lg_btn:focus&#123;</span><br><span class="line">outline: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*底部*/</span><br><span class="line">.content .login_div .div3&#123;</span><br><span class="line">height: 50px;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">.content .login_div .div3 ul&#123;</span><br><span class="line">list-style-type: none;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/*左边*/</span><br><span class="line">.content .login_div .div3 .bt_1 li&#123;</span><br><span class="line">float: left;</span><br><span class="line">line-height: 50px;</span><br><span class="line">padding-left: 20px;</span><br><span class="line">font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">/*QQ*/</span><br><span class="line">.content .login_div .div3 .bt_1 .bt_qq&#123;</span><br><span class="line">/*背景*/</span><br><span class="line">background: url(img/qq.png) no-repeat 0 center rgba(0,0,0,0);</span><br><span class="line">padding-left: 25px;</span><br><span class="line">/*去掉下划线*/</span><br><span class="line">text-decoration: none;</span><br><span class="line">color: black;</span><br><span class="line">padding-right: 20px;</span><br><span class="line">border-right: 1px solid gray;</span><br><span class="line">&#125;</span><br><span class="line">.content .login_div .div3 .bt_1 .bt_qq:hover&#123;</span><br><span class="line">color: red;</span><br><span class="line">text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">/*微信*/</span><br><span class="line"> .content .login_div .div3 .bt_1 .bt_wx&#123;</span><br><span class="line">/*背景*/</span><br><span class="line">background: url(img/weixin.png) no-repeat 0 center rgba(0,0,0,0);</span><br><span class="line">padding-left: 25px;</span><br><span class="line">/*去掉下划线*/</span><br><span class="line">text-decoration: none;</span><br><span class="line">color: black;</span><br><span class="line">&#125;</span><br><span class="line">.content .login_div .div3 .bt_1 .bt_wx:hover&#123;</span><br><span class="line">color: red;</span><br><span class="line">text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">/*右边*/</span><br><span class="line">.content .login_div .div3 .bt_2 a&#123;</span><br><span class="line">float: right;</span><br><span class="line">/*垂直居中*/</span><br><span class="line">line-height: 50px;</span><br><span class="line">margin-right: 20px;</span><br><span class="line"></span><br><span class="line">/*背景*/</span><br><span class="line">background: url(img/right.png) no-repeat 0 center rgba(0,0,0,0);</span><br><span class="line">padding-left: 25px;</span><br><span class="line">color: red;</span><br><span class="line"></span><br><span class="line">/*去掉下划线*/</span><br><span class="line">text-decoration: none;</span><br><span class="line">font-size: 18px;</span><br><span class="line">&#125;</span><br><span class="line">.content .login_div .div3 .bt_2 a:hover&#123;</span><br><span class="line">color: gray;</span><br><span class="line">text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;!--2.======================网页内容=====================--&gt;</span><br><span class="line">&lt;div class=&quot;content&quot;&gt;</span><br><span class="line">&lt;img class=&quot;bg_img&quot; src=&quot;img/bg2.png&quot;/&gt;</span><br><span class="line">&lt;!--登录框--&gt;</span><br><span class="line">&lt;div class=&quot;login_div&quot; id=&quot;&quot;&gt;</span><br><span class="line">&lt;!--顶部--&gt;</span><br><span class="line">&lt;div class=&quot;div1&quot;&gt;</span><br><span class="line">&lt;font&gt;</span><br><span class="line">京东不会以任何理由要求您转账汇款，谨防诈骗。</span><br><span class="line">&lt;/font&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!--中间--&gt;</span><br><span class="line">&lt;div class=&quot;div2&quot;&gt;</span><br><span class="line">&lt;div class=&quot;btn&quot;&gt;</span><br><span class="line">&lt;button class=&quot;btn1&quot;&gt;</span><br><span class="line">扫码登录</span><br><span class="line">&lt;/button&gt;|</span><br><span class="line">&lt;button class=&quot;btn2&quot;&gt;</span><br><span class="line">账号登录</span><br><span class="line">&lt;/button&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!--输入框--&gt;</span><br><span class="line">&lt;div class=&quot;input&quot;&gt;</span><br><span class="line">&lt;form action=&quot;#&quot;&gt;</span><br><span class="line">&lt;div class=&quot;un_div&quot;&gt;</span><br><span class="line">&lt;label for=&quot;username&quot;&gt;&lt;img src=&quot;img/pygame.png&quot;/&gt;&lt;/label&gt;</span><br><span class="line">&lt;input placeholder=&quot;邮箱/用户名/已验证手机&quot; type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot; value=&quot;&quot; /&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;pw_div&quot;&gt;</span><br><span class="line">&lt;label for=&quot;password&quot;&gt;&lt;img src=&quot;img/password_icon.png&quot;/&gt;&lt;/label&gt;</span><br><span class="line">&lt;input placeholder=&quot;密码&quot; type=&quot;password&quot; name=&quot;password&quot; id=&quot;password&quot; value=&quot;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;a href=&quot;&quot;&gt;忘记密码&lt;/a&gt;</span><br><span class="line">&lt;input class=&quot;lg_btn&quot; type=&quot;submit&quot; value=&quot;登&amp;emsp;录&quot;/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;!--底部--&gt;</span><br><span class="line">&lt;div class=&quot;div3&quot;&gt;</span><br><span class="line">&lt;ul class=&quot;bt_1&quot;&gt;</span><br><span class="line">&lt;li&gt;&lt;a class=&quot;bt_qq&quot; href=&quot;&quot;&gt;QQ&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;li&gt;&lt;a class=&quot;bt_wx&quot; href=&quot;&quot;&gt;微信&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;ul class=&quot;bt_2&quot;&gt;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;&quot;&gt;立即注册&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--3.=====================网页底部样式=====================--&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.bottom&#123;</span><br><span class="line">background-color: darkgray;</span><br><span class="line">height: 110px;</span><br><span class="line">&#125;</span><br><span class="line">.bottom .bo_div1&#123;</span><br><span class="line">background-color: white;</span><br><span class="line">height: 70px;</span><br><span class="line">/*水平方向居中*/</span><br><span class="line">text-align: center;</span><br><span class="line">/*竖直方向居中*/</span><br><span class="line">line-height: 70px;</span><br><span class="line">font-size: 12px;</span><br><span class="line">color: gray;</span><br><span class="line">&#125;</span><br><span class="line">/*所有链接*/</span><br><span class="line">.bottom .bo_div1 a&#123;</span><br><span class="line">text-decoration: none;</span><br><span class="line">color: black;</span><br><span class="line">font-size: 15px;</span><br><span class="line">padding-right: 10px;</span><br><span class="line">padding-left: 10px;</span><br><span class="line">&#125;</span><br><span class="line">.bottom .bo_div1 a:hover&#123;</span><br><span class="line">color: red;</span><br><span class="line">text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*底部的底部文字*/</span><br><span class="line">.bottom .bo_div2&#123;</span><br><span class="line">background-color: white;</span><br><span class="line">height: 40px;</span><br><span class="line">/*内容水平居中*/</span><br><span class="line">text-align: center;</span><br><span class="line">/*内容垂直居中*/</span><br><span class="line">line-height: 40px;</span><br><span class="line">font-size: 12px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;!--3.======================网页底部========================--&gt;</span><br><span class="line">&lt;div class=&quot;bottom&quot;&gt;</span><br><span class="line">&lt;div class=&quot;bo_div1&quot;&gt;</span><br><span class="line">&lt;a href=&quot;&quot;&gt;关于我们&lt;/a&gt;|</span><br><span class="line">&lt;a href=&quot;&quot;&gt;联系我们&lt;/a&gt;|</span><br><span class="line">&lt;a href=&quot;&quot;&gt;人才招聘&lt;/a&gt;|</span><br><span class="line">&lt;a href=&quot;&quot;&gt;商家入驻&lt;/a&gt;|</span><br><span class="line">&lt;a href=&quot;&quot;&gt;广告服务&lt;/a&gt;|</span><br><span class="line">&lt;a href=&quot;&quot;&gt;手机京东&lt;/a&gt;|</span><br><span class="line">&lt;a href=&quot;&quot;&gt;友情链接&lt;/a&gt;|</span><br><span class="line">&lt;a href=&quot;&quot;&gt;销售联盟&lt;/a&gt;|</span><br><span class="line">&lt;a href=&quot;&quot;&gt;京东社区&lt;/a&gt;|</span><br><span class="line">&lt;a href=&quot;&quot;&gt;京东公益&lt;/a&gt;|</span><br><span class="line">&lt;a href=&quot;&quot;&gt;English&amp;nbsp;Site&lt;/a&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div class=&quot;bo_div2&quot;&gt;</span><br><span class="line">&lt;font&gt;</span><br><span class="line">Copyright © 2004-2019  京东JD.com 版权所有</span><br><span class="line">&lt;/font&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了如何使用html和css写一个网页静态页面&lt;br&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS布局</title>
    <link href="http://yoursite.com/2019/03/02/CSS%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2019/03/02/CSS布局/</id>
    <published>2019-03-02T09:50:15.337Z</published>
    <updated>2019-03-02T09:57:48.094Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了web前端中的表现标准CSS(层叠样式表)在网页中该如何布局相关的知识<br><a id="more"></a></p><p>#一、标准流<br><strong>1.什么是标准流</strong><br>标签在没有添加布局相关的样式时，在浏览器中默认的布局方式<br><strong>块级标签</strong>：<br>一个占一行（不管宽度大小）<br>默认宽度是父标签的宽度，默认高度是内容的高度；设置宽高有效(div)<br><strong>行内标签</strong>：<br>一行可以显示多个<br>默认大小是内容的大小；设置<strong>宽高无效</strong>(span,a)<br><strong>行内块标签</strong>:<br>一行可以显示多个<br>默认大小是内容的大小；设置<strong>宽高有效</strong>(img,input)</p><p>2.实际布局的选择<br>a.左右结构使用<strong>行内块</strong><br><strong>didplay属性</strong><br><strong>定义</strong>：可以让任何标签变成块级、行内、行内块；隐藏标签</p><p>block(块)<br>inline(行内)<br>inline-block(行内块) - 默认左右间隙(因为换行产生)，这个间隙可以通过将父标签的字体大小设置为0来去掉<br>none(隐藏)</p><p>b.脱流/脱标（脱离标准流）<br><strong>方式一</strong>：float(浮动)<br><strong>方式二</strong>：定位（left,right,top,bottom  position)</p><p>#二、浮动<br><strong>特点</strong>：浮动会让标签脱流<br><strong>脱流</strong>：<br><strong>定义</strong>：让标签脱离标准流布局<br><strong>特点</strong>：<br>一行以显示多个<br>默认大小是内容大小，并且设置宽高有效’的方式布局</p><p>float属性<br>left<br>right</p><p>###文字环绕<br><strong>应用场景</strong>：在某一块内环绕文字<br><strong>做法</strong>：被环绕的标签浮动，环绕的标签不浮动</p><p>#三、清除浮动<br><strong>1.什么是高度塌陷</strong><br>当父标签不浮动，子标签浮动时，父标签就会产生高度塌陷的问题<br><strong>2.什么是清除浮动</strong><br>清除浮动指的是因为浮动而产生的高度塌陷<br><strong>a.方法一：添加空盒子</strong><br>在高度会塌陷的父标签的最后添加一个空的子标签div；然后给空的div添加样式，设置clear属性的值为both<br><strong>缺点</strong>：当高度塌陷的位置很多时，重复写的代码量过大<br><strong>(记)b.方法二：overflow</strong><br>给高度会塌陷的父标签，添加样式设置overflow属性值为hidden<br><strong>c.方法三：万能清除法</strong><br>选择高度会塌陷的父标签，给after状态添加样式，再给这个父标签添加样式：zoom:1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.clear:after&#123;</span><br><span class="line">    display: block;</span><br><span class="line">    clear: both;</span><br><span class="line">    content: &apos;&apos;;</span><br><span class="line">    visibility: hidden;</span><br><span class="line">    height: 0;</span><br><span class="line">&#125;</span><br><span class="line">clear&#123;</span><br><span class="line">    zoom: 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>#四、定位<br><strong>1.定位</strong><br><strong>特点</strong>：定位会让标签脱流</p><p><strong>2.定位属性</strong>：<br><strong>top</strong>:顶部的距离<br><strong>bottom</strong>:底部的距离<br><strong>left</strong>:左边的距离<br><strong>right</strong>:右边的距离<br>以上四个属性想要有效，必须通过position属性来说明参考对象<br><strong>position属性</strong>:<br><strong>initial和static - 默认值</strong>，<strong>不能定位</strong>（定位无效）<br><strong>absolute - 绝对定位</strong>:以第一个position的值不是默认值的父标签进行定位<br><strong>注意</strong>：body标签的position不是initial和static<br><strong>relative - 相对定位</strong>:相对于标准流定位（相对于自己在标准流中的位置进行定位）<br> 一般使用relative是在标签本身不需要定位，但是希望自己的子标签相对于自己定位的时候使用</p><p><strong>fixed - 相对于浏览器定位</strong><br><strong>sticky</strong> - 当浏览器内容没有超过一屏时，显示在内容最下面，当浏览器内容超过一屏时top和bottom有效，并且显示在浏览器底部（left和right无效）</p><p>#五、盒子模型<br><strong>1.</strong>网页上所有的可视标签都是一个盒子模型：<br>一个标签是由4个部分组成，分别是：</p><ul><li>content</li><li>padding</li><li>border</li><li>margin<br><strong>可见</strong>：content、padding、border<br><strong>不可见</strong>：margin(占位)</li></ul><p><strong>2.</strong>盒子模型的每个部分<br><strong>content</strong>：标签内容<br><strong>特点</strong>：<br><strong>1.</strong>标签宽高作用于content<br><strong>2.</strong>标签中的文字和子标签都是添加在content上<br><strong>padding</strong>：在内容的外部，默认是0，可见<br><strong>特点</strong>：<br><strong>1.</strong>：背景颜色也作用于padding<br><strong>2.</strong>：四个方向(top,bottom,left,right),可单独设置<br><strong>border</strong>：边框；默认是0，可见<br><strong>特点</strong>：<br><strong>1.</strong>四个方向，颜色和大小都可以单独设置<br><strong>border-radius</strong>：设置边框四个角的圆角弧度<br><strong>注意</strong>：没有border边框也可以设置，这时作用在padding上<br><strong>margin</strong>：外边距<br><strong>特点</strong>：<br>四个方向（top,bottom,left,right）可单独设置</p><p>#六、常用属性<br><strong>font-family</strong>:设置字体<br><strong>font-weight</strong>:设置文字加粗（取值100-900），100-700不断加粗<br><strong>font-style</strong>:设置字体倾斜(italic/oblique/normal)<br>italic/oblique - 倾斜<br>normal - 不倾斜<br><strong>text-align</strong>:设置内容水平方向对齐方式<br>left - 左对齐<br>right - 右对齐<br>center - 居中<br><strong>line-height</strong>:设置文字行高<br><strong>特点</strong>：可以通过设置行高和标签的高度一样来让标签中的内容在垂直方向上居中显示<br><strong>text-decoration</strong>:文字修饰<br>underline - 下划线<br>overline - 上划线<br>line-through - 删除线<br>none - 去掉文字修饰，即去除下划线<br><strong>text-indent</strong>:首行缩进<br><strong>说明</strong>：p标签的文字有效；一般用em(空格)为单位<br><strong>letter-spacing</strong>:设置每个文字之间的间隙（单位：px）<br><strong>background</strong>:设置背景<br>图片地址 是否平铺 x y 背景颜色</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了web前端中的表现标准CSS(层叠样式表)在网页中该如何布局相关的知识&lt;br&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>CSS基础</title>
    <link href="http://yoursite.com/2019/03/02/CSS%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2019/03/02/CSS基础/</id>
    <published>2019-03-02T09:48:03.111Z</published>
    <updated>2019-03-02T09:48:56.226Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了web前端中的表现标准CSS(层叠样式表)基础属性和用法<br><a id="more"></a></p><p>#一、css基础</p><p>#####1.什么是css(层叠样式表，简称样式表)<br>css是web中的表现标准，主要用来设置网页中的内容的布局和样式</p><p>#####2.怎么写css（基本语法）<br>a.语法<br>选择器{属性名1：属性值1；属性名2：属性值2；…}<br>b.说明<br>选择器 - 选中想要设置样式的标签<br>{} - 固定写法<br>属性 - 属性名和属性值用冒号连接，多个属性之间用分号隔开（如果没有分号，会导致后面的样式无效）<br>属性名必须是css提供的属性（大概两百多个）<br>属性值：表示大小的数值必须加单位，px - 像素  em - 空格数<br>也可以使用百分比（相对于父标签）</p><p>######c.常用属性<br>color - 字体颜色<br>background-color - 背景颜色<br>font-size - 字体大小<br>width - 宽度<br>height - 高度</p><p>#####3.css写在哪儿<br>a.内联样式表:将样式表写在标签的style属性中；这个样式表无需写‘选择器{}’，直接给属性赋值</p><p>b.内部样式表:将样式表写在style标签中（这个标签可以放在head中，也可以放在body中）</p><p>c.外部样式表：将样式表写在一个css文件中，然后在head中通过link导入</p><p>内联样式表不管什么情况，优先级最高<br>外部和内部样式表优先级一样，谁后写，认可谁</p><p>#####4.css中的值<br>颜色：颜色的英文单词，还可以是16进制的颜色值;rgb（红绿蓝的十进制数0-255）<br>rgba(红，绿，蓝，透明度) - 透明度0-1 0为完全透明</p><p>#二、选择器<br>选择器（选中标签）</p><p>#####1.元素选择器（标签选择器）<br>直接将标签名作为选择器，选中所有指定标签<br>例如：div{}, p{}</p><p>#####2.id选择器<br>将标签的id属性值前面加#号，作为选择器，选中id属性值是制动的值的标签<br>注意：一个页面中id值唯一（不同标签的id值不一样）<br>例如：#p2{}</p><p>#####3.class选择器（类选择器）<br>将标签的class属性值前加<strong>.</strong>作为选择器，选中所有class属性值是指定值的标签<br>例如：.c1{}</p><p>#####4.<em>(通配符)<br>直接将**号作为选择器，选中当前页面中所有的标签<br>例如：</em>{}</p><p>#####5.群组选择器<br>将多个选择器用逗号隔开，作为一个选择器，选中每个单独的选择器选中的所有标签<br>例如：a,p{} - 选中所有的a标签和p标签<br> #p1,div{} - 选中id是p1的标签和所有的div标签<br>.c1,#p1,a{} - 选中所有class值是c1,id值是p1的标签和所有a标签</p><p>#####6.层级选择器（后代选择器）<br>将多个选择器用空格隔开作为一个选择器，将层级选中最后一个选择器选中的标签<br>例如：div .c1 - 选中所有在div标签中，class是c1的标签<br>         .c1 .c2 #d1{} - 选中class是c1中class是c2中的id是d1的标签</p><p>#####7.选择器的权重值<br><strong>权重值不同</strong>：权重值越大，优先级越高<br><strong>权重值相同</strong>：谁写在后面，认可谁<br><strong>注意</strong>：不管什么情况，<strong>内联样式</strong>优先级最高<br>元素选择器：0001（1）<br>通配符：0001（1）<br>class选择器：0010（2）<br>id选择器：0100（4）</p><p>群组选择器：分开看每一个选择器的权重<br>后代选择器：用空格分开的所有的选择器权重之和</p><p>#三、伪类选择器<br><strong><em>普通选择器和伪类选择器的区别</em></strong><br><strong>普通选择器</strong>：选中某一个标签<br><strong>伪类选择器</strong>：选中标签某种状态<br><strong>1.语法：</strong><br>普通选择器：状态{}</p><p>2.常见状态<br><strong>a.link</strong>：<br>初始状态（对a标签来说，初始状态指的是标签对应的地址从来没有成功访问过）<br><strong>b.visited</strong><br>访问后的状态（一般针对于a标签有用）<br><strong>c.hover</strong><br>鼠标悬停在标签上的时候对应的状态<br><strong>d.active</strong><br>鼠标按住标签不放时对应的状态<br><strong>注意</strong>：<br>1.状态前不是只能写元素选择器，更不是只能写a标签<br>2.遵守’爱恨原则’,<strong>L</strong>o<strong>V</strong>e<strong>HA</strong>te</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了web前端中的表现标准CSS(层叠样式表)基础属性和用法&lt;br&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>HTML</title>
    <link href="http://yoursite.com/2019/03/02/HTML/"/>
    <id>http://yoursite.com/2019/03/02/HTML/</id>
    <published>2019-03-02T09:43:35.529Z</published>
    <updated>2019-03-02T09:45:28.988Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了web前端中的内容标准html（超文本标记语言）相关标签<br><a id="more"></a></p><p>#1.web标准</p><ul><li><p>web前端开发包含3个内容：html、css、js(javascript)<br>  表现标准：css(负责网页中的内容的布局和样式)<br>  内容标准:html(负责网页中的显示什么内容)<br>  行为标准:js(负责网页中内容的改变)</p></li><li><p>html(超文本标记语言，类似makedown)<br><strong>超文本</strong>：除了文字，还可以标记其它内容，比如：图片、音频、视频、flash、按钮、输入框、超链接等<br><strong>定义</strong>：一种超文本标记语言，通过不同的标记让内容以不一样的形式展示出来,如果语法错误，只会影响<br>  当前被标记的内容，不会影响其他内容</p></li><li><p>html基本结构<br>  html是由不同的标签(标记)组成</p></li></ul><p>1）语法<br>    标签语法：<br>    双标签(常规标签)：&lt;标签名 属性名=属性值 属性2=属性值2 …&gt;内容&lt;/标签名&gt;<br>    单标签：&lt;标签名 属性名=属性值 属性2=属性值2 …&gt;或者&lt;标签名 属性名=属性值 属性2=属性值2 …/&gt;</p><p>b.说明：<br>    &lt;&gt; - 固定写法<br>    标签名 - 标签名和前面的&lt;/或者后面的/&gt;之间不能有空隙<br>            标签名必须写html提供的标签（不是自己随便命名的）<br>    属性 - 属性名和属性值组成，属性名和属性值用等号连接。多个属性之间用空格隔开<br>          属性名一般不是自己命名，不同的标签有不同的属性<br>    内容 - 只有双标签才有；可以是任何内容（文本或者是其他标签）<br>    双标签是由开始标签和结束标签两个部分组成<br>    单标签没有结束标签，单标签有哪些，双标签有哪些是固定的</p><p>2）网页内容结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=&quot;utf-8&quot; /&gt;</span><br><span class="line">&lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">```  </span><br><span class="line">4.html版本</span><br><span class="line">广义h5:指的是html5+css+js</span><br><span class="line">狭义h5:指的是html5</span><br></pre></td></tr></table></figure></p><!--    DOCTYOE - 说明当前的html版本html - html5--><!--当前版本是html5--><p>&lt;!DOCTYPE html&gt;<br><!--网页基本结构--></p><p><html><br>    <head><meta name="generator" content="Hexo 3.8.0"><br>        <!--            head主要包含:            meta（原标签）            title            link            style            script            base        --><br>        <!--设置当前的页面的文本编码方式--><br>        <meta charset="utf-8"><br>        <!--设置网页标题--><br>        <title>认识html</title><br>    </head><br>    <body><br>        我是一个网页内容<br>    <script src="/live2dw/lib/L2Dwidget.min.js?0c58a1486de42ac6cc1c59c7d98ae887"></script><script>L2Dwidget.init({"model":{"jsonPath":"/live2dw/assets/koharu.model.json"},"display":{"position":"right","width":150,"height":300},"mobile":{"show":true},"log":false,"pluginJsPath":"lib/","pluginModelPath":"assets/","pluginRootPath":"live2dw/","tagMode":false});</script></body><br></html><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#一、文本标签</span><br><span class="line">##1.标题标签（h1-h6)</span><br><span class="line">**注意**：选标签不是样式，而是根据语义来选择</span><br><span class="line">如果网页中的文字是标题时，才选择相应的h标签</span><br><span class="line">```</span><br><span class="line">&lt;h1&gt;我是标题1&lt;/h1&gt;</span><br><span class="line">&lt;h2&gt;我是标题2&lt;/h2&gt;</span><br><span class="line">&lt;h3&gt;我是标题3&lt;/h3&gt;</span><br><span class="line">&lt;h4&gt;我是标题4&lt;/h4&gt;</span><br><span class="line">&lt;h5&gt;我是标题5&lt;/h5&gt;</span><br><span class="line">&lt;h6&gt;我是标题6&lt;/h6&gt;</span><br><span class="line">我是标题7</span><br><span class="line">```</span><br><span class="line">![image.png](https://upload-images.jianshu.io/upload_images/15041659-5c07f29e2ca8227e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">##2.段落标签（p)</span><br><span class="line">单纯的在网页上显示一段文字，就可以使用一个p标签</span><br><span class="line">根据语义来</span><br><span class="line">**注意**：网页中的文字，手动换行和空格无效</span><br></pre></td></tr></table></figure></p><p><br>咋大幅度发你的女房东看房的烦恼都可能的看法你的看法你的看法呢<br></p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">##3.文字标签（font)</span><br><span class="line">多个普通文字内容在一行显示</span><br></pre></td></tr></table></figure><br><br><font>党的十八大以来，习近平总书记始终关心并指导京津冀协同发展。新年伊始，习近平考察的第一站就选择了京津冀。他强调，京津冀协同发展是一个系统工程，不可能一蹴而就，要做好长期作战的思想准备。他要求，京津冀协同发展要“形成合力”、保持“<br>历史耐心和战略定力”、 “向改革创新要动力”。</font><br><br><br><font>党的十八大以来，习近平总书记始终关心并指导京津冀协同发展。新年伊始，习近平考察的第一站就选择了京津冀。他强调，京津冀协同发展是一个系统工程，不可能一蹴而就，要做好长期作战的思想准备。他要求，京津冀协同发展要“形成合力”、保持“            历史耐心和战略定力”、 “向改革创新要动力”。</font><br>        <hr><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">##4.强制换行和空格</span><br><span class="line">br单标签 - 专门用于网页中强制换行</span><br><span class="line">空格符号 - </span><br><span class="line">\&amp;nbsp;(一个&amp;nbsp代表是空一个像素)</span><br><span class="line">\&amp;emsp;（一个&amp;emsp代表空一个空格）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##5.文本效果标签</span><br><span class="line">加粗：</span><br><span class="line">&lt;b&gt;&lt;/b&gt;</span><br><span class="line">&lt;strong&gt;&lt;/strong&gt;</span><br><span class="line">倾斜：</span><br><span class="line">&lt;i&gt;&lt;/i&gt;</span><br><span class="line">&lt;em&gt;&lt;/em&gt;</span><br><span class="line"></span><br><span class="line">**注意**：strong和em有强调的意味</span><br></pre></td></tr></table></figure><br><br><p><font>党的十八大以来，<b>习近平总书记</b>始终关心并指导京津冀</font></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">##6.水平线（hr)</span><br><span class="line">hr标签 - 单标签，hr出现的位置显示一个水平线</span><br><span class="line">#二、列表标签</span><br><span class="line">##1.列表标签（ol, ul, dl)</span><br><span class="line">网页中多个内容具有相同意义，可以将它们放到一个列表中</span><br><span class="line">##2.有序列表（ol)</span><br><span class="line">**ol标签** - 代表整个列表；自动在元素的前面加序号</span><br><span class="line">**li标签**- 代表列表中的元素，元素内容除了文字还可以是图片，超链接等！！！</span><br><span class="line">```</span><br><span class="line">&lt;ol&gt;</span><br><span class="line">&lt;li&gt;一月&lt;/li&gt;</span><br><span class="line">&lt;li&gt;</span><br><span class="line">&lt;b&gt;二月&lt;/b&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;li&gt;三月&lt;/li&gt;</span><br><span class="line">&lt;/ol&gt;</span><br><span class="line">```</span><br><span class="line">![结果](https://upload-images.jianshu.io/upload_images/15041659-a2f388eb21ac73df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##3.无序列表（ul)</span><br><span class="line">**ul标签** - 代表整个列表，默认在元素前加黑点</span><br><span class="line">**li标签** - 代表列表中的元素，元素内容除了文字还可以是图片，超链接等！！！</span><br></pre></td></tr></table></figure><pre><code>&lt;ul&gt;    &lt;li&gt;语文&lt;/li&gt;    &lt;li&gt;数学&lt;/li&gt;    &lt;li&gt;英语&lt;/li&gt;&lt;/ul&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">![image.png](https://upload-images.jianshu.io/upload_images/15041659-c2ee90c1d8e057f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">##4.自定义列表（dl)</span><br><span class="line">dl - 代表整个列表</span><br><span class="line">dt - 列表分类名</span><br><span class="line">dd - 分类下的内容</span><br></pre></td></tr></table></figure><pre><code>&lt;dl&gt;    &lt;dt&gt;文科&lt;/dt&gt;        &lt;dd&gt;历史&lt;/dd&gt;        &lt;dd&gt;地理&lt;/dd&gt;    &lt;dt&gt;理科&lt;/dt&gt;        &lt;dd&gt;物理&lt;/dd&gt;        &lt;dd&gt;化学&lt;/dd&gt;    &lt;dt&gt;综合&lt;/dt&gt;        &lt;dd&gt;语文&lt;/dd&gt;        &lt;dd&gt;数学&lt;/dd&gt;        &lt;dd&gt;英语&lt;/dd&gt;&lt;/dl&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">![结果](https://upload-images.jianshu.io/upload_images/15041659-b4ff1bc4f37453a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">#三、图片标签</span><br><span class="line">图片标签（img)</span><br><span class="line">单标签</span><br><span class="line">1.src属性 - 设置网页上显示图片的地址</span><br><span class="line">这里的地址可以是本地图片路径，也可以是网络url </span><br><span class="line">2.title属性 - 图片标题；鼠标停留在图片上才会显示 </span><br><span class="line">3.alt属性 - 图片加载失败时的提示信息</span><br></pre></td></tr></table></figure><!--显示本地图片--><p><img src="img/0001.jpg" title="路飞" alt="加载失败"></p><!--显示网络图片--><p><img src="https://www.baidu.com/img/bd_logo1.png?qua=high" title="百度"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">![image.png](https://upload-images.jianshu.io/upload_images/15041659-60f0ceef32f7dd94.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">#四、超链接标签</span><br><span class="line">1.超链接（a)</span><br><span class="line">a标签 - 点击可以进行跳转对应的标签</span><br><span class="line">内容 - 可以在网页上看的见的，并且可以点击的部分</span><br><span class="line">可以是文字，也可以是其他标签，img标签居多</span><br><span class="line">href属性 - 规定点击超链接后跳转的位置</span><br><span class="line">a.一个网页地址 - 在浏览器中打开指定</span><br><span class="line">b.一个本地的html地址（一般写相对路径） - 跳转（打开）本地的一个html文件对应的网页</span><br><span class="line">c.一个#号 - 刷新网页,会重新加载网页（如果有网络请求，会重新请求）</span><br><span class="line">d.选择器 - 让网页滚动到指定位置（不会重新加载数据）</span><br><span class="line">2.target属性 - 加载新页面的方式</span><br><span class="line">_self（默认） - 在当前页面中加载新的页面</span><br><span class="line">_blank - 在新的窗口中加载新的页面（原页面不会覆盖）</span><br></pre></td></tr></table></figure></p><!--文字超链接--><p><a href="https://www.baidu.com" id="img2" target="_blank">百度一下</a><br><a href="03图片.html">图片</a><br><a href="#">刷新</a><br><a href="#img2">回到顶部</a></p><!--图片超链接--><p><a href="https://www.baidu.com" target="_blank" rel="noopener"><br><img src="img/0001.jpg"><br></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">![结果](https://upload-images.jianshu.io/upload_images/15041659-09b814b9f4aecd2e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">#五、表格标签</span><br><span class="line">##1.表格标签：</span><br><span class="line">1.table标签 - 代表整个表格</span><br><span class="line">2.tr标签 - 代表表格中的一行</span><br><span class="line">3.td标签 - 代表表格中的一个单元格</span><br><span class="line"></span><br><span class="line">2.标签属性</span><br><span class="line">a.border属性 - 设置边框宽度，table的属性</span><br><span class="line">b.bordercolor属性 - 设置边框颜色，table的属性</span><br><span class="line">c.cellspacing属性 - 单元格和单元格之间的间隙大小，table的属性</span><br><span class="line">d.cellpadding属性 - 单元格内容和边框之间的间距</span><br><span class="line">e.width - 设置宽度</span><br><span class="line">作为table属性 - 设置整个表格的宽度，每一列宽度按比例分配</span><br><span class="line">作为td的属性 - 设置td所在的列中对应的宽度，一列只设置一次</span><br><span class="line">g.height -设置高度</span><br><span class="line">作为table的属性 - 设置整个表格的高度，每一行宽度按比例分配</span><br><span class="line">作为tr的属性 -设置tr对应的行的高度</span><br><span class="line"></span><br><span class="line">h.bgcolor - 设置背景颜色</span><br><span class="line">作为table属性 - 设置整个表格的背景颜色</span><br><span class="line">作为tr的属性 - 设置一行的背景颜色</span><br><span class="line">作为td的属性 - 设置指定单元格的背景颜色</span><br><span class="line"></span><br><span class="line">i.align - 设置对齐方式（left/right/center)</span><br><span class="line">作为table属性 - 让整个表格居中</span><br><span class="line">作为tr属性 - 让一行中所有单元格的内容居中</span><br><span class="line">作为td属性 -让指定的单元格中的内容居中</span><br><span class="line"></span><br><span class="line">补充：html中的颜色：可以是颜色的英文单词；rgb的16进制值（写值时前需加#号）；例如：#ff0000</span><br></pre></td></tr></table></figure></p><!--创建一个三行三列的表格--><p><table align="center" bgcolor="bisque" border="1" bordercolor="black" cellspacing="0" cellpadding="10" width="600"><br><!--第一行--></table></p><p><tr align="center" bgcolor="seagreen" height="60"></tr></p><p><td width="100">姓名</td></p><p><td width="200">成绩</td></p><p><td width="50">是否留级</td><br><br><!--第二行--></p><p><tr height="100"></tr></p><p><td bgcolor="blue">张三</td></p><p><td align="center">89</td></p><p><td>否</td><br><br><!--第三行--></p><p><tr height="100"></tr></p><p><td></td></p><p><td></td></p><p><td></td><br><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">![image.png](https://upload-images.jianshu.io/upload_images/15041659-8af2abc575d0878d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">##六、细线表格</span><br><span class="line">细线表格</span><br><span class="line">将border设置为0</span><br><span class="line">cellspacing的大小设置为想要的宽度的大小</span><br><span class="line">设置整个表格的背景颜色为边框颜色，并保证每个单元格的颜色和背景颜色不一样</span><br></pre></td></tr></table></figure></p><p><table width="600" height="400" cellspacing="1" bgcolor="black"></table></p><p><tr bgcolor="white"><br>    <td></td><br>    <td></td><br>    <td></td><br></tr></p><p><tr bgcolor="white"><br>    <td></td><br>    <td></td><br>    <td></td><br></tr></p><p><tr bgcolor="white"><br>    <td></td><br>    <td></td><br>    <td></td><br></tr><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">![image.png](https://upload-images.jianshu.io/upload_images/15041659-a55c6f29b84b0a24.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line">#七、不规则的表格</span><br><span class="line">**rowspan** - 行合并</span><br><span class="line">**colspan** - 列合并</span><br></pre></td></tr></table></figure></p><p><table width="600" height="400" cellspacing="0" border="1"></table></p><p><tr><br>    <td></td><br>    <td></td><br>    <td></td><br>    <td rowspan="2"></td><br></tr></p><p><tr><br>    <td></td><br>    <td></td><br>    <td></td><br></tr></p><p><tr><br>    <td></td><br>    <td colspan="2"></td><br>    <td></td><br></tr><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">![image.png](https://upload-images.jianshu.io/upload_images/15041659-a52b167e7e651869.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line">#八、表单标签</span><br><span class="line">一般用来做用户收集，单独使用没意义，一般是结合相关标签使用(input，select,textarea)</span><br><span class="line">表单标签可以对包含在这个标签中的其他标签做信息的提交和重置</span><br><span class="line">action - 提交位置（接口相关）</span><br><span class="line">method - 请求方式（get和post)</span><br></pre></td></tr></table></figure></p><form action method="post"><p></p></form><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">2.input标签:单标签</span><br><span class="line">1）type属性：决定输入框的样式</span><br><span class="line">text(默认) - 普通的文本输入框</span><br><span class="line">2）name属性：主要用来区分数据，提交的时候是以**name值=value的形式提交**</span><br><span class="line">3）value属性：单标签中的value 相当于双标签中的内容，但是value只能是文本；</span><br><span class="line">设置value属性其实就是设置输入框默认显示的内容；</span><br><span class="line">修改内容其实是在修改value值</span><br><span class="line">placeholder - 占位符（提示信息）</span><br><span class="line">maxlenth - 输入框中最多输入的字符个数</span><br></pre></td></tr></table></figure><p></p><p><form action method="get"><br><!--普通输入文本--></form></p><p><input maxlength="10" placeholder="请输入电话号码" type="text" name="tel" id value="123456"></p><p><input type name="email" id value><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">##b.password:密码输入框</span><br><span class="line">placeholder - 占位符</span><br><span class="line">maxlenth - 最多能输入的字符个数</span><br></pre></td></tr></table></figure></p><p><input maxlength="8" placeholder="请输入密码" type="password" name="密码" id value="123456"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">##c.radio - 单选按钮</span><br><span class="line">name - 同一组数据对应的name值设置成一样的，才能做到单选</span><br><span class="line">value - 这里只是用于数据提交，不能显示</span><br><span class="line">checked - 设置为checked让按钮处于默认选中状态</span><br></pre></td></tr></table></figure></p><p><input type="radio" name="sex" id value="男生" checked="checked"><font>男</font></p><p><input type="radio" name="sex" id value="女生"><font>女</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">####让文字和按钮关联</span><br><span class="line">文字用label标签显示，设置for属性的值为想要关联的按钮的id的值</span><br><span class="line">这样点击文字和点击按钮的效果一样</span><br></pre></td></tr></table></figure></p><p><input type="radio" name="m" id="m1" value><label for="m1">已婚</label></p><p><input type="radio" name="m" id="m2" value><label for="m2">未婚</label></p><p><input type="radio" name="m" id="m3" value><label for="m3">保密</label><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">##d.checkbox:复选按钮</span><br><span class="line">name - 同一组数据的name要一样</span><br><span class="line">value - 这里只是用于数据提交，不能显示</span><br></pre></td></tr></table></figure></p><p><input checked="checked" type="checkbox" name="instr" id value="教育"><font>教育</font></p><p><input type="checkbox" name="instr" id value="教育"><font>教育</font></p><p><input type="checkbox" name="instr" id value="食品"><font>食品</font><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">##e.button:普通按钮</span><br><span class="line">value - value对应的值会显示在按钮上</span><br><span class="line">一般内容是文本</span><br></pre></td></tr></table></figure></p><p><input type="button" name id value="登录"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">##f.submit:提交按钮</span><br><span class="line">这个按钮的点击事件是将当前的form标签中，设置了name</span><br><span class="line">属性相关的标签的数据以name=value的形式提交</span><br></pre></td></tr></table></figure></p><p><input type="submit" name id value="提交"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">##g.reset:重置</span><br><span class="line">这个按钮的点击事件是将当前所在的form标签中，</span><br><span class="line">所有的标签设置为初始状态</span><br></pre></td></tr></table></figure></p><p><input type="reset" name id value="重置"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">###2.button标签</span><br><span class="line">除了文本还可以是其他图片等</span><br></pre></td></tr></table></figure></p><p><button><img src="img/0001.jpg" width="100" height="100"></button><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#九、下拉列表</span><br><span class="line">1.下拉列表（菜单）</span><br><span class="line">select标签 - 代表整个下拉列表</span><br><span class="line">option标签 - 代表列表中每个选项</span><br><span class="line">通过设置select属性的值为selected,来让这个选项默认选中</span><br><span class="line">optgroup - 设置label的值来对当前下拉菜单的内容进行分组</span><br></pre></td></tr></table></figure></p><pre><code>&lt;select name=&quot;省&quot;&gt;    &lt;optgroup label=&quot;省&quot;&gt;&lt;/optgroup&gt;    &lt;option value=&quot;四川省&quot;&gt;四川省&lt;/option&gt;    &lt;option value=&quot;云南省&quot;&gt;云南省&lt;/option&gt;    &lt;option value=&quot;吉林省&quot;&gt;吉林省&lt;/option&gt;    &lt;option selected=&quot;selected&quot; value=&quot;辽宁省&quot;&gt;辽宁省&lt;/option&gt;    &lt;option value=&quot;黑龙江省&quot;&gt;黑龙江省&lt;/option&gt;    &lt;optgroup label=&quot;直辖市&quot;&gt;&lt;/optgroup&gt;    &lt;option value=&quot;北京&quot;&gt;北京&lt;/option&gt;&lt;/select&gt;&lt;select name=&quot;市&quot;&gt;    &lt;option value=&quot;&quot;&gt;成都市&lt;/option&gt;    &lt;option value=&quot;&quot;&gt;绵阳&lt;/option&gt;    &lt;option value=&quot;&quot;&gt;达州&lt;/option&gt;&lt;/select&gt;</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#十、多行文本域</span><br><span class="line">textarea标签 - 输入框，可以同时显示多行内容</span><br><span class="line">（可以自动换行和上下滚动）</span><br><span class="line">name属性 - 区分和提交</span><br><span class="line">rows - 行数（不滚动最多能显示的行数，影响输入框的宽度）</span><br><span class="line">cols - 列数（一行显示的文字的数量，影响输入框的宽度）</span><br><span class="line">placeholder - 占位符</span><br><span class="line">maxlength - 限制最多输入的文字个数</span><br></pre></td></tr></table></figure><p><textarea placeholder="请输入你的问题" name="message" rows="4" cols="20">默认文字</textarea><br><code>`</code></p><p>#十一、无语义标签<br>div和span都是无语义标签<br>div是一个占一行<br>网页中分组分块，都可以使用div作为容器<br>span一行可以有多个</p><p>html中标签分类：行内标签和块级标签<br>块级标签：一个占一行，例如：div、h1、p、列表、table、tr、form、option<br>行内标签：一行显示多个,例如：span、font、td、input、select、textarea</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了web前端中的内容标准html（超文本标记语言）相关标签&lt;br&gt;
    
    </summary>
    
      <category term="web前端" scheme="http://yoursite.com/categories/web%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库(DCL数据控制)</title>
    <link href="http://yoursite.com/2019/02/27/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93(DCL%E6%95%B0%E6%8D%AE%E6%8E%A7%E5%88%B6)/"/>
    <id>http://yoursite.com/2019/02/27/MySQL数据库(DCL数据控制)/</id>
    <published>2019-02-27T09:39:10.161Z</published>
    <updated>2019-02-27T09:39:51.433Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了MySQL数据库中如何创建用户以及如何给用户添加权限、事务等操作<br><a id="more"></a></p><p>– 1.创建用户<br>– create user 用户名@登录地址<br>– 登录地址: （限制用户能够登录MySQL的主机地址）， ip地址(指定地址), localhost(数据库本机), %(任何位置)<br>CREATE USER ‘zhangshan‘@’%’ IDENTIFIED BY ‘yuting123456’;  </p><p>– 删除用户:  drop user 用户名;<br>DROP USER ‘zhangshan’;</p><p>– 2.授权<br>– grant 权限类型 on 数据库.对象 to 用户名;<br>GRANT SELECT on school.tb_student TO ‘zhangshan’;<br>GRANT UPDATE on school.tb_student TO ‘zhangshan’;<br>GRANT all PRIVILEGES ON school.<em> TO ‘zhangshan’;   – 添加所有权限<br>GRANT all PRIVILEGES ON school.</em> TO ‘zhangshan’ WITH GRANT OPTION;   – 添加所有权限，并且能够将自己的权限再授权给其他用户     </p><p>– 3.召回授权<br>– REVOKE 权限类型 on 数据库.对象 from 用户名;<br>REVOKE DELETE on school.<em> FROM ‘zhangshan’;<br>REVOKE all PRIVILEGES on school.</em> FROM ‘zhangshan’;<br>REVOKE all PRIVILEGES on school.* FROM ‘zhangshan’;<br>REVOKE SELECT on school.tb_student FROM ‘zhangshan’;<br>REVOKE UPDATE on school.tb_student FROM ‘zhangshan’;</p><p>– 4.事务<br>– 完成一个任务需要执行多条sql，但是要求这多个操作中只要有一个操作失败，这个任务就失败，数据全部还原；所有的操作都成功，整个任务才成功的时候就使用事务  </p><p>– 开启事务环境<br>BEGIN;<br>UPDATE tb_student set stuname=’444’ WHERE stuname=’222’;<br>UPDATE tb_student set birth2=’1990-1-1’ WHERE stuname=’222’;<br>– 提交事务(只有begin到commit之间的所有的sql都执行成功，才会执行commit; 否则执行rollback)<br>COMMIT;<br>– 事务回滚(放弃beigin到commit之间执行成功的所有sql语句的结果)<br>ROLLBACK;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了MySQL数据库中如何创建用户以及如何给用户添加权限、事务等操作&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库(DML高级查询)</title>
    <link href="http://yoursite.com/2019/02/26/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93(DML%E9%AB%98%E7%BA%A7%E6%9F%A5%E8%AF%A2)/"/>
    <id>http://yoursite.com/2019/02/26/MySQL数据库(DML高级查询)/</id>
    <published>2019-02-26T13:49:32.879Z</published>
    <updated>2019-02-27T09:40:00.038Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了MySQL数据库中DML高级查询的操作<br><a id="more"></a><br>– ========================添加约束=========================<br>– 1.创建表的时候添加约束<br>CREATE TABLE if not EXISTS t_college<br>(<br>collid int,<br>collname VARCHAR(20) NOT NULL,   – 创建表的时候添加约束<br>website VARCHAR(1024),<br>intro VARCHAR(200),<br>PRIMARY KEY(collid)<br>);</p><p>– 2.通过添加约束索引的方式添加约束<br>– a.添加约束<br>– alter table 表名 add constraint 索引名 约束 (字段名);<br>– 说明: 索引名 - 自己随便命名，用来指向当前添加的约束； 约束 - 需要添加的约束(支持唯一约束、主键约束和外键约束)</p><p>ALTER TABLE t_college ADD CONSTRAINT con_website UNIQUE (website);<br>– 给t_college表中的website添加unique约束，约束索引为con_website</p><p>– b.删除约束<br>– alter table 表名 drop index 约束索引;<br>ALTER TABLE t_college DROP index con_website;</p><p>– ====================外键和E.R图================<br>– 1.什么是外键：表中的某个字段的值是根据其他表中主键的值来确定的。那么这个字段就是外键<br>– 1.1 多对一的外键的添加： 将外键添加到多的一方对应的表中<br>–     一对一的外键的添加： 将外键随便添加到哪一方，同时添加值唯一约束<br>–     多对多的外键的添加： 关系型数据库中，两张表没法实现多多的关系，需要一个中间表。(中间表有两个外键分别参照多多的两个表的主键)<br>– 1.2 怎么添加外键： </p><p>– a.添加外键对应的字段<br>alter TABLE tb_student add COLUMN collid int;</p><p>– b.给设计好的外键对应的字段添加外键约束<br>– alter table 表1 add constraint 索引名 foreign key (字段1) references 表2 (字段2);<br>–   - 将表1中的字段1设置为外键，并且让这个外键的值参照表2中的字段2<br>ALTER TABLE tb_student ADD CONSTRAINT fk_collid_stu<br>FOREIGN KEY (collid)<br>REFERENCES  tb_college (collid);</p><p>– c. 删除外键约束<br>– alter table 表名 drop foreign key 外键索引名;    - 可以删除外键约束，但是外键索引还存在；需要额外的把索引删掉<br>– 注意: 删除外键约束的时候直接删除约束的索引无效，必须先将约束删掉，然后再删除索引.<br>ALTER TABLE tb_student DROP FOREIGN KEY fk_collid_stu;<br>ALTER TABLE tb_student DROP INDEX fk_collid_stu; </p><p>– d. 多对多的外键约束<br>– 添加学生的外键约束<br>ALTER TABLE tb_score ADD CONSTRAINT fk_stuid_score<br>FOREIGN KEY (stuid)<br>REFERENCES tb_student (stuid);</p><p>– 添加课程的外键约束<br>ALTER TABLE tb_score ADD CONSTRAINT fk_couid_score<br>FOREIGN KEY (couid)<br>REFERENCES tb_course (couid);</p><p>– ==================查询的高级操作=================<br>– 1.聚合：max()/min()/sum()/avg()/count()<br>– SELECT 聚合函数(字段) FROM 表名 WHERE 条件;   – 按条件多表查询指定字段数据，然后将查询结果做相应的聚合运算。聚合运算的结果是最后结果<br>SELECT mark FROM tb_score;    – 获取tb_score表中的所有分数值<br>SELECT max(mark) as maxmark FROM tb_score;      – 获取tb_score表中所有分数的最大值<br>SELECT min(mark) FROM tb_score;<br>SELECT sum(mark) FROM tb_score;<br>SELECT avg(mark) FROM tb_score WHERE scoreid&gt;=123;   – 计算平均值的时候如果参与运算的对象的值为NULL,那么这个数据不会参与计算<br>SELECT count(mark) FROM tb_score WHERE mark&gt;=90;</p><p>– 2.分组<br>– SELECT 字段操作  FROM 表名 WHERE 条件 GROUP BY(字段2);<br>–         将指定表中满足条件的记录按照字段2的进行分组(值是一样的在一个组里面), 然后再讲每个分组作为整体按照指定字段进行指定聚合操作<br>– 求每个学生的平均成绩<br>SELECT stuid,avg(mark) FROM tb_score WHERE scoreid &lt;= 115 GROUP BY(stuid) ;<br>– 注意:a.字段操作的位置除了分组字段不用聚合，其他字段都必须聚合   b.分组的时候where要放到分组前对需要分组的数据进行筛选</p><p>– having: 分组的时候，在分组后用having代替where来对分组后的数据进行筛选<br>– 获取平均分数大于60分的学生的id<br>SELECT stuid,avg(mark) FROM tb_score GROUP BY(stuid) HAVING avg(mark)&gt;60;</p><p>– 3.子查询: 将一个查询操作的结果作为另外一个查询的数据源<br>– 在tb_score表中获取成绩是大于90分的学生的id<br>SELECT stuid FROM tb_score WHERE mark&gt;90 and stuid is not NULL;   </p><p>– 获取成绩大于90分的学生的名字<br>SELECT stuname FROM tb_student WHERE stuid in<br>(SELECT stuid FROM tb_score WHERE mark&gt;90 and stuid is not NULL);  </p><p>SELECT stuid,mark FROM tb_score WHERE mark &gt; 90 and stuid is  not NULL;<br>– 将一个查询的结果作为查询对象提供给另外一个查询。但是第一个查询结果需要重命名<br>SELECT mark FROM (SELECT stuid,mark FROM tb_score WHERE mark &gt; 90 and stuid is  not NULL) as t2;</p><p>– =================================连接查询=======================================<br>– 1.接连查询: 同时查询多个表中的数据<br>– SELECT * FROM 表名1,表名2… WHERE 连接条件;<br>– 连接查询如果不加连接条件，结果是一个笛卡尔积：（a,b,c）(1,2,3) –&gt; (a1,a2,a3,b1,b2,b3,c1,c2,c3)<br>– (余婷, 骆昊, 王海飞) (设计学院，信通学院) –&gt; 笛卡尔积</p><p>– 查询每个老师对应的学院<br>SELECT teaname, collname FROM tb_college, tb_teacher WHERE tb_teacher.collid=tb_college.collid;<br>– 查询学生姓名对应的学科名的分数<br>SELECT stuname, couname, mark FROM tb_student, tb_course, tb_score<br>WHERE tb_score.stuid=tb_student.stuid and tb_score.couid=tb_course.couid;</p><p>– 查询学生名对应的学生的平均成绩<br>– SELECT stuid, AVG(mark) as avg_mark FROM tb_score GROUP BY(stuid);<br>SELECT stuname, avg_mark FROM<br>tb_student,<br>(SELECT stuid, AVG(mark) as avg_mark FROM tb_score GROUP BY(stuid)) as temp_t<br>WHERE tb_student.stuid = temp_t.stuid;  </p><p>– 查询平均分高于80分的学生名字和对应的平均分分数<br>SELECT stuname, avg_mark FROM<br>tb_student,<br>(SELECT stuid, AVG(mark) as avg_mark FROM tb_score GROUP BY(stuid) HAVING AVG(mark)&gt;80) as temp_t<br>WHERE tb_student.stuid = temp_t.stuid; </p><p>– 查询平均分高于80分的学生名字和对应的平均分分数<br>– 注意:如果连接查询的时候既有连接条件又有筛选条件，我们要把筛选条件写在连接条件后边<br>SELECT stuname, avg_mark FROM<br>tb_student,<br>(SELECT stuid, AVG(mark) as avg_mark FROM tb_score GROUP BY(stuid)) as temp_t<br>WHERE tb_student.stuid = temp_t.stuid and avg_mark&gt;80;   </p><p>– 2.内连接<br>– SELECT * FROM 表1 inner join 表2 on 表2的连接条件 inner join 表3 on 表3的连接条件 …;<br>– 注意: 中间表写在最前面(存在关联其他表外键的表)<br>– 查询学生姓名对应的学科名的分数<br>SELECT stuname, couname, mark FROM tb_score<br>INNER JOIN tb_student ON tb_student.stuid=tb_score.stuid<br>INNER JOIN tb_course ON tb_course.couid=tb_score.couid<br>WHERE mark &lt; 60;  </p><p>– 3.外连接<br>– 外连接分为左外连接、右外连接和全连接， 但是在MySQL中支持左外连接和右外连接<br>– 表1(左表) left/right/inner join 表2(右表)<br>– 左外连接：将左表中对应字段的所有数据取出，然后再对应的右表中字段的值，如果右表对应的值不存在结果就为null<br>– 右外连接：将右表中对应字段的所有数据取出，然后再对应的左表中字段的值，如果左表对应的值不存在结果就为null </p><p>– 查所有学生名对应的成绩<br>– SELECT stuname, mark FROM tb_score INNER JOIN tb_student ON tb_student.stuid=tb_score.stuid;<br>SELECT stuname, mark FROM tb_score  RIGHT JOIN tb_student ON tb_student.stuid=tb_score.stuid;   </p><p>– =================================字段索引=======================================<br>– 字段的索引就相当于于目录，作用是为了能够快速的对这个字段进行查找<br>– 添加索引的好处是可以大大的提高查询效率； 缺点是：1.会消耗额外的存储空间， 2.会让添加和删除的效率降低<br>– 建议: 1.索引不能滥用  2.如果项目中针对某个字段的查询很频繁，建议加个对应的索引<br>– EXPLAIN： 获取执行计划</p><p>EXPLAIN SELECT * FROM tb_student WHERE stuid=110;</p><p>EXPLAIN SELECT * FROM tb_student WHERE stuname=’张三’;</p><p>– 添加索引: create index 索引名称 on 表名 (字段名);  - 给指定表中的指定字段添加索引<br>CREATE INDEX index_stuname on tb_student (stuname);   – 给名字加索引<br>CREATE INDEX index_stuname1 on tb_student (stuname(1));    – 按姓加索引</p><p>– 删除索引<br>ALTER TABLE tb_student DROP INDEX index_stuname;   </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了MySQL数据库中DML高级查询的操作&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>MySQL数据库(DDL和DML基础)</title>
    <link href="http://yoursite.com/2019/02/26/MySQL%E6%95%B0%E6%8D%AE%E5%BA%93(DDL%E5%92%8CDML%E5%9F%BA%E7%A1%80)/"/>
    <id>http://yoursite.com/2019/02/26/MySQL数据库(DDL和DML基础)/</id>
    <published>2019-02-26T13:48:02.627Z</published>
    <updated>2019-02-26T13:48:02.817Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了MySQL数据库中的DDL(数据定义)和DML(数据操作)<br><a id="more"></a></p><p>– SQL语法 </p><p>– DDL(数据定义语言)</p><p>– DML(数据操作语言）</p><p>– DCL(数据控制语言)  </p><p>– 注意: SQL中大小写不敏感（大写和小写是一样的）; 每条SQL语句必须以分号结束</p><p>– 一.DDL - 主要提供数据库和表的创建、删除和修改  </p><p>– 0. 删除数据库: drop database 数据库名;</p><p>DROP DATABASE school;   – 直接删除指定数据库</p><p>DROP DATABASE if EXISTS school;   – 如果指定的数据库存在就删除数据库</p><p>– 1.创建数据库: create database 数据库名;</p><p>create database school;  – 直接创建指定数据库</p><p>CREATE database if not EXISTS school;  – 当指定数据库不存在的时候才创建数据库</p><p>create database if not EXISTS school default charset utf8;   – 创建数据库的时候设置字符集编码方式为utf8,让数据库支持中文数据的存储</p><p>– 2.使用/切换数据库: use 数据库名;</p><p>use school;</p><p>– 3.新建表: create table if not exists 表名(字段名1 类型1, 字段2 类型2,…);</p><p>– 注意： a. 表名一般需要加前缀’t’或者’tb’    b.字段用来确定表中要存储哪些数据，字段名随便命名但是不能是关键字  c.数据类型必须是MySQL支持的数据类型</p><p>– 常用数据类型: int-整数, char(size)-定长字符串, varchar(size)-不定长字符串, text-字符串, bit-布尔, date-日期</p><p>CREATE TABLE if not EXISTS t_student(stuid int, stuname varchar(20), gender bit, birth date);  </p><p>– 新建表并且添加约束: create table if not exists 表名(字段名1 类型1 约束1, 字段2 类型2 约束2,…);</p><p>– 常见约束: not null - 不为空,  default  - 设置默认值,  unique - 值唯一,  primary key - 主键约束 </p><p>– 主键约束:  主键的值可以确定列表中唯一一条记录(通过一个主键值可以找到表中的唯一一条记录)</p><p>– 注意: auto_increment只针对主键有效,并且主键的类型是整型;</p><p>CREATE TABLE if not EXISTS t_student</p><p>(</p><p>stuid int not null auto_increment, </p><p>stuname varchar(20) not null, </p><p>gender bit DEFAULT 1, </p><p>birth date,</p><p>PRIMARY KEY(stuid)  – 将字段stuid作为当前表的主键（设置主键可以间接约束这个字段的值是唯一的）</p><p>);</p><p>– 4.删除表: DROP TABLE if EXISTS 表名;</p><p>DROP TABLE if EXISTS t_student;  </p><p>– 清空表中的数据: TRUNCATE TABLE 表名;</p><p>TRUNCATE TABLE t_student;</p><p>– 5.修改表</p><p>– 5.1 添加列: alter TABLE 表名 add COLUMN 字段名 字段类型 约束;</p><p>alter TABLE t_student add COLUMN score FLOAT(8,2) DEFAULT 0;</p><p>– 5.2 删除列: alter TABLE 表名 drop COLUMN 字段名;</p><p>alter TABLE t_student drop COLUMN gender;</p><p>– 二、DML(数据操作语言) - 主要针对数据库中数据的增、删、改、查</p><p>– 1.增(添加数据/记录)</p><p>– 1.1插入数据/记录: insert into 表名 values(值1, 值2, 值3,….)  - 依次给指定表中的字段赋值</p><p>INSERT into t_student VALUES(100, ‘张三’, 0, ‘2019-9-23’);</p><p>– 1.2插入数据/记录: insert into 表名(字段名1,字段名2,…) values(值1, 值2,…) -以指定的顺序给指定的字段赋值  </p><p>INSERT into t_student(stuname, birth) VALUES(“小花”, date(now()));   – 一次插入一条记录</p><p>– 一次插入多条记录</p><p>INSERT into t_student(stuname, birth) VALUES</p><p>(“小花”, date(now())),</p><p>(‘小明’, ‘2018-9-8’),</p><p>(‘路飞’, ‘1999-12-16’),</p><p>(‘佐助’, ‘2000-10-12’);</p><p>– 值的问题: sql中是数字对应的值直接写，字符串需要使用引号引起来，bit类型的值只有0或者1, 时间可以用内容是满足时间格式字符串也可以是通过时间函数获取的值</p><p>– 时间函数: now() - 当前时间  date(now()) - 当前日期   year(now()) - 当前年   month(now()) - 当前月 ….  </p><p>– 2.删（删除数据/记录） </p><p>– delete from 表名;    - 删除指定表中所有记录</p><p>DELETE FROM t_student;</p><p>– delete from 表名 where 条件语句;    - 删除满足条件的记录  </p><p>– SQL中的条件语句: =(判断是否相等), &lt;&gt;(不等于,和python中的!=功能一样), &gt;, &lt;, &gt;=, &lt;=</p><p>DELETE FROM t_student WHERE stuid=100;     – 删除t_student表中stuid的值等于100的记录  </p><p>DELETE FROM t_student WHERE stuname=’小花’;  – 删除t_student表中stuname的值等于’小花’的记录</p><p>DELETE FROM t_student WHERE stuid&lt;108;   – 删除t_student表中stuid的值小于’小花’的记录  </p><p>– 3.改(修改数据/记录) </p><p>– update 表名 set 字段1=新值1, 字段2=新值2,…;      - 将指定表中所有行的指定列/字段的值赋值为新值</p><p>UPDATE t_student set birth=’1999-10-1’, gender=1;</p><p>– update 表名 set 字段1=新值1, 字段2=新值2,… where 条件语句;  -将表中满足条件的行中指定字段的值赋值为新值  </p><p>UPDATE t_student set gender=0 WHERE stuname=’小花’;</p><p>– 通配符%: 表示任意个数的任意字符（包括0个）</p><p>UPDATE t_student set birth=’2000-01-01’ WHERE stuname LIKE ‘小%’;    – 修改stuname是以’小’开头的行对应的birth的值</p><p>UPDATE t_student set birth=’2111-01-01’ WHERE stuname LIKE ‘%小%’;  </p><p>– 统配符_: 表示一个任意字符</p><p>UPDATE t_student set birth=’2444-01-01’ WHERE stuname LIKE ‘小_’;    –  修改stuname只有两个字符，并且第一个字符是‘小’对应的行的birth的值</p><p>– 注意: 通配符只针对字符串有效!  </p><p>– 4.查(获取数据)</p><p>– 4.1直接查询</p><p>– select * from 表名;    - 获取指定表中所有行和所有的列(所有数据)</p><p>SELECT * FROM t_student;</p><p>– select 字段名1,字段名2,… from 表名;   - 获取指定表中所有行指定的列 </p><p>SELECT stuname,stuid FROM t_student;   </p><p>– select * from 表名 where 条件;    - 获取指定表中所有满足条件的行所有列的数据  </p><p>SELECT * FROM t_student WHERE stuid&gt;115;    </p><p>– 4.2列重命名</p><p>– select 字段1 as 新字段1, 字段2 as 新字段2,… from 表名;</p><p>– 注意： 这儿的as可以省略</p><p>SELECT stuid as ‘学号’, stuname, gender as ‘性别’ FROM t_student;    – 对查询结果中的stuid和gender字段进行重命名</p><p>– 4.3对查询结果重新赋值(一般针对布尔数据)</p><p>– select if(字段名,值1,值2) from 表名;    -查询指定字段，并且判断字段对应的值是0还是1，如果是1结果为值1，否则为值2</p><p>– 注意: 这儿的if的用法是MySQL专有的</p><p>– MySQL写法: if(字段, 新值1, 新值2)</p><p>SELECT stuname,if(gender,’男’,’女’) as ‘性别’ FROM t_student;    </p><p>– 通用写法:  case 字段 when 值 then 新值1 else 新值2 end</p><p>SELECT case gender WHEN 1 THEN ‘男’ ELSE ‘女’ END as ‘性别’ FROM t_student;</p><p>– 4.4对列进行合并</p><p>– select concat(字段1,字段2,…) from 表名;</p><p>SELECT CONCAT(stuname,stuid) as ‘name_id’ FROM t_student;</p><p>SELECT CONCAT(stuname,’:’,stuid) as ‘name_id’ FROM t_student;</p><p>– 注意: 数字和字符串数据可以合并，bit类型的数据不可以合并</p><p>– SELECT CONCAT(stuname,’:’,gender) as ‘name_id’ FROM t_student;   </p><p>– 4.5模糊查询 - 查询的时候时候通过like条件来指定查询对象</p><p>– sql中支持逻辑运算符and(逻辑与运算)和or(逻辑或运算)，not(逻辑非)</p><p>SELECT * FROM t_student WHERE stuname like ‘%飞%’ or not stuid &lt; 110;  </p><p>– 4.6排序(先按之前的任何语法进行查询在排序)</p><p>– select * from 表名 order by 字段;      - 对查询结果按照指定字段的值进行升序排序 </p><p>– select * from 表名 order by 字段 asc;      - 对查询结果按照指定字段的值进行升序排序 </p><p>– select * from 表名 order by 字段 desc;      - 对查询结果按照指定字段的值进行降序排序</p><p>SELECT * FROM t_student ORDER BY gender;    – 按性别升序排序</p><p>SELECT * FROM t_student ORDER BY stuid ASC;  – 按学号升序排序</p><p>SELECT * FROM t_student ORDER BY stuid DESC;  – 按学号降序排序</p><p>– 排序的时候可以通过在order by的后边加多个字段，进行联排。排序的时候前面的字段的优先级高些</p><p>SELECT * FROM t_student ORDER BY gender ASC, stuid DESC;   – 先按性别进行升序排序，然后再按学号降序排序。  </p><p>– 4.7限制 </p><p>– select * from 表名 limit N;    – 获取查询结果的前N条记录</p><p>SELECT * FROM t_student LIMIT 3;   – 获取查询结果的前3条记录</p><p>– select * from 表名 limit M offset N;   – 对查询结果跳过前N条数据，取M条数据出来  </p><p>SELECT * FROM t_student LIMIT 3 offset 4;  – 跳过前4数据，然后取3条数据</p><p> – =================================sql基础补充===============================</p><p>– 1.条件语句的写法</p><p>– 在SQL中可以通过 <code>where 条件语句</code>来对操作对象进行筛选 - 筛选  </p><p>– a. 比较运算符： =, &lt;&gt;, &gt;, &lt;, &gt;=, &lt;=</p><p>– 注意: 判断一个字段的值是否为空不用使用=和&lt;&gt;, 而是使用<code>is null</code> 和 <code>is not null</code></p><p>SELECT addr FROM t_student;</p><p>SELECT stuname FROM t_student WHERE addr is NULL;     – 判断是否为NULL（空）</p><p>SELECT stuname FROM t_student WHERE addr=’’;     – 判断是否是空串</p><p>– b. 逻辑运算符: and, or, not  </p><p>– c. where 字段名  between 值1 and 值2   –  筛选指定的字段的值在值1和值2之间</p><p>SELECT stuname,birth FROM t_student WHERE birth BETWEEN ‘1990-1-1’ AND ‘1999-12-31’;  </p><p>– d. where 字段名 in 集合   – 筛选出字段值是集合中的元素;(集合是使用括号括起来里面多个值)</p><p>SELECT * FROM t_student WHERE stuname in (‘小花’, ‘小明’, ‘路飞’);  </p><p>– e. like操作 </p><p>– 2.数据类型 </p><p>– varchar(size): 不定长字符串，size决定的是最大长度</p><p>– char(size): 定长字符 </p><p>– text: 不限长度(最大是255个字符)</p><p>– int/tinyint(-128~127)</p><p>– FLOAT(size,d)/DOUBLE(size,d)  - 这儿的size和d的值都有约束效果</p><p>– bit: 只有0和1两个值</p><p>– date/datetime/time: 值可以是时间函数的结果，也可以时间字符串；计算或者是比较的时候内部是按时间处理的</p><p>UPDATE t_student SET tel=’1367819230’;</p><p>ALTER TABLE t_student ADD COLUMN intro VARCHAR(10);</p><p>SELECT * FROM t_student;  </p><p>– 3.去重 </p><p>SELECT DISTINCT addr FROM t_student; </p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了MySQL数据库中的DDL(数据定义)和DML(数据操作)&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>多线程技术</title>
    <link href="http://yoursite.com/2019/02/24/python%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%8A%80%E6%9C%AF/"/>
    <id>http://yoursite.com/2019/02/24/python多线程技术/</id>
    <published>2019-02-24T09:10:48.448Z</published>
    <updated>2019-02-24T09:10:48.643Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pyhton中的多线程技术<br><a id="more"></a></p><p><strong>进程</strong>：一个正在运行的应用程序<br><strong>主线程</strong>：在默认情况下，一个进程有且只有一个线程<br>一个进程中允许有多个线程同时对不同任务进行处理<br><strong>应用场景</strong>：耗时操作</p><p>python内置标准库：threading<br>Thread：threading中的线程类<br><strong>如何提供一个子线程</strong><br>直接创建一个线程对象<br>(需要一个子线程就创建一个Thread类的对象)</p><p>###方法一、通过Thread类直接创建子线程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import time</span><br><span class="line">from datetime import datetime</span><br><span class="line"># python多线程技术对应的模块</span><br><span class="line">import threading</span><br><span class="line"></span><br><span class="line">def download(file):</span><br><span class="line">    print(&apos;%s开始下载&apos; % file, datetime.now())</span><br><span class="line">    # sleep(时间)  - 程序执行到这个位置等待指定的时候再接着往后面执行</span><br><span class="line">    time.sleep(10)</span><br><span class="line">    print(&apos;%s下载结束&apos; % file, datetime.now())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    print(&apos;程序开始&apos;)</span><br><span class="line">    # print(datetime.now())</span><br><span class="line">    # 1.在主线程中下载三个电影 (总耗时30s)</span><br><span class="line">    # download(&apos;枪王之王.mp4&apos;)</span><br><span class="line">    # download(&apos;开国大典&apos;)</span><br><span class="line">    # download(&apos;黄金国.mp4&apos;)</span><br><span class="line"></span><br><span class="line">    # 2.在三个子线程中同时下载三个电影</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Thread(target,args)   -  创建子线程对象</span><br><span class="line">    说明:</span><br><span class="line">    target - Function，需要传一个函数(这个函数中的内容会在子线程中执行)</span><br><span class="line">    args - 元祖,target对应的函数的参数</span><br><span class="line">    当通过创建好的子线程对象调用start方法的时候，会自动在子线程中调用target对应的函数, 并且将args中值作为实参</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    # 创建线程对象</span><br><span class="line">    t1 = threading.Thread(target=download, args=(&apos;枪王之王.mp4&apos;,))</span><br><span class="line">    t2 = threading.Thread(target=download, args=(&apos;开国大典.mp4&apos;,))</span><br><span class="line">    t3 = threading.Thread(target=download, args=(&apos;黄金国.mp4&apos;,))</span><br><span class="line"></span><br><span class="line">    # 开始执行t1对应的子线程中的任务(实质就是在子线程中调用target对应的函数)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    t3.start()</span><br><span class="line"></span><br><span class="line">    print(&apos;=============&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>###方法二、创建一个子类继承Thread线程类，从而实现自己的线程类<br><strong>创建子类的步骤</strong>：<br>1.声明类继承Thread<br>2.重写run方法。<br><strong>目的</strong>：任务就是需要在子线程中执行的任务<br>3.需要线程对象的时候，创建当前声明的类的对象<br>4.通过线程对象.start方法在子线程中去执行run方法中的任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">import threading</span><br><span class="line">import time as time1</span><br><span class="line">from datetime import time</span><br><span class="line"></span><br><span class="line">class DownloadThread(threading.Thread):</span><br><span class="line">    &quot;&quot;&quot;下载类&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, file):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.file = file</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;开始下载:&apos;+self.file)</span><br><span class="line">        print(&apos;run:&apos;, threading.current_thread())</span><br><span class="line">        time1.sleep(10)</span><br><span class="line">        print(&apos;%s下载结束&apos; % self.file)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 获取当前线程</span><br><span class="line">    print(threading.current_thread())</span><br><span class="line"></span><br><span class="line">    t1 = DownloadThread(&apos;沉默的羔羊.mp4&apos;)</span><br><span class="line">    t2 = DownloadThread(&apos;恐怖游轮.mp4&apos;)</span><br><span class="line">    # 调用start的时候会自动在子线程中调用run方法</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    # 注意：如果直接用对象调用run方法，run方法中的任务会在主线程执行</span><br><span class="line">    # t1.run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">from threading import Thread</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">import time</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DownloadThread2(Thread):</span><br><span class="line">    &quot;&quot;&quot;下载类&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, file, time):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.file = file</span><br><span class="line">        self.time = time</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        print(&apos;开始下载:&apos;+self.file)</span><br><span class="line">        # t = randint(5, 10)</span><br><span class="line">        time.sleep(self.time)</span><br><span class="line">        print(&apos;%s下载结束, 总共耗时:%ds&apos; % (self.file, self.time))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class DownloadImageThread(Thread):</span><br><span class="line">    def __init__(self, url):</span><br><span class="line">        super().__init__()</span><br><span class="line">        self.url = url</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        # 开始下载</span><br><span class="line">        file_name = re.split(r&apos;/&apos;, self.url)[-1]</span><br><span class="line">        print(file_name)</span><br><span class="line">        print(&apos;%s开始下载&apos; % file_name)</span><br><span class="line">        response = requests.get(self.url)</span><br><span class="line">        content = response.content</span><br><span class="line"></span><br><span class="line">        with open(&apos;images/&apos;+file_name, &apos;bw&apos;) as f:</span><br><span class="line">            f.write(content)</span><br><span class="line"></span><br><span class="line">        print(&apos;%s下载结束&apos; % file_name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def creat_thread():</span><br><span class="line">    t1 = DownloadThread2(&apos;电影1&apos;, 6)</span><br><span class="line">    t2 = DownloadThread2(&apos;电影2&apos;, 4)</span><br><span class="line">    t1.start()</span><br><span class="line">    t2.start()</span><br><span class="line">    # 线程对象调用join方法，会导致join后的代码会在线程中的任务结束后才执行</span><br><span class="line">    t1.join()</span><br><span class="line">    t2.join()</span><br><span class="line">    print(&apos;电影下载结束!&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # t1 = DownloadImageThread(&apos;https://image.haha.mx/2015/12/04/middle/2082175_c5c3cc05eb73e4023149e663475d3ab4_1449192201.gif&apos;)</span><br><span class="line">    # t1.start()</span><br><span class="line">    #</span><br><span class="line">    # t2 = DownloadImageThread(&apos;http://img4.imgtn.bdimg.com/it/u=534897622,845095650&amp;fm=26&amp;gp=0.jpg&apos;)</span><br><span class="line">    # t2.start()</span><br><span class="line"></span><br><span class="line">    t0 = Thread(target=creat_thread)</span><br><span class="line">    t0.start()</span><br><span class="line"></span><br><span class="line">    print(&apos;========&apos;)</span><br><span class="line">    for x in range(100):</span><br><span class="line">        time.sleep(1)</span><br><span class="line">        print(x)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pyhton中的多线程技术&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>pygame</title>
    <link href="http://yoursite.com/2019/02/24/pygame/"/>
    <id>http://yoursite.com/2019/02/24/pygame/</id>
    <published>2019-02-24T09:09:02.351Z</published>
    <updated>2019-02-24T09:09:02.585Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pyhton中第三方游戏库pygame的用法<br><a id="more"></a></p><p>####1.游戏基本框架<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 1.初始化pygame, 做准备工作</span><br><span class="line">  pygame.init()</span><br><span class="line"></span><br><span class="line">  # 2.创建游戏窗口</span><br><span class="line">  &quot;&quot;&quot;</span><br><span class="line">  set_mode(窗口大小)  ==   set_mode((宽, 高))  - 会返回一个surface类型的对象</span><br><span class="line">  窗口大小对应的值是一个元祖</span><br><span class="line">  &quot;&quot;&quot;</span><br><span class="line">  window = pygame.display.set_mode((400, 600))</span><br><span class="line">  # 设置窗口标题</span><br><span class="line">  pygame.display.set_caption(&apos;游戏&apos;)</span><br><span class="line"></span><br><span class="line">  # 设置窗口背景颜色</span><br><span class="line">  &quot;&quot;&quot;</span><br><span class="line">  fill(颜色)  </span><br><span class="line">  颜色是一个元祖，元祖有三个int类型的元素，返回是0~255；分别代表R,G,B</span><br><span class="line">  </span><br><span class="line">  计算机三原色: 红、绿、蓝</span><br><span class="line">  红色 (255, 0, 0)</span><br><span class="line">  绿色 (0, 255, 0)</span><br><span class="line">  蓝色 (0, 0, 255)</span><br><span class="line">  白色 (255, 255, 255)</span><br><span class="line">  黑色 (0, 0, 0)</span><br><span class="line">  &quot;&quot;&quot;</span><br><span class="line">  window.fill((255, 255, 255))</span><br><span class="line"></span><br><span class="line">  # 想要对窗口内容进行的修改有效，必须执行以下操作</span><br><span class="line">  pygame.display.flip()</span><br><span class="line"></span><br><span class="line">  # 3.让游戏保持运行状态(游戏循环)</span><br><span class="line">  while True:</span><br><span class="line">      # 4.不断检测游戏过程中是否有事件的产生</span><br><span class="line">      for event in pygame.event.get():</span><br><span class="line">          # 只有当事件产生后才会进入for循环</span><br><span class="line">          # print(&apos;======&apos;)</span><br><span class="line">          if event.type == pygame.QUIT:</span><br><span class="line">              # return</span><br><span class="line">              # 退出!</span><br><span class="line">              exit()</span><br></pre></td></tr></table></figure></p><p>####2.添加图片<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">pygame.init()</span><br><span class="line"> window = pygame.display.set_mode((400, 600))</span><br><span class="line"> pygame.display.set_caption(&apos;图片&apos;)</span><br><span class="line"> window.fill((255, 255, 255))</span><br><span class="line"></span><br><span class="line"> # 3.添加固定显示内容</span><br><span class="line"> &quot;&quot;&quot;</span><br><span class="line"> 显示图片</span><br><span class="line"> 1.加载图片</span><br><span class="line"> image.load(图片地址)  -&gt; 返回图片对象(surface)</span><br><span class="line"> </span><br><span class="line"> 2.将图片添加(渲染)到窗口上</span><br><span class="line"> blit(渲染对象, 坐标)  </span><br><span class="line"> 坐标： 一个元祖，两个元素，分别是x坐标和y坐标</span><br><span class="line"> &quot;&quot;&quot;</span><br><span class="line"> image = pygame.image.load(&apos;images/luffyy.png&apos;)</span><br><span class="line"> window.blit(image, (0, 0))</span><br><span class="line"></span><br><span class="line"> # 4.操作图片</span><br><span class="line"> &quot;&quot;&quot;</span><br><span class="line"> 1.获取图片对象大小</span><br><span class="line"> surface类型有个对象方法: get_size()  - 返回的是元祖</span><br><span class="line"> &quot;&quot;&quot;</span><br><span class="line"> # 获取窗口大小</span><br><span class="line"> print(window.get_size())</span><br><span class="line"> # 获取图片大小</span><br><span class="line"> print(image.get_size())</span><br><span class="line"> width, height = image.get_size()</span><br><span class="line"> # window.blit(image, (400-width, 600-height))</span><br><span class="line"></span><br><span class="line"> &quot;&quot;&quot;</span><br><span class="line"> 2.图片缩放和旋转(形变)</span><br><span class="line"> transform.scale(缩放对象, 目标大小)  -&gt; 返回缩放后的新对象</span><br><span class="line"> transform.rotozoom(缩放对象, 旋转角度, 缩放比例)</span><br><span class="line"> &quot;&quot;&quot;</span><br><span class="line"> new_image = pygame.transform.scale(image, (50, 50))</span><br><span class="line"> new_image = pygame.transform.rotozoom(image, 45, 0.8)</span><br><span class="line"></span><br><span class="line"> window.blit(new_image, (10, 250))</span><br><span class="line"></span><br><span class="line"> pygame.display.flip()</span><br><span class="line"></span><br><span class="line"> while True:</span><br><span class="line"></span><br><span class="line">     for event in pygame.event.get():</span><br><span class="line">         if event.type == pygame.QUIT:</span><br><span class="line">             exit()</span><br></pre></td></tr></table></figure></p><p>####3.显示文字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">window = pygame.display.set_mode((400, 600))</span><br><span class="line">pygame.display.set_caption(&apos;游戏&apos;)</span><br><span class="line">window.fill((255, 255, 255))</span><br><span class="line"></span><br><span class="line"># ============显示文字===========</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">1.创建字体对象</span><br><span class="line">a.系统字体</span><br><span class="line">font.SysFont(字体名, 字体大小)  - 返回一个字体对象</span><br><span class="line">b.自定义字体</span><br><span class="line">font.Font(字体文件路径, 字体大小)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"># font = pygame.font.SysFont(&apos;Times&apos;, 40)</span><br><span class="line">font = pygame.font.Font(&apos;images/font2.ttf&apos;, 40)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">2.根据字体创建文字对象</span><br><span class="line">render(文字, True, 文字颜色)  - 返回一个文字对象(Surface)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">text = font.render(&apos;hello世界!&apos;, True, (255, 0, 0))</span><br><span class="line">w, h = text.get_size()</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">3.显示文字</span><br><span class="line">blit(渲染对象, 坐标)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">window.blit(text, (400-w, 600-h))</span><br><span class="line"></span><br><span class="line">pygame.display.flip()</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    for event in pygame.event.get():</span><br><span class="line">        if event.type == pygame.QUIT:</span><br><span class="line">            exit()</span><br></pre></td></tr></table></figure></p><p>####4.图形<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">pygame.init()</span><br><span class="line">window = pygame.display.set_mode((400, 600))</span><br><span class="line">pygame.display.set_caption(&apos;游戏&apos;)</span><br><span class="line">window.fill((255, 255, 255))</span><br><span class="line"></span><br><span class="line"># ============画图形=============</span><br><span class="line"># 1.画线</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">line(画在哪个地方, 线的颜色, 起点, 终点, 线宽=1)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pygame.draw.line(window, (0, 255, 0), (10, 10), (100, 100), 4)</span><br><span class="line"></span><br><span class="line"># 2.画线</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">lines(画在哪个地方, 线的颜色, 是否关闭, 点列表, 线宽=1)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">point_list = [(200, 200), (250, 10), (300, 200), (150, 100), (350, 100)]</span><br><span class="line"># pygame.draw.lines(window, (255, 0, 0), True, point_list)</span><br><span class="line"></span><br><span class="line"># 3.画圆</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">circle(画在哪个地方, 线的颜色,圆心,半径, 线宽=0)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pygame.draw.circle(window, (0, 0, 0), (200, 300), 100, 0)</span><br><span class="line">pygame.draw.circle(window, (255, 0, 0), (200, 300), 90, 0)</span><br><span class="line"></span><br><span class="line"># 4.画多边形</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">polygon(画在哪个地方,线的颜色, 点列表,线宽)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pygame.draw.polygon(window, (255, 0, 0), point_list, 0)</span><br><span class="line"></span><br><span class="line"># 5.画弧线</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">arc(画在哪个地方,线的颜色, 矩形, 起始弧度, 终止弧度, 线宽)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">pygame.draw.arc(window, (0, 255, 255), (10, 470, 150, 200), math.pi/4, math.pi/4*3, 5)</span><br><span class="line"></span><br><span class="line"># 6.画矩形</span><br><span class="line">pygame.draw.rect(window, (100, 20, 50), (200, 470, 100, 50), 2)</span><br><span class="line">window.fill((255, 255, 255))</span><br><span class="line"></span><br><span class="line">pygame.display.flip()</span><br></pre></td></tr></table></figure></p><p>####5游戏事件<br><strong>1.鼠标事件</strong>:<br><strong>MOUSEBUTTONDOWN</strong> - 鼠标按下<br><strong>MOUSEBUTTONUP</strong> - 鼠标弹起<br><strong>MOUSEMOTION</strong> - 鼠标移动</p><p><strong>重点</strong>：事件发生的位置: event.pos<br><strong>方法</strong>：event.pos<br><strong>含义</strong>：鼠标的坐标<br><strong>返回值</strong>：元祖（坐标x, y）</p><p>2.键盘事件<br><strong>KEYDOWN</strong> - 键盘按下<br><strong>KEYUP</strong> - 键盘弹起 </p><p><strong>重点</strong>：按了哪个键<br><strong>方法</strong>：event.key<br><strong>返回值</strong>：按键对应的字符的编码值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 模块的导入</span><br><span class="line">import pygame</span><br><span class="line">from color import Color</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line">pygame.init()</span><br><span class="line">window = pygame.display.set_mode((400, 600))</span><br><span class="line">pygame.display.set_caption(&apos;事件&apos;)</span><br><span class="line">window.fill(Color.white)</span><br><span class="line"></span><br><span class="line">pygame.display.flip()</span><br><span class="line">is_move = False</span><br><span class="line">while True:</span><br><span class="line"></span><br><span class="line">    # 不断检测是否有事件产生，如果有事件产生才会进入for循环</span><br><span class="line">    for event in pygame.event.get():</span><br><span class="line">        # 这儿的event是事件对象，我们可以通过事件对象的type值来判断事件的类型</span><br><span class="line">        #==================鼠标事件===================</span><br><span class="line">        if event.type == pygame.QUIT:</span><br><span class="line">            exit()</span><br><span class="line">        elif event.type == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">            # 鼠标按下要做什么，就将代码写这个if语句中</span><br><span class="line">            print(&apos;鼠标按下&apos;, event.pos)</span><br><span class="line">            # pygame.draw.circle(window, Color.random_color(), event.pos, randint(10, 20))</span><br><span class="line">            # pygame.display.update()</span><br><span class="line">            is_move = True</span><br><span class="line">        elif event.type == pygame.MOUSEBUTTONUP:</span><br><span class="line">            # 鼠标弹起要做什么，就将代码写这个if语句中</span><br><span class="line">            print(&apos;鼠标弹起&apos;)</span><br><span class="line">            is_move = False</span><br><span class="line">        elif event.type == pygame.MOUSEMOTION:</span><br><span class="line">            # 鼠标移动要做什么, 就将代码写这个if语句中</span><br><span class="line">            if is_move:</span><br><span class="line">                pygame.draw.circle(window, Color.random_color(), event.pos, 20)</span><br><span class="line">                pygame.display.update()</span><br><span class="line">                print(&apos;鼠标移动&apos;)</span><br><span class="line"></span><br><span class="line">        # ================键盘事件=================</span><br><span class="line">        if event.type == pygame.KEYDOWN:</span><br><span class="line">            print(&apos;按键被按下&apos;)</span><br><span class="line">            print(event.key, chr(event.key))</span><br><span class="line">        elif event.type == pygame.KEYUP:</span><br><span class="line">            print(&apos;按键弹起!&apos;)</span><br></pre></td></tr></table></figure><p>颜色脚本：color模块<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Color:</span><br><span class="line">    white = (255, 255, 255)</span><br><span class="line">    black = (0, 0, 0)</span><br><span class="line">    red = (255, 0, 0)</span><br><span class="line">    green = (0, 255, 255)</span><br><span class="line">    blue = (0, 0, 255)</span><br><span class="line">    yellow = (255, 255, 0)</span><br><span class="line">    gray = (155, 155, 155)</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def random_color():</span><br><span class="line">        return randint(0, 255), randint(0, 255), randint(0, 255)</span><br></pre></td></tr></table></figure></p><p>按钮：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">import pygame</span><br><span class="line">from color import Color</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Button:</span><br><span class="line">    &quot;&quot;&quot;声明一个按钮类&quot;&quot;&quot;</span><br><span class="line">    def __init__(self, x, y, width, height, text=&apos;&apos;, background_color=Color.red, text_color=Color.white):</span><br><span class="line">        # 按钮的x坐标</span><br><span class="line">        self.x = x</span><br><span class="line">        # 按钮的y坐标</span><br><span class="line">        self.y = y</span><br><span class="line">        # 按钮的宽度</span><br><span class="line">        self.width = width</span><br><span class="line">        # 按钮的长度</span><br><span class="line">        self.height = height</span><br><span class="line">        # 按钮的显示内容</span><br><span class="line">        self.text = text</span><br><span class="line">        # 按钮的背景颜色</span><br><span class="line">        self.background_color = background_color</span><br><span class="line">        # 显示内容的颜色</span><br><span class="line">        self.text_color = text_color</span><br><span class="line">        # 按钮的字体大小</span><br><span class="line">        self.font_size = 30</span><br><span class="line"></span><br><span class="line">    def show(self, window):</span><br><span class="line">        &quot;&quot;&quot;将按钮显示在屏幕上&quot;&quot;&quot;</span><br><span class="line">        # 画一个矩形，然后显示在屏幕上</span><br><span class="line">        pygame.draw.rect(window, self.background_color, (self.x, self.y, self.width, self.height))</span><br><span class="line">        # 创建一个字体对象</span><br><span class="line">        font = pygame.font.SysFont(&apos;Times&apos;, self.font_size)</span><br><span class="line">        # 根据字体创建一个文字对象</span><br><span class="line">        text = font.render(self.text, True, self.text_color)</span><br><span class="line">        # 获取文字对象的大小</span><br><span class="line">        w, h = text.get_size()</span><br><span class="line">        # 获取显示在屏幕上的x坐标</span><br><span class="line">        x = self.width / 2 - w / 2 + self.x</span><br><span class="line">        # 获取显示在屏幕上的y坐标</span><br><span class="line">        y = self.height / 2 - h / 2 + self.y</span><br><span class="line">        # 将文字显示在屏幕上</span><br><span class="line">        window.blit(text, (x, y))</span><br><span class="line"></span><br><span class="line">    def is_cliecked(self, pos):</span><br><span class="line">        &quot;&quot;&quot;根据传入的坐标判断是否在范围内&quot;&quot;&quot;</span><br><span class="line">        # 获取传入坐标的x,y值</span><br><span class="line">        x, y = pos</span><br><span class="line">        # 返回点击鼠标的位置，是否反应</span><br><span class="line">        return (self.x &lt;= x &lt;= self.x + self.width) and (self.y &lt;= y &lt;= self.y + self.height)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    # 初始化窗口</span><br><span class="line">    pygame.init()</span><br><span class="line">    # 创建一个窗口</span><br><span class="line">    window = pygame.display.set_mode((400, 600))</span><br><span class="line">    # 设置窗口标题</span><br><span class="line">    pygame.display.set_caption(&apos;事件&apos;)</span><br><span class="line">    # 设置窗口的背景颜色</span><br><span class="line">    window.fill(Color.white)</span><br><span class="line"></span><br><span class="line">    # add_btn(window)</span><br><span class="line">    # 创建一个按钮对象</span><br><span class="line">    add_btn = Button(100, 100, 100, 50, &apos;del&apos;)</span><br><span class="line">    # 将对象显示在屏幕上</span><br><span class="line">    add_btn.show(window)</span><br><span class="line">    # 创建第二个按钮对象</span><br><span class="line">    btn2 = Button(100, 250, 100, 60, &apos;Score&apos;, background_color=Color.yellow, text_color=Color.black)</span><br><span class="line">    # 将第二个对象显示在屏幕上</span><br><span class="line">    btn2.show(window)</span><br><span class="line">    # 将修改过的内容有效显示</span><br><span class="line">    pygame.display.flip()</span><br><span class="line">    is_move = False</span><br><span class="line">    while True:</span><br><span class="line">        # 不断检测事件的发生，有事件就进入for循环</span><br><span class="line">        for event in pygame.event.get():</span><br><span class="line">            # 将窗口关闭</span><br><span class="line">            if event.type == pygame.QUIT:</span><br><span class="line">                exit()</span><br><span class="line">            # 鼠标按下要做的事情</span><br><span class="line">            elif event.type == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">                # 鼠标点击的坐标</span><br><span class="line">                mx, my = event.pos</span><br><span class="line">                # 如果点击的坐标在按钮范围内，要发生的事情</span><br><span class="line">                if add_btn.is_cliecked(event.pos):</span><br><span class="line">                    print(&apos;删除!&apos;)</span><br><span class="line">                    # 继续下一次事件的判断</span><br><span class="line">                    continue</span><br><span class="line">                # 如果点击的坐标在第二个按钮的范围内，要发生的事情</span><br><span class="line">                if btn2.is_cliecked(event.pos):</span><br><span class="line">                    # print(&apos;hello&apos;)</span><br><span class="line">                    # 更改按钮要显示的内容</span><br><span class="line">                    btn2.text = str(randint(0, 100))</span><br><span class="line">                    # 重新展示在屏幕上</span><br><span class="line">                    btn2.show(window)</span><br><span class="line">                    # 在屏幕上更新修改的内容</span><br><span class="line">                    pygame.display.update()</span><br><span class="line">                    # 继续下一次事件的判断</span><br><span class="line">                    continue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>小球的移动控制：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import pygame</span><br><span class="line">from color import Color</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line">window_width = 400</span><br><span class="line">window_height = 600</span><br><span class="line"></span><br><span class="line">class Direction:</span><br><span class="line">    &quot;&quot;&quot;方向类&quot;&quot;&quot;</span><br><span class="line">    UP = 273</span><br><span class="line">    DOWN = 274</span><br><span class="line">    RIGHT = 275</span><br><span class="line">    LEFT = 276</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Ball:</span><br><span class="line">    def __init__(self, center_x, center_y, radius, bg_color=Color.random_color()):</span><br><span class="line">        self.center_x = center_x</span><br><span class="line">        self.center_y = center_y</span><br><span class="line">        self.radius = radius</span><br><span class="line">        self.bg_color = bg_color</span><br><span class="line">        self.is_move = True   # 是否移动</span><br><span class="line">        self.move_direction = Direction.DOWN</span><br><span class="line">        self.speed = 5</span><br><span class="line"></span><br><span class="line">    def disappear(self, window):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        球从指定界面消失</span><br><span class="line">        :param window:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        pygame.draw.circle(window, Color.white, (self.center_x, self.center_y), self.radius)</span><br><span class="line"></span><br><span class="line">    def show(self, window):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        小球显示</span><br><span class="line">        :param window:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        pygame.draw.circle(window, self.bg_color, (self.center_x, self.center_y), self.radius)</span><br><span class="line"></span><br><span class="line">    def move(self, window):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        小球移动</span><br><span class="line">        :param window:</span><br><span class="line">        :return:</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        # 让移动前的球消失</span><br><span class="line">        self.disappear(window)</span><br><span class="line">        if self.move_direction == Direction.DOWN:</span><br><span class="line">            self.center_y += self.speed</span><br><span class="line">        elif self.move_direction == Direction.UP:</span><br><span class="line">            self.center_y -= self.speed</span><br><span class="line">        elif self.move_direction == Direction.LEFT:</span><br><span class="line">            self.center_x -= self.speed</span><br><span class="line">        else:</span><br><span class="line">            self.center_x += self.speed</span><br><span class="line"></span><br><span class="line">        # 移动后重新显示球</span><br><span class="line">        self.show(window)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def creat_enemy_ball(cls):</span><br><span class="line">        r = randint(10, 25)</span><br><span class="line">        x = randint(r, int(window_width - r))</span><br><span class="line">        y = randint(r, int(window_height - r))</span><br><span class="line">        enemy = cls(x, y, r, Color.random_color())</span><br><span class="line">        enemy.is_move = False</span><br><span class="line">        return enemy</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    pygame.init()</span><br><span class="line">    window = pygame.display.set_mode((window_width, window_height))</span><br><span class="line">    pygame.display.set_caption(&apos;事件&apos;)</span><br><span class="line">    window.fill(Color.white)</span><br><span class="line"></span><br><span class="line">    # 先显示一个的球</span><br><span class="line">    ball = Ball(100, 100, 30)</span><br><span class="line">    ball.show(window)</span><br><span class="line"></span><br><span class="line">    pygame.display.flip()</span><br><span class="line">    # 计时</span><br><span class="line">    time = 0</span><br><span class="line">    # 所有被吃的球</span><br><span class="line">    all_enemy = []</span><br><span class="line">    while True:</span><br><span class="line">        time += 1</span><br><span class="line"></span><br><span class="line">        # 每隔100个运行单位移动一次</span><br><span class="line">        if time % 100 == 0:</span><br><span class="line">            if ball.is_move:</span><br><span class="line">                # 让球动起来</span><br><span class="line">                ball.move(window)</span><br><span class="line">                pygame.display.update()</span><br><span class="line"></span><br><span class="line">        if time == 10000:</span><br><span class="line">            time = 0</span><br><span class="line">            enemy = Ball.creat_enemy_ball()</span><br><span class="line">            all_enemy.append(enemy)</span><br><span class="line">            enemy.show(window)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for event in pygame.event.get():</span><br><span class="line">            if event.type == pygame.QUIT:</span><br><span class="line">                exit()</span><br><span class="line">            elif event.type == pygame.KEYDOWN:</span><br><span class="line">                if event.key == Direction.DOWN or event.key == Direction.UP or event.key == Direction.LEFT or event.key == Direction.RIGHT:</span><br><span class="line">                    # ball.is_move = True</span><br><span class="line">                    ball.move_direction = event.key</span><br><span class="line">            elif event.type == pygame.KEYUP:</span><br><span class="line">                if event.key == Direction.DOWN or event.key == Direction.UP or event.key == Direction.LEFT or event.key == Direction.RIGHT:</span><br><span class="line">                    # ball.is_move = False</span><br><span class="line">                    pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p><p>小球游戏：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">import pygame</span><br><span class="line">from color import Color</span><br><span class="line">from random import randint</span><br><span class="line"></span><br><span class="line">window_height = 600</span><br><span class="line">window_width = 400</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Ball:</span><br><span class="line">    def __init__(self, center_x, center_y, radius, bg_color=Color.random_color()):</span><br><span class="line">        self.center_x = center_x</span><br><span class="line">        self.center_y = center_y</span><br><span class="line">        self.radius = radius</span><br><span class="line">        self.bg_color = bg_color</span><br><span class="line">        self.is_move = True</span><br><span class="line">        self.y_speed = 6</span><br><span class="line"></span><br><span class="line">    def move(self, window):</span><br><span class="line">        self.disapper(window)</span><br><span class="line">        new_y = self.center_y + self.y_speed</span><br><span class="line">        if new_y &gt;= window_height - self.radius:</span><br><span class="line">            new_y = window_height - self.radius</span><br><span class="line">            self.y_speed *= -1</span><br><span class="line"></span><br><span class="line">        if new_y &lt;= self.radius:</span><br><span class="line">            new_y = self.radius</span><br><span class="line">            self.y_speed *= -1</span><br><span class="line"></span><br><span class="line">        self.center_y = new_y</span><br><span class="line"></span><br><span class="line">        self.show(window)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def disapper(self, window):</span><br><span class="line">        pygame.draw.circle(window, Color.white, (self.center_x, self.center_y), self.radius)</span><br><span class="line"></span><br><span class="line">    def show(self, window):</span><br><span class="line">        pygame.draw.circle(window, self.bg_color, (self.center_x, self.center_y), self.radius)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line"></span><br><span class="line">    pygame.init()</span><br><span class="line">    window = pygame.display.set_mode((window_width, window_height))</span><br><span class="line">    pygame.display.set_caption(&apos;事件&apos;)</span><br><span class="line">    window.fill(Color.white)</span><br><span class="line"></span><br><span class="line">    ball = Ball(100, 100, 20)</span><br><span class="line">    ball.show(window)</span><br><span class="line">    pygame.display.flip()</span><br><span class="line">    time = 0</span><br><span class="line">    while True:</span><br><span class="line">        time += 1</span><br><span class="line">        if time % 1000 ==0:</span><br><span class="line">            if ball.is_move:</span><br><span class="line">                ball.move(window)</span><br><span class="line">                pygame.display.update()</span><br><span class="line"></span><br><span class="line">        for event in pygame.event.get():</span><br><span class="line">            if event.type == pygame.QUIT:</span><br><span class="line">                exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pyhton中第三方游戏库pygame的用法&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://yoursite.com/2019/02/24/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/02/24/正则表达式/</id>
    <published>2019-02-24T09:03:25.631Z</published>
    <updated>2019-02-24T09:04:23.005Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了计算机语言中通用的正则表达式的相关用法<br><a id="more"></a></p><h1 id="一、匹配字符"><a href="#一、匹配字符" class="headerlink" title="一、匹配字符"></a>一、匹配字符</h1><p><strong>1.什么是正则表达式（语法通用）</strong><br><strong>定义</strong>：一种用来做字符串匹配的工具，通过不同的符号匹配不同的字符</p><p><strong>2.python对正则表达式的支持</strong><br>re模块</p><p><strong>re模块方法</strong>：<br>fullmatch(正则表达式，字符串）<br><strong>功能</strong>：正则表达式和指定字符串进行匹配<br><strong>输出</strong>：成功返回匹配对象，失败返回None</p><p><strong>注意</strong>：python中的正则表达式是写在字符串中的，但是一般情况下不会在最前面加R/r<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from re import fullmatch, search</span><br></pre></td></tr></table></figure></p><p> ###普通字符（代表字符本身）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#匹配一个字符串，只有三个字符，每个字符分别是a,b,c</span><br><span class="line">re_str = r&apos;abc&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;abc&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###1 .(匹配任意字符）<br><strong>注意</strong>：<br>a.一个.代表一个字符<br>b.不能匹配\n<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串，只有三个字符，第一个字符是a,第二个字符是任意字符，第三个字符是c</span><br><span class="line">re_str = r&apos;a.c&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;acc&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###2 \w(匹配字母数字下划线)<br><strong>注意</strong>：<br> a.也可以匹配中文<br> b.一个\w只能匹配一个字符<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串，第一个是任意字符，第二三是字母数字下划线，最后三个是abc</span><br><span class="line">re_str = r&apos;.\w\wabc&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;d33abc&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###3 \s(匹配空白字符）<br>空白字符：所有能产生空白的字符，包括空格，制表符，换行等<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串，前面两个是字母数字下划线或中文，第三个是空白，最后是任意字符</span><br><span class="line">re_str = r&apos;\w\w\s.&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;a2\td&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###4 \d(匹配数字字符)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串，每个字符都是数字字符</span><br><span class="line">re_str = r&apos;\d\d\d&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;343&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###5 \b(检测单词边界)<br>a.检测正则表达式中\b所在的位置，是否是单词边界<br>b.单词边界：所有可以将两个单词区分开的符号都是单词边界，<br>例如：空格, 缩进，标点符号等<br><strong>注意</strong>：<br>\b检测时不看，先匹配，匹配好在加上看<br>\b不是匹配符号，不会匹配出一个字符，只是检测所在的位置是否满足要求。<br>​<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串的内容是&apos;how are&apos;,并且字符&apos;a&apos;的前面是单词边界</span><br><span class="line">re_str = r&apos;how \bare&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;how are&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###6 ^(检测是否以指定的字符串开头)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串是三个数字字符，并且第一个字符所在的位置是字符串开头</span><br><span class="line">re_str = r&apos;^\d\d\d&apos;</span><br><span class="line">result = search(re_str, &apos;333dfd333dffeee444d&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###7 $ (检测是否以指定的字符串结尾）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串是三个数字字符，并且最后一个字符的后面是字符串结尾</span><br><span class="line">re_str = r&apos;\d\d\d$&apos;</span><br><span class="line">result = search(re_str, &apos;333fdf33332&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###8 \B(检测非单词边界）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">re_str = r&apos;dff\B33&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;dff33&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###9 \W(匹配非数字字母下划线)</p><p>###10 \S(非空白字符）</p><p>###11 \D(匹配非数字字符）</p><p>###12 [字符集]（匹配字符集中的任意一个字符）</p><p><strong>注意</strong>：一个[]代表一个字符<br>    a.普通用法<br>    [字符集] - 匹配字符集中的任意一个字符<br>    b.表示范围<br>    [字符1-字符2] - 表示匹配字符1到字符2中所有的字符，要求字符1的编码值要小于字符2的编码值<br>    [1-9] - 数字1-9<br>    [A-Z] - 大写字母<br>    [a-z] - 小写字母<br>    [a-zA-Z] - 所有字母<br>    [a-zA-Z\d_] - 数字字母下划线<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串有4个字符，第一个是a或者b或者c.后边是123</span><br><span class="line">re_str = r&apos;[abc]123&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;b123&apos;)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"># 匹配一个字符串有4个字符，第一个是数字1-9中的任意一个，最后一个</span><br><span class="line"># 是任意小写字母，中间两个是任意数字</span><br><span class="line">re_str = r&apos;[1-9]\d\d[a-z]&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;323d&apos;)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line">re_str = r&apos;[a-zA-Z\d_]&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;a&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###13 [^字符集]（匹配没有在字符集中的其他任意字符）<br><strong>注意</strong>：<br>^放在[]的最前面，才表示匹配不在字符集中的其他任意字符<br> ^不放在[]最前面，就表示字符本身<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 匹配一个字符串，第一个字符只要不是abc中的一个，其他都可以，后面是123</span><br><span class="line">re_str = r&apos;[^abc]123&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;h123&apos;)</span><br><span class="line">print(result)</span><br><span class="line"></span><br><span class="line"># 第一个字符是1-9中的一个或者^</span><br><span class="line">re_str = r&apos;[1-9^]123&apos;</span><br><span class="line">result = fullmatch(re_str, &apos;^123&apos;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></p><p>###14 转义符号<br>正则中可以通过在特殊符号前加\来对符号进行转义<br>\\<br>\.<br>\\^<br>b.除了在中括号中有特殊意义的符号，其他符号放在[]中也是表示符号本身<br>- 想要表示本身，就不要放在两个字符之间<br>^ 想要表示本身，就不要放在字符集开头<br>[] 表示中括号本身，加\<br><strong>注意</strong>：<br>转义字符是字符串中的概念<br>转义符号是正则表达式的概念<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">re_str = r&apos;\d\d\.\d\d\\b&apos;</span><br><span class="line">print(fullmatch(re_str, &apos;34.23\\b&apos;))</span><br><span class="line">print(fullmatch(r&apos;[-19.\]*^]&apos;, &apos;*&apos;))</span><br></pre></td></tr></table></figure></p><h1 id="二、匹配次数"><a href="#二、匹配次数" class="headerlink" title="二、匹配次数"></a>二、匹配次数</h1><p>###1 *(匹配0次或多次）</p><p>字符<em> - 指定的字符出现0次或者多次（字符可以是正则符号，也可以是普通字符）<br>a</em> - a出现0次或者多次<br>\d<em> - 任意数字出现0次或者多次<br>[a-z]</em> - 任意小写字母出现0次或者多次<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 123前有0个或者多个字符，并且每个是a</span><br><span class="line">re_str = r&apos;[a-z]*123&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;123&apos;))</span><br><span class="line">print(re.fullmatch(re_str, &apos;a123&apos;))</span><br><span class="line"></span><br><span class="line"># 123前有0个或者多个字符，并且每个是数字字符</span><br><span class="line">re_str = r&apos;\d*123&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;123&apos;))</span><br><span class="line">print(re.fullmatch(re_str, &apos;1123&apos;))</span><br></pre></td></tr></table></figure></p><p>###2 +(一次或者多次）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">re_str = r&apos;[a-z]+123&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;aaa123&apos;))</span><br><span class="line">print(re.fullmatch(re_str, &apos;a123&apos;))</span><br></pre></td></tr></table></figure></p><p>###3 ?(0次或1次）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">re_str = r&apos;\+?abc&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;abc&apos;))</span><br><span class="line">print(re.fullmatch(re_str, &apos;+abc&apos;))</span><br><span class="line"></span><br><span class="line"># 练习：写一个正则表达式能够匹配所有的整数字符串</span><br><span class="line">re_str = r&apos;[+-]?[1-9]\d*|0&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;0&apos;))</span><br></pre></td></tr></table></figure></p><p>###4 {}(匹配次数）</p><ul><li>{m,n} - 匹配m到n次（最少m次，最多n次）</li><li>{m,} - 至少m次</li><li>{，n} - 最多n次</li><li>{n} - n次<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(re.fullmatch(r&apos;a&#123;2,5&#125;&apos;, &apos;aaa&apos;))</span><br><span class="line"># 密码：6-16，只能是数字字母</span><br><span class="line">print(re.fullmatch(r&apos;[a-zA-Z\d]&#123;6,16&#125;&apos;, &apos;222222&apos;))</span><br></pre></td></tr></table></figure></li></ul><h1 id="三、分支和分组"><a href="#三、分支和分组" class="headerlink" title="三、分支和分组"></a>三、分支和分组</h1><p>###1 |(分支）</p><p>表达式1|表达式2|表达式3<br>先用表达式1进行匹配，匹配成功就成功，不成功就使用表达式2区匹配，如果表达式2<br>也不成功，就使用表达式3去匹配（三个表达式只要有一个能够匹配成功就成功，否则就失败）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line"></span><br><span class="line">re_str = r&apos;[a-z]&#123;3&#125;|\d&#123;3&#125;&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;384&apos;))</span><br></pre></td></tr></table></figure></p><p>###2 （）（分组）<br><strong>a.分组</strong><br>将括号里的内容看做一个整体</p><p><strong>b.分组重复</strong><br>在有分组的正则表达式中，可以在分组的后面通过   <strong>\数字</strong>   来重复前面第几<br>个分组匹配到的结果<br><strong>注意</strong>：如果前面没有括号，程序会报错<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">re_str = r&apos;abc([a-z]&#123;3&#125;|\d&#123;3&#125;)&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;abc384&apos;))</span><br><span class="line"></span><br><span class="line">re_str = r&apos;(abc)&#123;2&#125;&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;abcabc&apos;))</span><br><span class="line"></span><br><span class="line">re_str = r&apos;(\d&#123;2&#125;)a(\d&#123;3&#125;)bc\2&apos;</span><br><span class="line">print(re.fullmatch(re_str, &apos;34a909bc909&apos;))</span><br></pre></td></tr></table></figure></p><p><strong>c.捕获</strong><br><strong>步骤</strong>：<br><strong>第一步</strong>：先用整个正则表达式去匹配字符串，匹配成功<br><strong>第二步</strong>：再获取部分数据（括号里的数据）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">re_str = r&apos;(\d\d)\.[a-z]&#123;2,3&#125;&apos;</span><br><span class="line">result = re.findall(re_str, &apos;s56fjh22.huk--=334.ko&quot;;sss;ss94.al////&apos;)</span><br><span class="line">print(result)  # [&apos;22&apos;, &apos;34&apos;, &apos;94&apos;]</span><br></pre></td></tr></table></figure></p><h1 id="四、非贪婪"><a href="#四、非贪婪" class="headerlink" title="四、非贪婪"></a>四、非贪婪</h1><p><strong>定义</strong>：在正则中控制匹配<strong>不确定次数</strong>的符号后边可以加?,来表示尽可能少的匹配<br><strong>注意</strong>：尽可能少是在<strong>能够匹配到</strong>的前提下尽可能少<br><strong>贪婪</strong>：尽可能匹配多的次数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(re.search(r&apos;\d+&apos;, &apos;abchs3482==sdd&apos;))  # &lt;_sre.SRE_Match object; span=(5, 9), match=&apos;3482&apos;&gt;</span><br><span class="line">print(re.search(r&apos;\d+?&apos;, &apos;abchs3482==sdd&apos;))  # &lt;_sre.SRE_Match object; span=(5, 6), match=&apos;3&apos;&gt;</span><br></pre></td></tr></table></figure></p><h1 id="五、re模块相关方法"><a href="#五、re模块相关方法" class="headerlink" title="五、re模块相关方法"></a>五、re模块相关方法</h1><h3 id="1-compile-正则表达式"><a href="#1-compile-正则表达式" class="headerlink" title="1. compile(正则表达式)"></a>1. compile(正则表达式)</h3><p><strong>目的</strong>：将正则表达式转换成正则对象<br><strong>特点</strong>：编译后可以直接通过对象调用相关的对象方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">re_object = re.compile(r&apos;\d&#123;3&#125;&apos;)</span><br><span class="line">re_object.fullmatch(&apos;432&apos;)</span><br></pre></td></tr></table></figure></p><h3 id="2-fullmatch-正则表达式-字符串"><a href="#2-fullmatch-正则表达式-字符串" class="headerlink" title="2. fullmatch(正则表达式, 字符串)"></a>2. fullmatch(正则表达式, 字符串)</h3><p><strong>目的</strong>：让字符串和正则表达式完全匹配，匹配成功返回匹配对象，匹配失败返回None</p><p>####应用：检测字符串内容是否符合要求,例如：检测账号、密码、判断手机号、身份证号等是否合法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">result = re.fullmatch(r&apos;(\d&#123;3&#125;)=([a-z]+)&apos;, &apos;342=sjaks&apos;)</span><br><span class="line">print(result)  # &lt;_sre.SRE_Match object; span=(0, 9), match=&apos;342=sjaks&apos;&gt;</span><br></pre></td></tr></table></figure></p><h3 id="匹配对象"><a href="#匹配对象" class="headerlink" title="匹配对象"></a>匹配对象</h3><p>####a.span()<br><strong>功能</strong>：匹配到的字符串在原字符串中的下标范围(结果是元素)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">result = re.fullmatch(r&apos;(\d&#123;3&#125;)=([a-z]+)&apos;, &apos;342=sjaks&apos;)</span><br><span class="line">print(result.span())   # 获取整个正则表达式匹配到的内容的范围</span><br><span class="line"># start, end = result.span()</span><br><span class="line"># print(start, end)</span><br><span class="line"></span><br><span class="line">print(result.span(1))  # 获取正则表达式中第一个分组匹配到的内容的范围</span><br><span class="line">print(result.span(2))  # 获取正则表达式中第二个分组匹配到的内容的范围</span><br></pre></td></tr></table></figure></p><p>####b. start()和end()<br><strong>目的</strong>：匹配到的字符串在原字符串中的<strong>开始下标</strong>和<strong>结束下标</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(&apos;====start名，end====&apos;)</span><br><span class="line">print(result.start(), result.end())</span><br><span class="line">print(result.start(1), result.start(2))</span><br></pre></td></tr></table></figure></p><p>####c. group()<br><strong>目的</strong>：获取匹配到的字符串(结果是字符串)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(result.group())   # 获取整个正则匹配到的字符串</span><br><span class="line">print(result.group(1))  # 获取第一个分组匹配到的字符串</span><br><span class="line">print(result.group(2))  # 获取第二个分组匹配到的字符串</span><br><span class="line">print(result.groups())  # 同时获取所有分组匹配到的字符串(结果是元祖)</span><br></pre></td></tr></table></figure></p><p>####d. string<br><strong>目的</strong>：获取原字符串<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(result.string)</span><br></pre></td></tr></table></figure></p><p>###3.match(正则表达式,字符串)<br><strong>目的</strong>：让字符串的开头和正则表达式进行匹配，匹配成功结果是匹配对象，否则是None<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(re.match(r&apos;\D\d&apos;, &apos;s3skjkjks&apos;))</span><br></pre></td></tr></table></figure></p><p>###4.search(正则表达式,字符串)<br><strong>目的</strong>：在字符串中去匹配出第一个符合正则表达式的子串, 匹配成功结果是匹配对象,否则是None<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(re.search(r&apos;[\u4e00-\u9fa5]&#123;3&#125;&apos;, &apos;hsj后视ss023你好吗,skss上的30s&apos;))</span><br></pre></td></tr></table></figure></p><p>###5.split(正则表达式,字符串)<br><strong>目的</strong>：将字符串按照满足正则要求的子串进行切割(返回值是列表)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(re.split(r&apos;\d+&apos;, &apos;asj38jkas0093kjsj78kajs89==asdfj3jkkss&apos;))</span><br></pre></td></tr></table></figure></p><p>###6.sub(正则表达式,字符串1, 字符串2)<br><strong>目的</strong>：将字符串2中能够和正则表达式匹配的子串替换成字符串1，产生一个新的字符串<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(re.sub(r&apos;\d+&apos;, &apos;*&apos;, &apos;jsj93jksj93j5a45s3s是看得见&apos;))</span><br><span class="line">print(re.sub(r&apos;傻逼|[傻艹草操]&apos;, &apos;*&apos;, &apos;你是傻逼吗？艹!&apos;))</span><br></pre></td></tr></table></figure></p><p>###7.findall(正则表达式, 字符串)<br><strong>目的</strong>：在字符串中获取满足正则表达式的所有的子串(结果是列表)<br><strong>注意</strong>: 如果正则表达式中有分组，直接获取到的是分组中匹配到的内容; 如果有多个分组列表中的元素是元祖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(re.findall(r&apos;\d+[a-z]&apos;, &apos;sjh83bkss93ksjhf9922&apos;))</span><br><span class="line">print(re.findall(r&apos;(\d+)[a-z]&apos;, &apos;sjh83bkss93=sjhf9922&apos;))</span><br><span class="line">print(re.findall(r&apos;abc(\d&#123;2&#125;|[A-Z]&#123;2&#125;)&apos;, &apos;=-aaabc73kkjabcKJL=3&apos;))</span><br></pre></td></tr></table></figure></p><p>###8.finditer(正则表达式, 字符串)<br><strong>目的</strong>：在字符串中获取满足正则表达式的所有的子串(结果是迭代器,元素是匹配对象)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">result = re.finditer(r&apos;(\d+)[a-z]&apos;, &apos;sj8khk83jks数据310sj=sd&apos;)</span><br><span class="line">print(result)</span><br><span class="line">print(next(result).group())</span><br></pre></td></tr></table></figure></p><p>###9.re.I<br><strong>功能</strong>：忽略大小写<br><strong>注意</strong>：匹配的约束条件是放在函数的flags参数中的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(re.fullmatch(r&apos;[a-z]&#123;2&#125;&apos;, &apos;SA&apos;, re.I))</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了计算机语言中通用的正则表达式的相关用法&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>类和对象（提升）</title>
    <link href="http://yoursite.com/2019/02/24/python%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%EF%BC%88%E6%8F%90%E5%8D%87%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/24/python类和对象（提升）/</id>
    <published>2019-02-24T09:00:35.558Z</published>
    <updated>2019-02-24T09:12:47.547Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pyhton中如何进行面向对象编程中的提升知识部分<br><a id="more"></a></p><h1 id="一、私有化"><a href="#一、私有化" class="headerlink" title="一、私有化"></a>一、私有化</h1><p><strong>1.属性和方法访问权限</strong><br><strong>私有的</strong>：在类的外部不可以使用，也不可以继承<br><strong>保护的</strong>：在类的外部不可以使用，可以继承<br><strong>公开的</strong>：类的外部可以使用，可以被继承</p><p><strong>2.python中属性和方法的访问权限</strong><br>只有公开，但是提供了另一种私有化的方式</p><p><strong>2.如何私有化</strong><br><strong>定义</strong>：在属性或者方法前加__,属性或者方法就会变为私有化<br><strong>特点</strong>：私有的属性和方法只能在类的内部使用，不能在类的外面使用<br><strong>注意</strong>：<br>输入时，只能在前面加__，不能在后面加__</p><p>类的字段：可以在内部用，不能在外部用<br>对象属性：可以在内部用，不能在外部用<br>对象方法：可以在内部用，不能在外部用<br>类方法：可以在内部用，不能在外部用<br>静态方法：可以在内部用，不能在外部用</p><p><strong>3.python私有化原理</strong><br>在私有化的属性和方法前再加”_类名”去保存属性和方法<br>外部想调用可以通过”_类名__（属性或者方法）”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    num = 61</span><br><span class="line">    __num2 = 62</span><br><span class="line"></span><br><span class="line">    def __init__(self, name=&apos;张三&apos;, age=0):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.__sex = &apos;男&apos;</span><br><span class="line"></span><br><span class="line">    def eat(self, food):</span><br><span class="line">        print(self.__sex)</span><br><span class="line">        print(self.name, food)</span><br><span class="line">        self.__run()</span><br><span class="line"></span><br><span class="line">    def __run(self):</span><br><span class="line">        print(&apos;%s在跑步&apos; % self.name)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def show_num(cls):</span><br><span class="line">        print(&apos;人类的数量:%d, %d&apos; % (cls.num, cls.__num2))</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def func1():</span><br><span class="line">        print(&apos;人类要保护大自然!&apos;)</span><br><span class="line">p1 = Person()</span><br><span class="line">print(Person.num)  # 61</span><br><span class="line"># print(Person.__num2)  # AttributeError: type object &apos;Person&apos; has no attribute &apos;__num2&apos;</span><br><span class="line">print(p1.name)  # 61</span><br><span class="line"># print(p1.__sex)  # AttributeError: &apos;Person&apos; object has no attribute &apos;__sex&apos;</span><br><span class="line">print(p1._Person__sex)  # 男</span><br><span class="line">p1.eat(&apos;面条&apos;)  # 张三 面条</span><br><span class="line"># p1.run()  # AttributeError: &apos;Person&apos; object has no attribute &apos;run&apos;</span><br><span class="line">Person.show_num()  # 人类的数量:61, 62</span><br><span class="line">Person.func1()  # 人类要保护大自然!</span><br><span class="line">print(p1.__dict__)  # &#123;&apos;name&apos;: &apos;张三&apos;, &apos;age&apos;: 0, &apos;_Person__sex&apos;: &apos;男&apos;&#125;</span><br></pre></td></tr></table></figure></p><h1 id="二、getter和setter"><a href="#二、getter和setter" class="headerlink" title="二、getter和setter"></a>二、getter和setter</h1><p><strong>1.应用场景</strong><br><strong>getter</strong>：<strong>获取对象属性的值</strong>(调用时)之前想要做点别的事情,就给这个属性添加getter<br><strong>setter</strong>：<strong>给对象属性赋值</strong>（传参时）之前想要做点别的事情，就给这个属性添加setter</p><p><strong>2.getter</strong><br><strong>第一步</strong>：声明属性的时候，在属性名前加_<br><strong>第二步</strong>：声明一个函数,函数名前加@property<br><strong>要求</strong>：只有self参数，必须要有函数返回值<br><strong>返回值</strong>：获取属性拿到的值<br>@property<br>def 去掉<em>的属性名（self):<br>    &emsp;做点别的事情<br>    &emsp;（重点）返回属性的值<br><strong>第三步</strong>：在类的外部通过对象.去掉</em>的属性去获取相关的属性</p><p><strong>3.setter</strong><br><strong>要求</strong>：想要添加setter，必须添加getter为前提<br><strong>第一步</strong>：声明属性的时候，在属性名前加_<br><strong>第二步</strong>：声明函数<br><strong>要求</strong>：函数除了self以外还需要一个参数，没有返回值，<strong>参数代表给属性赋的值</strong><br>@去掉<em>的属性名.setter<br>def 去掉</em>的属性名(self, 参数）：<br>   &emsp;  做点别的事情<br>    &emsp; 给属性赋值<br><strong>第三步</strong>：在类的外部通过<strong>对象.去掉_的属性</strong>去给相关属性赋值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name=&apos;&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self._age = 0</span><br><span class="line">        self._week = 7    # 属性名前有_，使用属性的时候不要直接用</span><br><span class="line"></span><br><span class="line">    @property</span><br><span class="line">    def age(self):</span><br><span class="line">        return self._age</span><br><span class="line"></span><br><span class="line">    # 给age添加setter</span><br><span class="line">    @age.setter</span><br><span class="line">    def age(self, value):</span><br><span class="line">        if not isinstance(value, int):</span><br><span class="line">            raise ValueError</span><br><span class="line">        if not (0 &lt;= value &lt;= 150):</span><br><span class="line">            raise ValueError</span><br><span class="line">        self._age = value</span><br><span class="line"></span><br><span class="line">    # 给week添加getter</span><br><span class="line">    @property</span><br><span class="line">    def week(self):</span><br><span class="line">        if self._week &lt; 7:</span><br><span class="line">            return &apos;星期%d&apos; % self._week</span><br><span class="line">        else:</span><br><span class="line">            return &apos;星期天&apos;</span><br><span class="line"></span><br><span class="line">    @week.setter</span><br><span class="line">    def week(self, value):</span><br><span class="line">        self._week = value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    p1 = Person(&apos;小明&apos;)</span><br><span class="line"></span><br><span class="line">    # 通过不带_的属性给属性赋值实质是在调用setter对应的函数</span><br><span class="line">    p1.age = 45</span><br><span class="line">    p1.age = 3</span><br><span class="line"></span><br><span class="line">    # 这个操作实质是在调用week函数</span><br><span class="line">    # 通过不带_的属性来获取属性的值实质是在调用getter对应的函数</span><br><span class="line">    print(p1.week)</span><br><span class="line">    p1.week = 4</span><br></pre></td></tr></table></figure></p><h1 id="三、继承"><a href="#三、继承" class="headerlink" title="三、继承"></a>三、继承</h1><p><strong>1.什么是继承</strong><br><strong>定义</strong>：一个类继承另外一个类，其中会产生继承者和被继承者，这里的继承者叫子类，被继承者叫父类/超类</p><p><strong>2.怎么继承</strong><br>class 类名（父类列表）：<br>    &emsp;类的内容</p><p><strong>说明</strong>：<br><strong>a.</strong>python中所有的类都是<strong>直接或者间接</strong>继承基类object<br>class 类名：   ==&gt; class 类名（object):<br><strong>b.</strong>python中的继承支持<strong>多继承</strong>， 父类列表中可以有多个类，多个类之间用逗号隔开</p><p><strong>3.继承哪些东西</strong>:<br>所有的属性和方法<br><strong>注意</strong>：<strong>a.</strong>__slots__的值继承后没有约束效果<br><strong>b.</strong>在类中给__slots__赋值后，当前类的对象不能使用__dict__，但是子类可以使用，只是__dict__中没有从父类继承下来的对象属性，只有子类中添加的对象属性<br><strong>c.</strong>如果父类没有给__slots__赋值，直接给子类的__slots__，无效<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    num = 61</span><br><span class="line">    # __slots__ = (&apos;name&apos;, &apos;age&apos;, &apos;sex&apos;, &apos;__face&apos;)</span><br><span class="line"></span><br><span class="line">    def __init__(self,name=&apos;zhangsan&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.__face = 60</span><br><span class="line"></span><br><span class="line">    def eat(self, food):</span><br><span class="line">        print(&apos;%s在吃%s&apos; % (self.name, food))</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def show_num(cls):</span><br><span class="line">        print(&apos;人类的数量:%d&apos; % cls.num)</span><br><span class="line"></span><br><span class="line">print(Student.num)  # 61</span><br><span class="line">stu = Student()</span><br><span class="line">print(stu.name)  # zhangsan</span><br><span class="line"># print(stu.__dict__)</span><br><span class="line"># print(stu.__face)</span><br><span class="line">stu.eat(&apos;海底捞&apos;)  # zhangsan</span><br><span class="line">Student.show_num()  # 人类的数量:61</span><br><span class="line">p1 = Person()</span><br><span class="line"># print(p1.__dict__)</span><br><span class="line"># p1.score = 100</span><br><span class="line">stu.score = 100</span><br><span class="line">print(stu.score)  # 100</span><br><span class="line">print(stu.__dict__)  # &#123;&apos;name&apos;: &apos;zhangsan&apos;, &apos;age&apos;: 0, &apos;sex&apos;: &apos;男&apos;, &apos;_Person__face&apos;: 60, &apos;score&apos;: 100&#125;</span><br></pre></td></tr></table></figure></p><h1 id="四、添加方法"><a href="#四、添加方法" class="headerlink" title="四、添加方法"></a>四、添加方法</h1><p><strong>1.添加新的方法</strong><br><strong>怎么声明</strong>：直接在子类中声明新的方法</p><p><strong>2.重写方法</strong><br><strong>完全重写</strong>：在子类中重新声明实现父类的方法<br><strong>部分重写</strong>:保留父类的功能，在子类中添加新的功能<br><strong>如何操作</strong>：在子类方法中通过”<strong>super().</strong>“的方式调用父类方法</p><p><strong>3.类中函数的调用过程</strong><br>回到函数声明的位置：先看当前类中是否有方法，如果有，就直接调用当前类中的方法，没有就去看父类中是否有方法，如果父类也没有，就去找父类的父类，直到找到object类，如果还没有，就报错</p><ul><li>会一直往上找，不会往下找<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">class Person(object):</span><br><span class="line">    num = 61</span><br><span class="line"></span><br><span class="line">    def __init__(self,name=&apos;zhangsan&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">        self.__face = 60</span><br><span class="line"></span><br><span class="line">    def eat(self, food):</span><br><span class="line">        print(&apos;%s在吃%s&apos; % (self.name, food))</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def show_num(cls):</span><br><span class="line">        print(&apos;人类的数量:%d&apos; % cls.num)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Student(Person):</span><br><span class="line">    num2 = 100</span><br><span class="line"></span><br><span class="line">    # 添加方法</span><br><span class="line">    def study(self):</span><br><span class="line">        print(&apos;%s在写代码&apos; % self.name)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def func1(cls):</span><br><span class="line">        print(&apos;我是学生类的类方法&apos;)</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def func2():</span><br><span class="line">        print(&apos;我是学生类的静态方法&apos;)</span><br><span class="line"></span><br><span class="line">    @classmethod</span><br><span class="line">    def show_num(cls):</span><br><span class="line">        print(&apos;学生数量:%d&apos; % cls.num)</span><br><span class="line"></span><br><span class="line">    def eat(self, food):</span><br><span class="line">        super().eat(food)</span><br><span class="line">        print(&apos;吃饱了&apos;)</span><br><span class="line"></span><br><span class="line">p1 = Person(&apos;张三&apos;)</span><br><span class="line">stu1 = Student(&apos;李四&apos;)</span><br><span class="line">stu1.study()  # 李四在写代码</span><br><span class="line">Student.func1()  # 我是学生类的类方法</span><br><span class="line"># 子类可以使用父类的属性和方法，但是父类不能使用子类中添加的属性和方法</span><br><span class="line"># Person.func2()</span><br><span class="line">Person.show_num()  # 61</span><br><span class="line">Student.show_num()  # 61</span><br><span class="line">stu1.eat(&apos;包子&apos;)  # 李四在吃包子 吃饱了</span><br><span class="line">print(Student.num2)  # 100</span><br></pre></td></tr></table></figure></li></ul><h1 id="五、添加属性"><a href="#五、添加属性" class="headerlink" title="五、添加属性"></a>五、添加属性</h1><p><strong>1.添加类的字段</strong><br><strong>如何声明</strong>：直接在子类中声明新的字段<br><strong>2.添加对象属性</strong><br><strong>本质</strong>：对象属性是通过继承init方法继承下来的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">class Animal:</span><br><span class="line">    def __init__(self, age):</span><br><span class="line">        self.age = age</span><br><span class="line">        self.color = &apos;灰色&apos;</span><br><span class="line"></span><br><span class="line">class Dog(Animal):</span><br><span class="line">    def __init__(self, name, age):</span><br><span class="line">        # 调用父类的init方法来继承父类的对象属性</span><br><span class="line">        # 父类的init方法需要传参的话，需要在init加参数</span><br><span class="line">        super().__init__(age)</span><br><span class="line">        self.name = name</span><br><span class="line"># 情景1：直接继承不添加</span><br><span class="line"># dog1 = Dog()</span><br><span class="line"># print(dog1.age)</span><br><span class="line">dog2 = Dog(&apos;才次&apos;, 18)</span><br><span class="line">print(dog2.name)  # 才次</span><br><span class="line"># print(dog2.age)  # AttributeError: &apos;Dog&apos; object has no attribute &apos;age&apos;</span><br><span class="line">p1 = Student(23)</span><br><span class="line">print(p1.sex)  # 男</span><br></pre></td></tr></table></figure></p><p>###补充：多继承<br>多继承:<br>class 类名(父类1, 父类2,….):<br>    &emsp;类的内容<br><strong>特点</strong>：<br>1.方法：多个父类都可以继承<br>2.属性：类的字段都可以继承，对象属性只能继承第一个父类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Animal:</span><br><span class="line">    def __init__(self, name=&apos;&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = 0</span><br><span class="line">        self.color = &apos;黑色&apos;</span><br><span class="line"></span><br><span class="line">    def fun1(self):</span><br><span class="line">        print(&apos;动物中的对象方法&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Fly:</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.height = 1000</span><br><span class="line"></span><br><span class="line">    def func2(self):</span><br><span class="line">        print(&apos;飞行类的对象方法&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Bird(Animal, Fly):</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">def main():</span><br><span class="line">    b1 = Bird()</span><br><span class="line">    b1.fun1()  # 动物中的对象方法</span><br><span class="line">    b1.func2()  # 动物中的对象方法</span><br><span class="line">    print(b1.name, b1.age)</span><br><span class="line">    # print(b1.height)  # &apos;Bird&apos; object has no attribute &apos;height&apos;</span><br></pre></td></tr></table></figure></p><h1 id="六、运算符重载"><a href="#六、运算符重载" class="headerlink" title="六、运算符重载"></a>六、运算符重载</h1><p><strong>1.什么是运算符重载</strong><br><strong>目的</strong>：通过实现类中相应的<strong>魔法方法</strong>来让当前类的对象支持相应的运算符</p><p><strong>注意</strong>：python中所有的数据类型都是类，所有的数据都是对象</p><p><strong>步骤</strong>：<br><strong>第一步</strong>：找到运算符相应的魔法方法<br><strong>如何找</strong>：通过一个能支持的表达式，按ctrl键来查看<br><strong>第二步</strong>：在类中重新声明，重写相应的魔法方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">class Student(object):</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, score=0):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return &apos;&lt;&apos; + str(self.__dict__)[1:-1] + &apos;&gt;&apos;</span><br><span class="line"></span><br><span class="line">    # 实现&apos;+&apos;对应的魔法方法，让两个学生对象能够进行+操作</span><br><span class="line">    # self和other的关系： self+other    ==&gt; self.__add__(other)</span><br><span class="line">    # 返回值就是运算结果</span><br><span class="line">    def __add__(self, other):</span><br><span class="line">        # a.支持Student+Student:</span><br><span class="line">        return self.age + other.age</span><br><span class="line">        # b.支持Student+数字</span><br><span class="line">        # return self.age + other</span><br><span class="line"></span><br><span class="line">    # self * other</span><br><span class="line">    # 将other当成数字</span><br><span class="line">    def __mul__(self, other):</span><br><span class="line">        return self.name * other</span><br><span class="line"></span><br><span class="line">    # self和other都是学生对象</span><br><span class="line">    # 注意：大于和小于运算符是需要重载一个就行</span><br><span class="line">    def __gt__(self, other):</span><br><span class="line">        return self.score &gt; other.score</span><br><span class="line"></span><br><span class="line">stu1 = Student(&apos;小花&apos;, 18, 90)</span><br><span class="line">stu2 = Student(&apos;夏明&apos;, 20, 78)</span><br><span class="line">stu3 = Student(&apos;小红&apos;, 17, 99)</span><br><span class="line"></span><br><span class="line"># 所有类的对象都支持&apos;==&apos;和&apos;!=&apos;运算</span><br><span class="line">print(stu1 == stu2)  # False</span><br><span class="line"></span><br><span class="line">print(stu1 + stu2)     # print(stu1.__add__(stu2))  # 38</span><br><span class="line"></span><br><span class="line"># print(stu1 &gt; stu2)</span><br><span class="line"># print(stu1 &lt; stu2)</span><br><span class="line"></span><br><span class="line">print(stu1 * 2)   # print(stu1.__mul__(2))  # 小花小花</span><br><span class="line"></span><br><span class="line">students = [stu1, stu2, stu3]</span><br><span class="line">print(students)</span><br><span class="line">students.sort()</span><br><span class="line">print(students)</span><br></pre></td></tr></table></figure></p><h1 id="七、python内存管理机制"><a href="#七、python内存管理机制" class="headerlink" title="七、python内存管理机制"></a>七、python内存管理机制</h1><p><strong>1.数据的存储</strong><br>内存分为<strong>栈</strong>区间和<strong>堆</strong>区间<br>底层：<br><strong>栈区间内存</strong>：系统自动释放和开辟<br><strong>堆区间内存</strong>：由程序员通过代码开辟和释放<br><strong>代码</strong>：手写函数melloc<br>python：<br><strong>栈区间内存</strong>:系统自动开辟和释放<br><strong>堆区间内存</strong>:内存管理也已封装好，无需程序员在写代码手动释放<br>python:<br><strong>栈区间</strong>：变量本身，函数调用过程(压栈)<br><strong>堆区间</strong>：所有的对象（python中一切数据皆对象）<br><strong>变量赋值过程</strong>：<br><strong>堆区间</strong>：开辟空间储存数据，产生一个地址<br><strong>栈区间</strong>：变量储存数据的地址<br><strong>特殊情况</strong>：数字和字符串<br><strong>堆区间</strong>：赋值前先检测之前是否存过这个数据<br>如果有，直接使用之前的地址，反之，开辟空间<br>​<br><strong>2.内存释放（垃圾回收机制）</strong><br><strong>引用计数</strong>：每个对象都有一个属性叫引用计数，用来表示当前对象的引用计数<br><strong>如何判断一个对象是否销毁</strong><br><strong>依据</strong>：看一个对象的引用计数是否为0，为0就<br>销毁，不为0就不销毁<br><strong>getrefcount函数</strong><br><strong>用法</strong>：getrefcount（对象）<br> <strong>目的</strong>：获取对象的引用计数<br><strong>如何增加引用计数</strong>：<br>使用不同变量存地址（让多个变量指向一个地址）<br><strong>如何减少引用计数</strong>：<br>1.让变量指向其他地址（重新赋值）<br>2.直接删除变量</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pyhton中如何进行面向对象编程中的提升知识部分&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>类和对象（基础）</title>
    <link href="http://yoursite.com/2019/02/24/python%E7%B1%BB%E5%92%8C%E5%AF%B9%E8%B1%A1%EF%BC%88%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
    <id>http://yoursite.com/2019/02/24/python类和对象（基础）/</id>
    <published>2019-02-24T08:59:11.151Z</published>
    <updated>2019-02-24T09:12:57.648Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pyhton中如何进行面向过程编程的基础知识<br><a id="more"></a></p><h1 id="一、编程思想"><a href="#一、编程思想" class="headerlink" title="一、编程思想"></a>一、编程思想</h1><p><strong>1.面向过程</strong><br><strong>做法</strong>：遇到问题直接将（<strong>逻辑和算法</strong>）转换为代码<br><strong>使用工具</strong>：逻辑和算法<br><strong>2.面向函数式编程</strong><br><strong>做法</strong>：遇到问题就想找一个、写一个相应功能的函数<br><strong>使用工具</strong>：函数<br><strong>3.面向对象</strong><br><strong>做法</strong>：遇到问题就考虑可不可以有一个类来提供相应的功能和数据<br><strong>使用工具</strong>：类和对象<br>类中的属性 - 对数据的封装<br>类中的函数 - 对功能的封装</p><h1 id="二、类和对象基础"><a href="#二、类和对象基础" class="headerlink" title="二、类和对象基础"></a>二、类和对象基础</h1><p><strong>1.类和对象的概念</strong><br><strong>a.什么是类</strong>：<br><strong>概念</strong>：拥有<strong>相同功能</strong>和相同<strong>属性</strong>的对象的集合（抽象）<br><strong>b.什么是对象</strong><br><strong>概念</strong>：类的实例（具体）</p><p><strong>2.类的声明</strong><br><strong>内容</strong>：功能（函数）和属性（变量/属性）<br><strong>a.语法</strong><br>class 类名（父类）：<br>    &emsp;类的内容</p><p><strong>b.说明</strong><br><strong>class</strong>: 声明类的关键字<br><strong>类名</strong>：标识符，并且不能是关键字<br> <strong>规范</strong>：采用大驼峰式命名<br><strong>：</strong>：规定写法<br><strong>类的内容</strong>：累的方法、属性和说明文档<br><strong>方法</strong>：声明在类中的函数<br><strong>属性</strong>：声明在类中的变量</p><p><strong>3.如何声明对象</strong><br><strong>方法</strong>：类名（）<br><strong>说明</strong>：创建指定类的对象并且返回</p><p><strong>注意</strong>：同一个类可以创建多个对象<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 声明一个人类</span><br><span class="line">class Person:</span><br><span class="line">    &quot;&quot;&quot;类的说明文档&quot;&quot;&quot;</span><br><span class="line">    num = 61  # 类中的属性</span><br><span class="line"></span><br><span class="line">    # 类中的方法</span><br><span class="line">    def eat(self):</span><br><span class="line">        print(&apos;人在吃饭！！&apos;)</span><br><span class="line">    # 创建Person类的对象；p1就是对象</span><br><span class="line">    p1 = Person()</span><br><span class="line">    print(p1)</span><br><span class="line"></span><br><span class="line">    # 同一个类可以创建多个对象</span><br><span class="line">    p2 = Person()</span><br><span class="line">    print(p2)</span><br></pre></td></tr></table></figure></p><h1 id="三、对象方法"><a href="#三、对象方法" class="headerlink" title="三、对象方法"></a>三、对象方法</h1><p><strong><em>声明类的伪代码</em></strong><br>class 类名：<br>   &emsp; 类中的属性<br>   &emsp; 类中的方法</p><p><strong>1.什么是类中的方法</strong><br>声明在类中的函数就是方法<br><strong>分类</strong>：<br><strong>指导思想</strong>：怎么声明，怎么调用，特点<br><strong>a.对象方法</strong>：<br><strong>声明</strong>：直接声明在类中<br><strong>特点</strong>：有默认参数self,通过对象调用可以不用传参<br><strong>调用</strong>：对象.对象方法名<br><strong>当前对象</strong>：调用当前方法的对象（谁调用对象方法<strong>self</strong>就是谁）<br><strong>注意</strong>：当前类的对象能做的事情，self都能做</p><p><strong>b.类方法</strong>：<br><strong>声明</strong>：声明函数前加@classmethod<br><strong>特点</strong>：有默认参数cls,通过类调用时，可以不用传参<br><strong>调用</strong>：类名.类方法名<br><strong>当前对象</strong>：调用当前方法的类（谁调用类方法<strong>cls*就是谁）</strong>注意<strong>：当前类能做的事情，cls都能做</strong>c.静态方法<strong>：</strong>声明<strong>：声明函数前加@staticmethod</strong>特点<strong>：没有默认参数</strong>调用**：类名.静态方法名</p><p>####实际运用<br>类中怎么选择使用哪种方法：<br><strong>对象方法</strong>：实现函数功能需要使用对象属性<br><strong>类方法</strong>：<br>1.不需要使用对象属性为前提<br>2.需要使用类的字段<br><strong>静态方法</strong>：对象属性和类的字段皆不需要<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    # 类的字段</span><br><span class="line">    num = 23</span><br><span class="line"></span><br><span class="line">    # 对象方法：用到对象属性name</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.name = &apos;张三&apos;</span><br><span class="line"></span><br><span class="line">    # 对象属性和类的字段都有，选择对象方法</span><br><span class="line">    def func4(self):</span><br><span class="line">        # 通过self.name来获取对象的姓名</span><br><span class="line">        print(&apos;%s对应的对象&apos; % self.name)</span><br><span class="line">        # 通过 类名.类的字段 来使用类的字段</span><br><span class="line">        print(&apos;人类的数量%d亿&apos; % Person.num)</span><br><span class="line"></span><br><span class="line">    # 静态方法：对象属性和类的字段都不需要</span><br><span class="line">    @staticmethod</span><br><span class="line">    def func3():</span><br><span class="line"></span><br><span class="line">        print(&apos;我是静态方法&apos;)</span><br><span class="line">    # 类方法：需要使用类的字段</span><br><span class="line">    @classmethod</span><br><span class="line">    def func1(cls):</span><br><span class="line">        # 类能做的事情，cls都能做</span><br><span class="line">        p1 = cls()  # 用cls创建对象</span><br><span class="line">        print(p1)</span><br><span class="line">        cls.num = 100  # 用cls来使用类的字段</span><br><span class="line">        print(cls)</span><br><span class="line">        print(&apos;这是一个类方法&apos;)</span><br></pre></td></tr></table></figure></p><h1 id="四、init方法和构造方法"><a href="#四、init方法和构造方法" class="headerlink" title="四、init方法和构造方法"></a>四、init方法和构造方法</h1><p><strong>1.init方法</strong>：<strong>init</strong><br><strong>定义</strong>：类中的一个特殊的对象方法<br><strong>功能</strong>：专门用来对象创建的对象进行初始化<br><strong>过程</strong>：当通过类创建对象时，系统就会自动<strong>调用init方法</strong></p><p><strong>2.构造方法</strong>：<br><strong>定义</strong>：函数名和类名一样的函数<br><strong>功能</strong>：专门用来创建对象<br><strong>原理</strong>：<br>1.声明类时，系统自动创建类对应的构造方法<br><strong>内部如何实现</strong><br>2.创建对象时，内部会先在内部开辟空间保存对象；然后用创建的对象去调用<strong>init</strong>方法，用来对对象进行初始化，<strong>init</strong>方法结束后，返回对象</p><p>def Person(<em>args, **kwargs):<br>   &emsp; 对象 = 创建对象<br>    &emsp; 对象.<strong>init</strong>（</em>args, **kwargs）<br>   &emsp;  return 对象</p><p><strong>注意</strong>：如果类的<strong>init</strong>方法除了self以外，还有<strong>其他参数</strong>，那么我们在创建对象的时候，需要通过给构造方法传参，来间接给<strong>init</strong>方法参数赋值</p><p><strong>魔法方法</strong>：类中以__开头并且以__结尾的方法<br><strong>特点</strong>：创建对象时，无需主动调用，系统会自动调用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># =========构造方法和init方法的原理=========</span><br><span class="line"># 构造方法的伪代码</span><br><span class="line">def my_init(x, y, z):</span><br><span class="line">    print(x, y, z)</span><br><span class="line">    print(&apos;my_init&apos;)</span><br><span class="line"></span><br><span class="line">def my_Dog(*args, **kwargs):</span><br><span class="line">    my_init(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">my_Dog(10, 29, 39)</span><br></pre></td></tr></table></figure></p><h1 id="五、类中属性"><a href="#五、类中属性" class="headerlink" title="五、类中属性"></a>五、类中属性</h1><p><strong>分类</strong>：类的字段和对象属性<br><strong>a.对象属性</strong>：<br><strong>特点</strong>：属性的值会因为对象不同而不同<br><strong>声明</strong>：init对象方法中<br><strong>方式</strong>：self.属性 = 值（这里属性就是对象属性）<br><strong>调用</strong>：对象.属性</p><p><strong>b.类的字段</strong><br><strong>特点</strong>：属性的值不会因为对象的不同而不同<br><strong>声明</strong>：在类中，但在函数外<br><strong>方式</strong>：类的字段名 = 值<br><strong>调用</strong>：类名.类的字段名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    # 类的字段</span><br><span class="line">    num = 33</span><br><span class="line"></span><br><span class="line">    # 在init方法中声明对象属性</span><br><span class="line">    def __init__(self, name1=&apos;&apos;, age1=0):</span><br><span class="line">        self.name = name1</span><br><span class="line">        self.age = age1</span><br></pre></td></tr></table></figure></p><p>###对象属性的增删改查<br><strong>1.查（获取对象属性）</strong><br><strong>方法一</strong>：<br>对象.属性<br><strong>功能</strong>：获取指定对象的指定属性值;属性不存在报错<br><strong>错误类型</strong>：AttributeError 属性错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;女&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">print(p1.name)</span><br><span class="line"># print(p1.name1)  # AttributeError 属性错误</span><br></pre></td></tr></table></figure></p><p> <strong>方法二</strong>：<br>getattr(对象，属性名）<br><strong>功能</strong>：获取指定对象的指定属性值;<br> <strong>特点</strong>：属性不存在，给默认值赋值，不会报错，并且将默认值作为结果返回<br><strong>应用场景</strong>：不确定属性值是否存在时使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;女&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"># 属性不确定，可以使用getattr</span><br><span class="line">    # attr = input(&apos;属性：&apos;)</span><br><span class="line">    # print(getattr(p1, attr))</span><br><span class="line">print(getattr(p1, &apos;name&apos;, None))</span><br><span class="line">print(getattr(p1, &apos;name1&apos;, None))</span><br></pre></td></tr></table></figure></p><p><strong>2.增（添加属性）/ 改（修改属性的值）</strong><br><strong>方法一</strong>：<br>对象.属性 = 值<br> <strong>功能</strong>：<br>1.属性存在，修改属性值<br>2.属性不存在，添加属性<br><strong>方法二</strong>：<br> setattr(对象，属性名，值）<br><strong>功能</strong>：<br>1.属性存在，修改属性值<br>2.属性不存在，添加属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;女&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"># 修改属性</span><br><span class="line">p1.name = &apos;啊帅&apos;</span><br><span class="line">print(p1.name)</span><br><span class="line"># 添加属性</span><br><span class="line">p1.height = 180</span><br><span class="line">print(p1.height)</span><br><span class="line"></span><br><span class="line"># 修改属性</span><br><span class="line">setattr(p1, &apos;age&apos;, 300)</span><br><span class="line">print(p1.age)</span><br><span class="line"># 添加属性</span><br><span class="line">setattr(p1, &apos;weight&apos;, 200)</span><br><span class="line">print(p1.weight)</span><br></pre></td></tr></table></figure></p><p><strong>3.删（删除属性）</strong><br><strong>方法一</strong>：<br> del 对象.属性<br><strong>功能</strong>：删除对象属性<br><strong>方法二</strong>：<br>delattr(对象，属性名）<br><strong>输入</strong>：2个，对象、属性名<br><strong>功能</strong>：删除对象属性<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;女&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">del p1.sex</span><br><span class="line"># print(p1.sex)  # AttributeError: &apos;Person&apos; object has no attribute &apos;sex&apos;</span><br><span class="line">delattr(p1, &apos;age&apos;)</span><br><span class="line"># print(p1.age)  # AttributeError: &apos;Person&apos; object has no attribute &apos;age&apos;</span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>：对象属性的操作只针对于当前对象，不会影响其他对象</p><p>#####补充：__slots__魔法方法<br><strong>功能</strong>：约束当前对象能够拥有的属性个数<br><strong>特点</strong>：init方法里对象属性的个数少于或者等于slots方法的个数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Dog:</span><br><span class="line">    # __slots__魔法</span><br><span class="line">    # 约束当前对象最多能拥有的那个属性</span><br><span class="line">    __slots__ = (&apos;name&apos;, &apos;color&apos;, &apos;sex&apos;, &apos;age&apos;)  # 下边声明的属性比这里少就行</span><br><span class="line"></span><br><span class="line">    def __init__(self, name= &apos;&apos;, color=&apos;黑色&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.color = color</span><br><span class="line">dog1 = Dog(&apos;大话&apos;, &apos;黄色&apos;)</span><br><span class="line">    dog1.name = &apos;sss&apos;</span><br><span class="line">    del dog1.color</span><br></pre></td></tr></table></figure></p><h1 id="六、内置属性"><a href="#六、内置属性" class="headerlink" title="六、内置属性"></a>六、内置属性</h1><p><strong>定义</strong>：创建对象时，系统自动给我们添加的属性（通过继承得到）</p><ul><li><p><strong>__name__</strong><br><strong>功能</strong>：获取类的名字<br><strong>返回值</strong>：字符串<br><strong>调用</strong>：类名.__name__<br><strong>补充</strong>：获取的字符串可以当做字符串来用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    &quot;&quot;&quot;说明文档：人类&quot;&quot;&quot;</span><br><span class="line">    num = 62</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">print(Person)  # &lt;class &apos;__main__.Person&apos;&gt;</span><br><span class="line">print(Person.__name__, type(Person.__name__))  # Person &lt;class &apos;str&apos;&gt;</span><br><span class="line"> # 值是一个字符串，可以当做字符串来用</span><br><span class="line">print(Person.__name__.upper())  # PERSON</span><br></pre></td></tr></table></figure></li><li><p><strong>__class__</strong><br><strong>功能</strong>：获取对象对应的类<br><strong>返回值</strong>：类名<br><strong>调用</strong>：对象.__class__<br><strong>补充</strong>：可以将获取的类名当做类来用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    &quot;&quot;&quot;说明文档：人类&quot;&quot;&quot;</span><br><span class="line">    num = 62</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">p1 = Person()</span><br><span class="line">my_class = p1.__class__</span><br><span class="line">print(my_class)  # &lt;class &apos;__main__.Person&apos;&gt;</span><br><span class="line"># 可以将my_class当做类使用</span><br><span class="line">p2 = my_class(&apos;笑素数&apos;)</span><br><span class="line">print(p2.num)  # 62</span><br></pre></td></tr></table></figure></li><li><p><strong>__doc__</strong><br><strong>功能</strong>：获取类的说明文档<br><strong>返回值</strong>：字符串<br><strong>调用</strong>：类名.__doc__</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    &quot;&quot;&quot;说明文档：人类&quot;&quot;&quot;</span><br><span class="line">    num = 62</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">print(Person.__doc__)  # 说明文档：人类</span><br><span class="line"># 获取p1对应的说明文档</span><br><span class="line">p1 = Person()    </span><br><span class="line">print(p1.__class__.__doc__)  # 说明文档：人类</span><br></pre></td></tr></table></figure></li><li><p>__dict__<br><strong>功能</strong>：将对象属性转化为字典，属性作为key，值作为value<br><strong>返回值</strong>：字典<br><strong>调用</strong>：对象.__dict__<br>#####坑：当给<strong>slots</strong>属性赋值后，对象的<strong>dict</strong>属性就不能使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    &quot;&quot;&quot;说明文档：人类&quot;&quot;&quot;</span><br><span class="line">    num = 62</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">p1 = Person()  </span><br><span class="line">print(p1.__dict__)  # &#123;&apos;name&apos;: &apos;&apos;, &apos;age&apos;: 0, &apos;sex&apos;: &apos;男&apos;&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>__bases__</strong><br><strong>功能</strong>:获取当前类的父类<br><strong>返回值</strong>：元祖<br><strong>调用</strong>：类名.__bases__</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    &quot;&quot;&quot;说明文档：人类&quot;&quot;&quot;</span><br><span class="line">    num = 62</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line">print(Person.__bases__)  # (&lt;class &apos;object&apos;&gt;,)</span><br></pre></td></tr></table></figure></li></ul><p>###补充：<strong>__repr__</strong><br><strong>原理</strong>：当通过print打印一个对象的时候，实质是打印对象调用__repr__函数的返回值<br><strong>功能</strong>：定制对象的打印格式<br><strong>返回值</strong>：字符串<br><strong>声明</strong>：类中的对象魔法方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class Person:</span><br><span class="line">    &quot;&quot;&quot;说明文档：人类&quot;&quot;&quot;</span><br><span class="line">    num = 62</span><br><span class="line">    def __init__(self, name=&apos;&apos;, age=0, sex=&apos;男&apos;):</span><br><span class="line">        self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.sex = sex</span><br><span class="line"></span><br><span class="line">    def __repr__(self):</span><br><span class="line">    # 系统默认的打印格式</span><br><span class="line">    return &apos;&lt;%s.%s object at %s&gt;&apos; % (self.__class__.__module__, self.__class__.__name__, hex(id(self)))</span><br><span class="line">    return str(self.__dict__)[1:-1] + &apos;at&apos; + hex(id(self))  # 定制</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pyhton中如何进行面向过程编程的基础知识&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>异常捕获和json</title>
    <link href="http://yoursite.com/2019/02/24/python%E5%BC%82%E5%B8%B8%E6%8D%95%E8%8E%B7%E5%92%8Cjson/"/>
    <id>http://yoursite.com/2019/02/24/python异常捕获和json/</id>
    <published>2019-02-24T08:54:07.878Z</published>
    <updated>2019-02-24T09:12:13.225Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pyhton中的json数据格式和异常捕获<br><a id="more"></a></p><p>#一、json<br><strong>1.什么是json数据</strong><br><strong>定义</strong>：特定语法的数据格式</p><p><strong>2.json数据的语法</strong><br><strong>a.</strong>一个json数据只能有一个数据（而且必须要有一个）<br><strong>b.</strong>这个数据的数据类型必须是json支持的数据类型</p><p><strong>3.json支持的数据类型</strong></p><p><strong>a.数字类型</strong>:包含所有的数字，支持科学计数法<br><strong>注意</strong>：数字前不能加+号</p><p><strong>b.字符串</strong>：使用<strong>双引号</strong>括起来的数据</p><p><strong>c.布尔</strong>：true 和 false 两个值<br><strong>表示</strong>：真 和 假</p><p><strong>d.数组</strong>：相当于python的列表，[]表示，多元素用逗号隔开；例如：[‘dff’, 90, ‘dfj’]</p><p><strong>e.字典</strong>：相当于python的字典，{}表示，多个键值对逗号隔开，例如：{‘a’: 1, ‘b’: 2}</p><p><strong>f.空值</strong>：null， 相当于python中的None</p><p><strong>4.python处理json数据</strong><br>python中提供了json库，专门处理json数据<br><strong>a.将json数据转换成python数据（通过爬虫获取别人提供的json数据，在python中处理）</strong><br>1.转换方式<br>| 类型   | json | python                    |<br>| —- | —- | ————————- |<br>| 数字   | int  | int/float                 |<br>| 字符串  | str  | str，可能双引号会变成单引号           |<br>| 布尔   | bool | bool（会将首字母变大写） True False |<br>| 数组   | list | list                      |<br>| 字典   | dict | dict                      |<br>| 空值   | null | None                      |</p><p>2.loads方法<br><strong>loads(字符串， encoding=’utf-8’)</strong><br><strong>功能</strong>：将字符串中的json数据转换成对应的python数据<br><strong>输入</strong>：字符串，文字编码方式<br><strong>输出</strong>：python数据<br><strong>注意</strong>：这里的字符串<strong>内容</strong>必须是json支持的数据类型</p><p><strong>b.将python数据转换成json数据（python写后台接口，将数据提供给客户端）</strong><br>1.转换方式<br>| 类型    | python     | 类型   | json                     |<br>| —– | ———- | —- | ———————— |<br>| 数字    | int/float  | 数字   | int                      |<br>| 字符串   | str        | 字符串  | str(单引号会转换为双引号）          |<br>| 布尔    | bool       | 布尔   | True-&gt;true  False-&gt;false |<br>| 元祖、列表 | list/tuple | 数组   | list                     |<br>| 字典    | dict       | 字典   | dict                     |<br>| 空值    | None       | 空值   | null                     |</p><p><strong>注意</strong>：集合（set)不能转换成json数据类型</p><p>2.dumps(对象)<br><strong>输入</strong>：python数据<br><strong>输出</strong>：内容是json数据的字符串<br><strong>注意</strong>：返回值是字符串，并且字符串的<strong>内容</strong>是json数据</p><p><strong>5.json文件处理</strong><br><strong>什么是json文件</strong>：严格来说，json文件是文件内容是json数据的文件</p><p><strong>load(文件对象)</strong><br><strong>功能</strong>：将指定文件中的内容读出来，并且转换成pyhton对应的数据<br><strong>输入</strong>：json数据格式的文件<br><strong>输出</strong>：python对应的数据文件<br><strong>注意</strong>：这里涉及到<strong>文件的读写</strong></p><p><strong>dump(对象，文件对象)</strong><br><strong>功能</strong>：将指定对象转换成内容是json格式的字符串，然后写入指定的文件中<br><strong>注意</strong>：<br>1.对象对应的类型必须是能够转换成json的数据类型<br>2.这里涉及到<strong>文件的读写</strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br></pre></td></tr></table></figure></p><p>#####1.json转python<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># 将json中的字符串转换成python数据</span><br><span class="line">content = json.loads(&apos;&quot;abc&quot;&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">print(content, type(content))  # abc &lt;class &apos;str&apos;&gt;</span><br><span class="line"># 将json中的数字转换成python数据</span><br><span class="line">content = json.loads(&apos;1111&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">print(content, type(content))  # 1111 &lt;class &apos;int&apos;&gt;</span><br><span class="line"># 将json中的字典转换成python数据</span><br><span class="line">content = json.loads(&apos;&#123;&quot;name&quot;: &quot;张三&quot;, &quot;age&quot;: 18&#125;&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">print(content, type(content))  # &#123;&apos;name&apos;: &apos;张三&apos;, &apos;age&apos;: 18&#125; &lt;class &apos;dict&apos;&gt;</span><br><span class="line">print(content[&apos;name&apos;])  # 张三</span><br><span class="line"># 练习</span><br><span class="line">with open(&apos;data.json&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    info = f.read()</span><br><span class="line">    dict1 = json.loads(info, encoding=&apos;utf-8&apos;)</span><br><span class="line">    for item in dict1[&apos;data&apos;]:</span><br><span class="line">        print(item[&apos;url&apos;])</span><br></pre></td></tr></table></figure></p><p>#####2.python转json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">result = json.dumps(100)</span><br><span class="line">print(type(result), result)  # &lt;class &apos;str&apos;&gt; 100</span><br><span class="line"></span><br><span class="line">result = json.dumps(&apos;abc&apos;)</span><br><span class="line">print(type(result), result)  # &lt;class &apos;str&apos;&gt; &quot;abc&quot;</span><br><span class="line"></span><br><span class="line">result = json.dumps(&apos;True&apos;)</span><br><span class="line">print(type(result), result)  # &lt;class &apos;str&apos;&gt; &quot;True&quot;</span><br><span class="line"></span><br><span class="line">result = json.dumps([10, &apos;abc&apos;, True])</span><br><span class="line">print(type(result), result)  # &lt;class &apos;str&apos;&gt; [10, &quot;abc&quot;, true]</span><br><span class="line"></span><br><span class="line">result = json.dumps(&#123;&apos;a&apos;: 10, &apos;b&apos;: True, &apos;c&apos;: None&#125;)</span><br><span class="line">print(type(result), result)  # &lt;class &apos;str&apos;&gt; &#123;&quot;a&quot;: 10, &quot;b&quot;: true, &quot;c&quot;: null&#125;</span><br></pre></td></tr></table></figure></p><p>#####3.读json文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">with open(&apos;data.json&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    result = json.load(f)  # 相当于 result = json.loads(f.read())</span><br><span class="line">    print(type(result), result[&apos;msg&apos;])  # &lt;class &apos;dict&apos;&gt; 成功!</span><br><span class="line"></span><br><span class="line">all_student = [</span><br><span class="line">    &#123;&apos;name&apos;: &apos;小明&apos;, &apos;age&apos;: 12, &apos;tel&apos;: &apos;12333333&apos;&#125;,</span><br><span class="line">    &#123;&apos;name&apos;: &apos;大明&apos;, &apos;age&apos;: 12, &apos;tel&apos;: &apos;12333333&apos;&#125;,</span><br><span class="line">    &#123;&apos;name&apos;: &apos;地明&apos;, &apos;age&apos;: 12, &apos;tel&apos;: &apos;12333333&apos;&#125;</span><br><span class="line">]</span><br><span class="line">with open(&apos;student.json&apos;, &apos;w&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    json.dump(all_student, f)  # 相当于f.write(json.dumps(all_student))</span><br></pre></td></tr></table></figure></p><p>#二、数据请求</p><p>python中的数据请求（http请求），是第三方库requests来提供的</p><p><strong>1.requests第三方库的使用</strong><br>get/post都是发送请求获取<strong>接口</strong>提供的数据<br><strong>get(url, params=None)</strong><br><strong>url</strong>:字符串，需要获取的数据的接口地址<br><strong>params</strong>:字典，参数列表（给服务器发送请求的时候，需要传给服务器的数据）</p><h5 id="完整的接口：协议：-主机地址-路径？参数列表"><a href="#完整的接口：协议：-主机地址-路径？参数列表" class="headerlink" title="完整的接口：协议：//主机地址/路径？参数列表"></a>完整的接口：协议：//主机地址/路径？参数列表</h5><p><strong>主机地址</strong>：互联网上唯一的计算机的ip<br><strong>路径</strong>：绝对路径<br><strong>参数列表</strong>：参数名1=值1 &amp; 参数名2=值2</p><p>post(url, params=None, json=None)（暂时不管）</p><p>#####1发送请求，并且获取返回的数据<br>   <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import requests</span><br><span class="line">    # 1发送请求，并且获取返回的数据</span><br><span class="line">    # 服务器返回的数据叫响应</span><br><span class="line">    response = requests.get(&apos;https://www.apiopen.top/meituApi?page=1&apos;)</span><br><span class="line">    # response = requests.get(&apos;https://www.apiopen.top/meituApi&apos;, &#123;&apos;page&apos;: 1&#125;)</span><br><span class="line">    print(response)</span><br></pre></td></tr></table></figure></p><p> #####2.从响应中获取数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># a.获取json数据</span><br><span class="line">content_json = response.json()  # 自动将json数据转换成python对应的数据</span><br><span class="line">print(content_json)</span><br><span class="line">print(type(content_json))</span><br><span class="line"></span><br><span class="line"># b.获取字符串数据</span><br><span class="line">content_text = response.text</span><br><span class="line">print(type(content_text))</span><br><span class="line">print(content_text)</span><br><span class="line"></span><br><span class="line"># c.获取二进制数据(获取原始数据）</span><br><span class="line">content_bytes = response.content</span><br><span class="line">print(content_bytes)</span><br><span class="line"></span><br><span class="line"># 下载图片</span><br><span class="line">response2 = requests.get(&apos;http://tx.haiqq.com/uploads/allimg/170506/0H92Q915-1.jpg&apos;)</span><br><span class="line">with open(&apos;luffy.jpg&apos;, &apos;wb&apos;) as f:</span><br><span class="line">    f.write(response2.content)</span><br></pre></td></tr></table></figure></p><p>#三、异常捕获</p><p><strong>1.异常捕获</strong><br><strong>本质</strong>：让本该报错的代码不报错<br><strong>使用场景</strong>：知道某段代码会出现异常，但是又没有办法避免，同时不希望出现异常时程序崩溃，这时候就可以通过异常捕获，来让程序不崩溃，并且自行处理异常</p><p><strong>2.异常捕获语法</strong><br><strong>a.try-except</strong><br><strong>功能</strong>：可以捕获<strong>所有类型</strong>的异常，只要出现异常就捕获<br>try:<br>  &emsp;  代码段1(可能会出现异常的代码段）<br>except:<br>  &emsp;   代码段2（出现异常后处理异常的代码段）<br><strong>执行过程</strong>：<br>执行代码段1，如果执行代码段1中<strong>出现异常</strong>，程序不崩溃，<strong>直接执行</strong>代码段2,如果代码段1中未出现异常，就不执行代码段2，而是直接执行后面的其他语句</p><p><strong>b.try-except 错误类型</strong><br> <strong>功能</strong>：捕获指定类型的异常，只有代码段1中出现了指定类型的异常才捕获<br>try：<br>  &emsp;   代码段1(可能会出现异常的代码段）<br>except 错误类型：<br>  &emsp;   代码段2（出现异常后处理异常的代码段）</p><p><strong>c.try - except (错误类型1，错误类型2，….)</strong><br><strong>功能</strong>：同时捕获<strong>多种指定异常</strong>，做出<strong>相同处理</strong><br>try:<br>   &emsp;  代码段1(可能会出现异常的代码段）<br>except (错误类型1，错误类型2，….):<br>   &emsp;  代码段2（出现异常后处理异常的代码段）</p><p><strong>d.try - except -错误类型1 - except 错误类型2…</strong>功能**：同时捕获多种异常，可以对不同异常做不同处理<br>try:<br>    &emsp; 代码段1(可能会出现异常的代码段）<br>except 错误类型1：<br>    &emsp; 代码段2<br>except 错误类型2：<br>    &emsp; 代码段3</p><p><strong>3.抛出异常</strong>（主动让程序崩溃）</p><p><strong>raise 错误类型</strong><br><strong>说明</strong>：程序执行到此，如果没有满足要求，就抛出异常</p><p><strong>注意</strong>：错误类型可以是系统提供的错误类型，也可以是自定义错误类型（要求这个值是一个类，而且是exception的子类）</p><p>#####a.try-except<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def method11():</span><br><span class="line">    while 1:</span><br><span class="line">        try:</span><br><span class="line">            # 正确就跳出循环，否则继续输入</span><br><span class="line">            number = int(input(&apos;输入数字：&apos;))</span><br><span class="line">            print(&apos;输入正确&apos;, number)</span><br><span class="line">            break</span><br><span class="line">        except:</span><br><span class="line">            print(&apos;输入有误，继续输入&apos;)</span><br></pre></td></tr></table></figure></p><p> #####c.try-except (错误类型1,错误类型2…)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def method2():</span><br><span class="line">    try:</span><br><span class="line">        print(&#123;&apos;a&apos;: 100&#125;[&apos;b&apos;])  # KeyError</span><br><span class="line">        print([1, 2, 3][4])  # IndexError</span><br><span class="line">    except (KeyError, IndexError):</span><br><span class="line">        print(&apos;出现异常&apos;)</span><br></pre></td></tr></table></figure></p><p> #####b.try-except 错误类型<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def method2():</span><br><span class="line">    try:</span><br><span class="line">        print(&#123;&apos;a&apos;: 100&#125;[&apos;b&apos;])  # KeyError</span><br><span class="line">        print([1, 2, 3][4])  # IndexError</span><br><span class="line">    except KeyError:</span><br><span class="line">        print(&apos;出现异常&apos;)</span><br></pre></td></tr></table></figure></p><p> #####d.try - except -错误类型1 - except 错误类型2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def method3():</span><br><span class="line">    try:</span><br><span class="line">        with open(&apos;abc.txt&apos;, &apos;r&apos;) as f:</span><br><span class="line">            print(f.read())</span><br><span class="line">        print(&#123;&apos;a&apos;: 100&#125;[&apos;b&apos;])  # KeyError</span><br><span class="line">    except KeyError:</span><br><span class="line">        print(&apos;key不存在&apos;)</span><br><span class="line">    except FileNotFoundError:</span><br><span class="line">        print(&apos;文件不存在&apos;)</span><br></pre></td></tr></table></figure></p><p>#####3.抛出异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def pu_func1(age:int):</span><br><span class="line">    if age &gt; 18:</span><br><span class="line">        raise ValueError</span><br><span class="line">    print(age)  # 报错</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pyhton中的json数据格式和异常捕获&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>生成式和文件操作</title>
    <link href="http://yoursite.com/2019/02/24/python%E7%94%9F%E6%88%90%E5%BC%8F%E5%92%8C%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2019/02/24/python生成式和文件操作/</id>
    <published>2019-02-24T08:52:38.365Z</published>
    <updated>2019-02-24T09:12:22.869Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了pyhton中的生成式和文件操作相关的知识<br><a id="more"></a></p><p>#一、生成式<br><strong>1.什么是生成式</strong><br>生成式就是生成器的一种特殊写法<br><strong>作用</strong>：让变量去序列中取值，每取一个值，就将对应的表达式的值，作为生成器的元素<br><strong>2.写法</strong><br>a.生成器 = （表达式 for 变量 in 序列）<br><strong>展开</strong>：<br>def 函数名（）：<br>   &emsp; for 变量 in 序列：<br>    &emsp;&emsp;    yield 表达式<br>b.生成器 = （表达式 for 变量 in 序列 if 条件语句）<br><strong>展开</strong>：<br>def 函数名（）：<br> &emsp;   for 变量 in 序列：<br>     &emsp;&emsp;   if 条件语句：<br>      &emsp;&emsp;&emsp;      yield 表达式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">gen1 = (x*2 for x in &apos;abc123&apos;)</span><br><span class="line">print(gen1)</span><br><span class="line">print(next(gen1))</span><br><span class="line">print(next(gen1))</span><br><span class="line">print(next(gen1))</span><br><span class="line"></span><br><span class="line"># 这个是生成式(x*2 for x in &apos;abc123&apos;)展开成生成器的写法</span><br><span class="line">def func1():</span><br><span class="line">    for x in &apos;abc123&apos;:</span><br><span class="line">        yield x*2</span><br><span class="line"></span><br><span class="line">gen2 = ((value, key) for key, value in &#123;&apos;name&apos;: &apos;xioaming&apos;, &apos;age&apos;: 10&#125;.items())</span><br><span class="line">print(next(gen2))  # (&apos;xioaming&apos;, &apos;name&apos;)</span><br><span class="line">print(next(gen2))  # (10, &apos;age&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">gen3 = (x for x in range(10) if x &amp; 1)</span><br><span class="line">print(next(gen3))  # 1</span><br><span class="line">print(next(gen3))  # 3</span><br></pre></td></tr></table></figure></p><p><strong>3.将迭代器和生成器转换成其他序列</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">gen5 = (x.upper() for x in &apos;12df43df3df5&apos; if &apos;a&apos; &lt;= x &lt;= &apos;z&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def list_pu(seq):</span><br><span class="line">    new = []</span><br><span class="line">    for x in seq:</span><br><span class="line">        new.append(x)</span><br><span class="line">    return new</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">list2 = list_pu(gen5)</span><br><span class="line">print(list2)  # [&apos;D&apos;, &apos;F&apos;, &apos;D&apos;, &apos;F&apos;, &apos;D&apos;, &apos;F&apos;]</span><br><span class="line"></span><br><span class="line"># [生成式] -&gt; 直接将生成式对应的生成器转换为列表</span><br><span class="line">list3 = [x.upper() for x in &apos;12df43df3df5&apos; if &apos;a&apos; &lt;= x &lt;= &apos;z&apos;]</span><br><span class="line">print(list3)  # [&apos;D&apos;, &apos;F&apos;, &apos;D&apos;, &apos;F&apos;, &apos;D&apos;, &apos;F&apos;]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 交换字典的key和value的位置</span><br><span class="line">dict1 = &#123;&apos;a&apos;: 1, &apos;b&apos;: 2, &apos;c&apos;: 3&#125;</span><br><span class="line">result = dict((x, y) for y, x in dict1.items())</span><br><span class="line">print(result)  # &#123;1: &apos;a&apos;, 2: &apos;b&apos;, 3: &apos;c&apos;&#125;</span><br></pre></td></tr></table></figure><p>#二、文件操作<br><strong>1.数据本地化和数据持久化</strong><br><strong>定义</strong>：将数据以文件的形式存到计算机硬盘（程序中保存的数据，当程序运行结束会自动销毁）</p><p><strong>2.如何数据持久化（如何将程序中数据和本地文件数据关联）</strong><br><strong>文件读写操作</strong>：<br><strong>读</strong>：获取文件中的内容<br><strong>写</strong>：将数据添加到文件中</p><p><strong>a.文件操作的基本流程</strong>：<br><strong>第一步</strong>：打开文件<br><strong>第二步</strong>：文件操作（读/写）<br><strong>第三步</strong>：关闭文件</p><p><strong>3.打开文件</strong><br><strong>open(file, mode=’r’, encoding=None)</strong><br><strong>功能</strong>：以指定的模式打开指定的文件，并且返回被打开的文件对象<br><strong>说明</strong>：<br><strong>file</strong>:<strong>字符串</strong>，需要打开的文件的路径<br>        1.（了解）绝对路径：文件在电脑上的全路径<br>        2.<strong>（掌握）相对路径</strong>：相对当前代码文件对应的目录来确定的路径<br>                       <strong>./</strong>   &emsp; 当前py文件所在的目录<br>                        <strong>../</strong>  &emsp; 代表当前目录的上层目录<br>                        <strong>…/</strong>  &emsp;代表当前目录的上层目录的上层目录<br><strong>mode</strong>:<strong>字符串</strong>，文件的打开方式<br>       <strong>r</strong>: 以<strong>只读</strong>的形式打开，文本  （默认值）<br>        <strong>w</strong>: 以写的形式打开（覆盖），文本<br>        <strong>a</strong>:以写的形式打开（追加），文本<br>       <strong>rb/br</strong> : 以只读的形式打开，二进制<br>        <strong>wb/bw</strong>: 以写的形式打开（覆盖），二进制<br>        <strong>+</strong>:以读写的形式打开<br>        <strong>注意</strong>：<br>1.以<strong>读的方式</strong>打开一个不存在的文件，程序报错：FileNotFoundError<br>2.以<strong>写的方式</strong>打开一个不存在的文件，不会报错，还会<strong>自动创建</strong>这个文件<br><strong>encoding</strong>:<strong>字符串</strong>，文字编码方式<br>           &emsp;&emsp;&emsp;&emsp;&emsp; utf-8:支持所有的语言<br>            &emsp;&emsp;&emsp;&emsp;&emsp;gbk:只支持英文<br>            <strong>注意</strong>：<br>            a.读和写对应的编码要保持一致<br>            b.非文本文件不能设置编码encoding，例如：图片，视频，可执行文件等..<br>            c.传值时，必须使用关键字参数<br>            d.以二进制形式打开文件，不能设置encoding</p><p><strong>4.操作文件</strong>：<br><strong>a.读操作</strong><br><strong>文件对象.read()</strong><br><strong>目的</strong>：获取指定文件的内容<br><strong>注意</strong>：打开一次，只能读一次，再用需要再打开</p><p><strong>5.关闭文件</strong><br><strong>文件对象.close()</strong></p><p><strong>6.文件操作的简写方式</strong><br><strong>说明</strong>：打开文件后，操作完成后会自动关闭文件</p><p>#####with open(file, mode, encoding) as 文件对象：<br>  &emsp;  文件操作代码</p><p>#####a.打开文件</p><p><strong><em>1.打开当前目录下的文件：文件名 或者 ./文件名</em></strong><br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">open(&apos;致橡树.txt&apos;)</span><br><span class="line">open(&apos;./致橡树.txt&apos;)</span><br></pre></td></tr></table></figure></p><p><strong><em>2.打开当前目录下，子目录下的文件:子目录/文件名</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">open(&apos;files/abc.txt&apos;)</span><br><span class="line">open(&apos;files/f1/aaa.txt&apos;)</span><br></pre></td></tr></table></figure></p><p>#####b.打开方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;files/a1.txt&apos;, &apos;w&apos;, encoding=&apos;utf-8&apos;)</span><br></pre></td></tr></table></figure></p><p>#####c.读操作</p><p><strong><em>1.读整个文件内容</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;致橡树.txt&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">print(f.read())</span><br><span class="line"></span><br><span class="line">f = open(&apos;致橡树.txt&apos;, &apos;rb&apos;)</span><br><span class="line">content = f.read()</span><br><span class="line">print(type(content))  # &lt;class &apos;bytes&apos;&gt;  二进制对应的数据类型</span><br></pre></td></tr></table></figure></p><p><strong><em>2.读一行内容</em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f2 = open(&apos;致橡树.txt&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">line1 = f2.readline()</span><br><span class="line">print(line1)</span><br><span class="line">line2 = f2.readline()</span><br><span class="line">print(line2)</span><br><span class="line">print(f2.read())</span><br></pre></td></tr></table></figure></p><p>#####应用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 练习：读文件中的内容，一行一行读，读完为止</span><br><span class="line">f1 = open(&apos;致橡树.txt&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    line1 = f2.readline()</span><br><span class="line">    if not line1:</span><br><span class="line">        break</span><br><span class="line">    print(line1)</span><br></pre></td></tr></table></figure></p><p>#####d.写操作示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 如果需要对文件进行写操作，那么文件必须以写的方式打开</span><br><span class="line"># w -&gt; 用新的内容覆盖原内容</span><br><span class="line"># a -&gt; 在源文件末尾添加新的内容</span><br><span class="line"># bw/wb</span><br><span class="line">f = open(&apos;致橡树.txt&apos;, &apos;a&apos;, encoding=&apos;utf-8&apos;)</span><br><span class="line">f.write(&apos;哈喽，小姐姐！！！&apos;)</span><br></pre></td></tr></table></figure></p><h1 id="文件读写的应用步骤"><a href="#文件读写的应用步骤" class="headerlink" title="文件读写的应用步骤"></a>文件读写的应用步骤</h1><p><strong>第一步</strong>：程序中需要这个数据时，就从文件中将这个数据读出来<br><strong>第二步</strong>：对数据进行修改后，再将修改了之后最新的数据保存到文件中<br>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 用一个变量保存当前文件执行的次数：第一次执行py文件打印1，第二次执行打印2...</span><br><span class="line"></span><br><span class="line"># 将数据从文件中读出来</span><br><span class="line">with open(&apos;files/data.txt&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    num = int(f.read())</span><br><span class="line"></span><br><span class="line">num += 1</span><br><span class="line"></span><br><span class="line"># 将新的数据写入文件中</span><br><span class="line">with open(&apos;files/data.txt&apos;, &apos;w&apos;, encoding=&apos;utf-8&apos;) as f:</span><br><span class="line">    f.write(str(num))</span><br><span class="line"></span><br><span class="line"># 显示数据</span><br><span class="line">print(num)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了pyhton中的生成式和文件操作相关的知识&lt;br&gt;
    
    </summary>
    
      <category term="python编程" scheme="http://yoursite.com/categories/python%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="语言学习" scheme="http://yoursite.com/tags/%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
